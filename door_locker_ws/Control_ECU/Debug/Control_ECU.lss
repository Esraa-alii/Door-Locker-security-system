
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000024c2  00002556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800076  00800076  0000256c  2**0
                  ALLOC
  3 .stab         0000297c  00000000  00000000  0000256c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001557  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000643f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000657f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000066ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008338  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009223  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a130  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__vector_3>
      10:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__vector_8>
      24:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c4 0d 	jmp	0x1b88	; 0x1b88 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 5f 12 	jmp	0x24be	; 0x24be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 34 12 	jmp	0x2468	; 0x2468 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 *
 *******************************************************************************/

#include "Control_system.h"

int main(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6b 97       	sbiw	r28, 0x1b	; 27
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*Initialize the buzzer*/
	Buzzer_init();
     b5a:	0e 94 c1 06 	call	0xd82	; 0xd82 <Buzzer_init>

	/*Initialize the DC_Motor*/
	DcMotor_Init();
     b5e:	0e 94 2e 09 	call	0x125c	; 0x125c <DcMotor_Init>

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_config uart_config ={Async,enable_evenPolarity,one_bit};
     b62:	87 e0       	ldi	r24, 0x07	; 7
     b64:	fe 01       	movw	r30, r28
     b66:	31 96       	adiw	r30, 0x01	; 1
     b68:	df 01       	movw	r26, r30
     b6a:	28 2f       	mov	r18, r24
     b6c:	1d 92       	st	X+, r1
     b6e:	2a 95       	dec	r18
     b70:	e9 f7       	brne	.-6      	; 0xb6c <main+0x26>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	8a 83       	std	Y+2, r24	; 0x02
	// initialization of UART
	UART_init(&uart_config);
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	0e 94 10 11 	call	0x2220	; 0x2220 <UART_init>

	//	initialize the I2C driver whith prescaler 1
	I2C_config i2c_config = {prescaler_1,2,ADDRESS};
     b7e:	ce 01       	movw	r24, r28
     b80:	08 96       	adiw	r24, 0x08	; 8
     b82:	9b 8b       	std	Y+19, r25	; 0x13
     b84:	8a 8b       	std	Y+18, r24	; 0x12
     b86:	ad e6       	ldi	r26, 0x6D	; 109
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	bd 8b       	std	Y+21, r27	; 0x15
     b8c:	ac 8b       	std	Y+20, r26	; 0x14
     b8e:	b3 e0       	ldi	r27, 0x03	; 3
     b90:	be 8b       	std	Y+22, r27	; 0x16
     b92:	ec 89       	ldd	r30, Y+20	; 0x14
     b94:	fd 89       	ldd	r31, Y+21	; 0x15
     b96:	00 80       	ld	r0, Z
     b98:	2c 89       	ldd	r18, Y+20	; 0x14
     b9a:	3d 89       	ldd	r19, Y+21	; 0x15
     b9c:	2f 5f       	subi	r18, 0xFF	; 255
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	3d 8b       	std	Y+21, r19	; 0x15
     ba2:	2c 8b       	std	Y+20, r18	; 0x14
     ba4:	aa 89       	ldd	r26, Y+18	; 0x12
     ba6:	bb 89       	ldd	r27, Y+19	; 0x13
     ba8:	0c 92       	st	X, r0
     baa:	ea 89       	ldd	r30, Y+18	; 0x12
     bac:	fb 89       	ldd	r31, Y+19	; 0x13
     bae:	31 96       	adiw	r30, 0x01	; 1
     bb0:	fb 8b       	std	Y+19, r31	; 0x13
     bb2:	ea 8b       	std	Y+18, r30	; 0x12
     bb4:	fe 89       	ldd	r31, Y+22	; 0x16
     bb6:	f1 50       	subi	r31, 0x01	; 1
     bb8:	fe 8b       	std	Y+22, r31	; 0x16
     bba:	2e 89       	ldd	r18, Y+22	; 0x16
     bbc:	22 23       	and	r18, r18
     bbe:	49 f7       	brne	.-46     	; 0xb92 <main+0x4c>
	TWI_init(&i2c_config);
     bc0:	ce 01       	movw	r24, r28
     bc2:	08 96       	adiw	r24, 0x08	; 8
     bc4:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <TWI_init>
	/*initialize the timer driver
	 * channel -> timer0
	 * clock -> 1024
	 * mode -> overflow mode (normal)*/

	TIMER_config timer_config ={timer0,t_clk1024,normal,0};
     bc8:	ce 01       	movw	r24, r28
     bca:	0b 96       	adiw	r24, 0x0b	; 11
     bcc:	98 8f       	std	Y+24, r25	; 0x18
     bce:	8f 8b       	std	Y+23, r24	; 0x17
     bd0:	a8 e6       	ldi	r26, 0x68	; 104
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ba 8f       	std	Y+26, r27	; 0x1a
     bd6:	a9 8f       	std	Y+25, r26	; 0x19
     bd8:	b5 e0       	ldi	r27, 0x05	; 5
     bda:	bb 8f       	std	Y+27, r27	; 0x1b
     bdc:	e9 8d       	ldd	r30, Y+25	; 0x19
     bde:	fa 8d       	ldd	r31, Y+26	; 0x1a
     be0:	00 80       	ld	r0, Z
     be2:	29 8d       	ldd	r18, Y+25	; 0x19
     be4:	3a 8d       	ldd	r19, Y+26	; 0x1a
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	3a 8f       	std	Y+26, r19	; 0x1a
     bec:	29 8f       	std	Y+25, r18	; 0x19
     bee:	af 89       	ldd	r26, Y+23	; 0x17
     bf0:	b8 8d       	ldd	r27, Y+24	; 0x18
     bf2:	0c 92       	st	X, r0
     bf4:	ef 89       	ldd	r30, Y+23	; 0x17
     bf6:	f8 8d       	ldd	r31, Y+24	; 0x18
     bf8:	31 96       	adiw	r30, 0x01	; 1
     bfa:	f8 8f       	std	Y+24, r31	; 0x18
     bfc:	ef 8b       	std	Y+23, r30	; 0x17
     bfe:	fb 8d       	ldd	r31, Y+27	; 0x1b
     c00:	f1 50       	subi	r31, 0x01	; 1
     c02:	fb 8f       	std	Y+27, r31	; 0x1b
     c04:	2b 8d       	ldd	r18, Y+27	; 0x1b
     c06:	22 23       	and	r18, r18
     c08:	49 f7       	brne	.-46     	; 0xbdc <main+0x96>
	Timer_init(&timer_config);
     c0a:	ce 01       	movw	r24, r28
     c0c:	0b 96       	adiw	r24, 0x0b	; 11
     c0e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Timer_init>
	Timer_setCallBack(timer0,timer_decrement_counter);
     c12:	2e ef       	ldi	r18, 0xFE	; 254
     c14:	36 e0       	ldi	r19, 0x06	; 6
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	b9 01       	movw	r22, r18
     c1a:	0e 94 42 10 	call	0x2084	; 0x2084 <Timer_setCallBack>

	/*Enable global interrupt I-Bit*/
	SREG |= (1 << 7);
     c1e:	af e5       	ldi	r26, 0x5F	; 95
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	ef e5       	ldi	r30, 0x5F	; 95
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	80 68       	ori	r24, 0x80	; 128
     c2a:	8c 93       	st	X, r24

	g_order = enterPass;
     c2c:	10 92 76 00 	sts	0x0076, r1
	while (1) {

		switch (g_order) {
     c30:	80 91 76 00 	lds	r24, 0x0076
     c34:	a8 2f       	mov	r26, r24
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	b9 8b       	std	Y+17, r27	; 0x11
     c3a:	a8 8b       	std	Y+16, r26	; 0x10
     c3c:	e8 89       	ldd	r30, Y+16	; 0x10
     c3e:	f9 89       	ldd	r31, Y+17	; 0x11
     c40:	e2 30       	cpi	r30, 0x02	; 2
     c42:	f1 05       	cpc	r31, r1
     c44:	69 f1       	breq	.+90     	; 0xca0 <main+0x15a>
     c46:	28 89       	ldd	r18, Y+16	; 0x10
     c48:	39 89       	ldd	r19, Y+17	; 0x11
     c4a:	23 30       	cpi	r18, 0x03	; 3
     c4c:	31 05       	cpc	r19, r1
     c4e:	54 f4       	brge	.+20     	; 0xc64 <main+0x11e>
     c50:	88 89       	ldd	r24, Y+16	; 0x10
     c52:	99 89       	ldd	r25, Y+17	; 0x11
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	c1 f0       	breq	.+48     	; 0xc88 <main+0x142>
     c58:	a8 89       	ldd	r26, Y+16	; 0x10
     c5a:	b9 89       	ldd	r27, Y+17	; 0x11
     c5c:	a1 30       	cpi	r26, 0x01	; 1
     c5e:	b1 05       	cpc	r27, r1
     c60:	c9 f0       	breq	.+50     	; 0xc94 <main+0x14e>
     c62:	e6 cf       	rjmp	.-52     	; 0xc30 <main+0xea>
     c64:	e8 89       	ldd	r30, Y+16	; 0x10
     c66:	f9 89       	ldd	r31, Y+17	; 0x11
     c68:	e4 30       	cpi	r30, 0x04	; 4
     c6a:	f1 05       	cpc	r31, r1
     c6c:	09 f4       	brne	.+2      	; 0xc70 <main+0x12a>
     c6e:	4f c0       	rjmp	.+158    	; 0xd0e <main+0x1c8>
     c70:	28 89       	ldd	r18, Y+16	; 0x10
     c72:	39 89       	ldd	r19, Y+17	; 0x11
     c74:	24 30       	cpi	r18, 0x04	; 4
     c76:	31 05       	cpc	r19, r1
     c78:	b4 f0       	brlt	.+44     	; 0xca6 <main+0x160>
     c7a:	88 89       	ldd	r24, Y+16	; 0x10
     c7c:	99 89       	ldd	r25, Y+17	; 0x11
     c7e:	85 30       	cpi	r24, 0x05	; 5
     c80:	91 05       	cpc	r25, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <main+0x140>
     c84:	78 c0       	rjmp	.+240    	; 0xd76 <main+0x230>
     c86:	d4 cf       	rjmp	.-88     	; 0xc30 <main+0xea>
		/*
		 *case of the start of the system
		 * recieve the entred password through UART
		 */
		case enterPass:
			recieve_Pass();
     c88:	0e 94 66 07 	call	0xecc	; 0xecc <recieve_Pass>
			g_order = sendByUART;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	80 93 76 00 	sts	0x0076, r24
     c92:	ce cf       	rjmp	.-100    	; 0xc30 <main+0xea>
			break;
			/*
			 *At this case we save the new password at eeprom after check if the two passwords matching or not
			 */
		case sendByUART:
			save_in_EEPROM();
     c94:	0e 94 c7 07 	call	0xf8e	; 0xf8e <save_in_EEPROM>
			g_order = displayMenu;
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	80 93 76 00 	sts	0x0076, r24
     c9e:	c8 cf       	rjmp	.-112    	; 0xc30 <main+0xea>
			 * + for open door
			 * - for change password
			 */

		case displayMenu:
			recieve_optionMenu();
     ca0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <recieve_optionMenu>
     ca4:	c5 cf       	rjmp	.-118    	; 0xc30 <main+0xea>
			 * At this case there is 3 attempts to enter the pass correct
			 * If the password is wrong -> the buzzer will turn on
			 */
		case doorState:
			/*Receive the pass from MCU1*/
			recieve_Pass();
     ca6:	0e 94 66 07 	call	0xecc	; 0xecc <recieve_Pass>
			/*check if the receive pass matching with the saved one or not */
			check_matchingEEPROM();
     caa:	0e 94 87 07 	call	0xf0e	; 0xf0e <check_matchingEEPROM>
			/*send the check of passwords */
			UART_sendByte(checkPass);
     cae:	80 91 8e 00 	lds	r24, 0x008E
     cb2:	0e 94 6f 11 	call	0x22de	; 0x22de <UART_sendByte>
			/*check if the user try the 3 attempts or not */
			if (checkPass == wrongPass) {
     cb6:	80 91 8e 00 	lds	r24, 0x008E
     cba:	88 23       	and	r24, r24
     cbc:	d9 f4       	brne	.+54     	; 0xcf4 <main+0x1ae>
				counter++;
     cbe:	80 91 7b 00 	lds	r24, 0x007B
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	80 93 7b 00 	sts	0x007B, r24
				g_order=doorState;
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	80 93 76 00 	sts	0x0076, r24
				/*the user run out the range (3attempts) so turn on the buzzer  */
				if (counter == 3) {
     cce:	80 91 7b 00 	lds	r24, 0x007B
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	51 f4       	brne	.+20     	; 0xcea <main+0x1a4>
					counter = 0;
     cd6:	10 92 7b 00 	sts	0x007B, r1
					g_order = wrongPassword;
     cda:	85 e0       	ldi	r24, 0x05	; 5
     cdc:	80 93 76 00 	sts	0x0076, r24
					UART_sendByte(g_order);
     ce0:	80 91 76 00 	lds	r24, 0x0076
     ce4:	0e 94 6f 11 	call	0x22de	; 0x22de <UART_sendByte>
     ce8:	a3 cf       	rjmp	.-186    	; 0xc30 <main+0xea>
					break;
				}
				UART_sendByte(g_order);
     cea:	80 91 76 00 	lds	r24, 0x0076
     cee:	0e 94 6f 11 	call	0x22de	; 0x22de <UART_sendByte>
     cf2:	9e cf       	rjmp	.-196    	; 0xc30 <main+0xea>
				break;
			} else if (checkPass == correctPass) {
     cf4:	80 91 8e 00 	lds	r24, 0x008E
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	09 f0       	breq	.+2      	; 0xcfe <main+0x1b8>
     cfc:	99 cf       	rjmp	.-206    	; 0xc30 <main+0xea>
				/*
				 *If the pass is correct then make the counter=0
				 * And turn on the dc_motor to rotate clock wise 15 seconds counted by timer
				 */
				counter = 0;
     cfe:	10 92 7b 00 	sts	0x007B, r1
				matched_State();
     d02:	0e 94 89 08 	call	0x1112	; 0x1112 <matched_State>
				g_order=2;
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	80 93 76 00 	sts	0x0076, r24
     d0c:	91 cf       	rjmp	.-222    	; 0xc30 <main+0xea>
			 * if the user do not enter the password correct in 3 attempts so it will stop and
			 * the buzzer will turn on 60 seconds counted by timer
			 */
		case changePass:
			/*Receive the pass from MCU1*/
			recieve_Pass();
     d0e:	0e 94 66 07 	call	0xecc	; 0xecc <recieve_Pass>
			/*check if the receive pass matching with the saved one or not */
			check_matchingEEPROM();
     d12:	0e 94 87 07 	call	0xf0e	; 0xf0e <check_matchingEEPROM>
			/*send the check password */
			UART_sendByte(checkPass);
     d16:	80 91 8e 00 	lds	r24, 0x008E
     d1a:	0e 94 6f 11 	call	0x22de	; 0x22de <UART_sendByte>
			/*check if the user try the 3 attempts or not */
			if (checkPass == 0) {
     d1e:	80 91 8e 00 	lds	r24, 0x008E
     d22:	88 23       	and	r24, r24
     d24:	d9 f4       	brne	.+54     	; 0xd5c <main+0x216>
				counter++;
     d26:	80 91 7b 00 	lds	r24, 0x007B
     d2a:	8f 5f       	subi	r24, 0xFF	; 255
     d2c:	80 93 7b 00 	sts	0x007B, r24
				g_order=changePass;
     d30:	84 e0       	ldi	r24, 0x04	; 4
     d32:	80 93 76 00 	sts	0x0076, r24
				/*the user run out the range (3attempts) so turn the buzzer  */
				if (counter == 3) {
     d36:	80 91 7b 00 	lds	r24, 0x007B
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	51 f4       	brne	.+20     	; 0xd52 <main+0x20c>
					counter = 0;
     d3e:	10 92 7b 00 	sts	0x007B, r1
					g_order = wrongPassword;
     d42:	85 e0       	ldi	r24, 0x05	; 5
     d44:	80 93 76 00 	sts	0x0076, r24
					UART_sendByte(g_order);
     d48:	80 91 76 00 	lds	r24, 0x0076
     d4c:	0e 94 6f 11 	call	0x22de	; 0x22de <UART_sendByte>
     d50:	6f cf       	rjmp	.-290    	; 0xc30 <main+0xea>
					break;
				}

				UART_sendByte(g_order);
     d52:	80 91 76 00 	lds	r24, 0x0076
     d56:	0e 94 6f 11 	call	0x22de	; 0x22de <UART_sendByte>
     d5a:	0a c0       	rjmp	.+20     	; 0xd70 <main+0x22a>
			} else if (checkPass == correctPass) {
     d5c:	80 91 8e 00 	lds	r24, 0x008E
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	31 f4       	brne	.+12     	; 0xd70 <main+0x22a>
				/*
				 *If the pass is correct then make the counter=0
				 * and then receive the new password from MCU1
				 * and save the new password at eeprom
				 */
				counter = 0;
     d64:	10 92 7b 00 	sts	0x007B, r1
				recieve_Pass();
     d68:	0e 94 66 07 	call	0xecc	; 0xecc <recieve_Pass>
				save_in_EEPROM();
     d6c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <save_in_EEPROM>

			}
			recieve_optionMenu();
     d70:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <recieve_optionMenu>
     d74:	5d cf       	rjmp	.-326    	; 0xc30 <main+0xea>
			/*
			 * The code will run this case in case the user entered wrong password for 3 times
			 * Turn on the buzzer for 60 seconds counted by timer
			 */
		case wrongPassword:
			wrong_Passwords();
     d76:	0e 94 a5 08 	call	0x114a	; 0x114a <wrong_Passwords>
			g_order=displayMenu;
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	80 93 76 00 	sts	0x0076, r24
     d80:	57 cf       	rjmp	.-338    	; 0xc30 <main+0xea>

00000d82 <Buzzer_init>:
/***************************************************
 * Description : Initialize the buzzer to be off
 * Argument    : None
 * Returns     : None
 ***************************************************/
void Buzzer_init(void){
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	/* first set the 2 pin of the buzzer to be output
	 * then connect them to login low (GND) to be off */
	GPIO_setupPinDirection(BUZZER_portID,BUZZER_positive_PinID,PIN_OUTPUT);
     d8a:	83 e0       	ldi	r24, 0x03	; 3
     d8c:	66 e0       	ldi	r22, 0x06	; 6
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	0e 94 1a 0a 	call	0x1434	; 0x1434 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BUZZER_portID,BUZZER_negative_PinID,PIN_OUTPUT);
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	67 e0       	ldi	r22, 0x07	; 7
     d98:	41 e0       	ldi	r20, 0x01	; 1
     d9a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_portID,BUZZER_positive_PinID,LOGIC_LOW);
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	66 e0       	ldi	r22, 0x06	; 6
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
	GPIO_writePin(BUZZER_portID,BUZZER_negative_PinID,LOGIC_LOW);
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	67 e0       	ldi	r22, 0x07	; 7
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <Buzzer_on>:
/***************************************************
 * Description : Turn on the buzzer
 * Argument    : None
 * Returns     : None
 ***************************************************/
void Buzzer_on(void){
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
	/* connect the positive terminal to +ve and the negative terminal to ground */
	GPIO_writePin(BUZZER_portID,BUZZER_positive_PinID,LOGIC_HIGH);
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	66 e0       	ldi	r22, 0x06	; 6
     dc4:	41 e0       	ldi	r20, 0x01	; 1
     dc6:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
	GPIO_writePin(BUZZER_portID,BUZZER_negative_PinID,LOGIC_LOW);
     dca:	83 e0       	ldi	r24, 0x03	; 3
     dcc:	67 e0       	ldi	r22, 0x07	; 7
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
}
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <Buzzer_off>:
/***************************************************
 * Description : Turn on the buzzer
 * Argument    : None
 * Returns     : None
 ***************************************************/
void Buzzer_off(void){
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	/* connect the positive terminal to -ve and the negative terminal to ground
	 * (open circuit) */
	GPIO_writePin(BUZZER_portID,BUZZER_positive_PinID,LOGIC_LOW);
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	66 e0       	ldi	r22, 0x06	; 6
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
	GPIO_writePin(BUZZER_portID,BUZZER_negative_PinID,LOGIC_LOW);
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	67 e0       	ldi	r22, 0x07	; 7
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
}
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <timer_decrement_counter>:
 * Description : count time for call back
 * Argument    : None
 * Returns     : None
 ***************************************************/

void timer_decrement_counter(void) {
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
	//inctement tick every interrupt
	g_timer_tick++;
     e04:	80 91 77 00 	lds	r24, 0x0077
     e08:	90 91 78 00 	lds	r25, 0x0078
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	90 93 78 00 	sts	0x0078, r25
     e12:	80 93 77 00 	sts	0x0077, r24
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <timer>:

void timer(uint8 volatile g_seconds_required) {
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	2b 97       	sbiw	r28, 0x0b	; 11
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	8e 83       	std	Y+6, r24	; 0x06
	TIMER_config timer_config ={timer0,t_clk1024,normal,0};
     e32:	ce 01       	movw	r24, r28
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	98 87       	std	Y+8, r25	; 0x08
     e38:	8f 83       	std	Y+7, r24	; 0x07
     e3a:	e0 e7       	ldi	r30, 0x70	; 112
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	fa 87       	std	Y+10, r31	; 0x0a
     e40:	e9 87       	std	Y+9, r30	; 0x09
     e42:	f5 e0       	ldi	r31, 0x05	; 5
     e44:	fb 87       	std	Y+11, r31	; 0x0b
     e46:	e9 85       	ldd	r30, Y+9	; 0x09
     e48:	fa 85       	ldd	r31, Y+10	; 0x0a
     e4a:	00 80       	ld	r0, Z
     e4c:	89 85       	ldd	r24, Y+9	; 0x09
     e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	9a 87       	std	Y+10, r25	; 0x0a
     e54:	89 87       	std	Y+9, r24	; 0x09
     e56:	ef 81       	ldd	r30, Y+7	; 0x07
     e58:	f8 85       	ldd	r31, Y+8	; 0x08
     e5a:	00 82       	st	Z, r0
     e5c:	8f 81       	ldd	r24, Y+7	; 0x07
     e5e:	98 85       	ldd	r25, Y+8	; 0x08
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	98 87       	std	Y+8, r25	; 0x08
     e64:	8f 83       	std	Y+7, r24	; 0x07
     e66:	9b 85       	ldd	r25, Y+11	; 0x0b
     e68:	91 50       	subi	r25, 0x01	; 1
     e6a:	9b 87       	std	Y+11, r25	; 0x0b
     e6c:	eb 85       	ldd	r30, Y+11	; 0x0b
     e6e:	ee 23       	and	r30, r30
     e70:	51 f7       	brne	.-44     	; 0xe46 <timer+0x2a>
	Timer_init(&timer_config);
     e72:	ce 01       	movw	r24, r28
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Timer_init>
	Timer_setCallBack(timer0,timer_decrement_counter);
     e7a:	2e ef       	ldi	r18, 0xFE	; 254
     e7c:	36 e0       	ldi	r19, 0x06	; 6
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	b9 01       	movw	r22, r18
     e82:	0e 94 42 10 	call	0x2084	; 0x2084 <Timer_setCallBack>
	while (g_timer_tick != ((NUMBER_OF_OVERFLOWS_PER_SECOND) * g_seconds_required));
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	82 95       	swap	r24
     e92:	92 95       	swap	r25
     e94:	90 7f       	andi	r25, 0xF0	; 240
     e96:	98 27       	eor	r25, r24
     e98:	80 7f       	andi	r24, 0xF0	; 240
     e9a:	98 27       	eor	r25, r24
     e9c:	9c 01       	movw	r18, r24
     e9e:	80 91 77 00 	lds	r24, 0x0077
     ea2:	90 91 78 00 	lds	r25, 0x0078
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	69 f7       	brne	.-38     	; 0xe86 <timer+0x6a>
	Timer_deInit(timer0);
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <Timer_deInit>
	g_timer_tick = 0;
     eb2:	10 92 78 00 	sts	0x0078, r1
     eb6:	10 92 77 00 	sts	0x0077, r1
}
     eba:	2b 96       	adiw	r28, 0x0b	; 11
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <recieve_Pass>:
/***************************************************
 * Description : Receive password from HMI_ECU
 * Argument    : None
 * Returns     : None
 ***************************************************/
void recieve_Pass(void) {
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
	/*Receiving the first password from the MCU1 (byte by byte)*/
	for (i = 0; i < 5; i++) {
     ed8:	10 92 94 00 	sts	0x0094, r1
     edc:	0f c0       	rjmp	.+30     	; 0xefc <recieve_Pass+0x30>
		password_recieved[i] = UART_recieveByte();
     ede:	80 91 94 00 	lds	r24, 0x0094
     ee2:	08 2f       	mov	r16, r24
     ee4:	10 e0       	ldi	r17, 0x00	; 0
     ee6:	0e 94 86 11 	call	0x230c	; 0x230c <UART_recieveByte>
     eea:	f8 01       	movw	r30, r16
     eec:	e1 57       	subi	r30, 0x71	; 113
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	80 83       	st	Z, r24
 * Argument    : None
 * Returns     : None
 ***************************************************/
void recieve_Pass(void) {
	/*Receiving the first password from the MCU1 (byte by byte)*/
	for (i = 0; i < 5; i++) {
     ef2:	80 91 94 00 	lds	r24, 0x0094
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	80 93 94 00 	sts	0x0094, r24
     efc:	80 91 94 00 	lds	r24, 0x0094
     f00:	85 30       	cpi	r24, 0x05	; 5
     f02:	68 f3       	brcs	.-38     	; 0xede <recieve_Pass+0x12>
		password_recieved[i] = UART_recieveByte();
	}
}
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <check_matchingEEPROM>:
 * Description : Check if the 2 passwords matching
 * Argument    : None
 * Returns     : None
 ***************************************************/

void check_matchingEEPROM() {
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62

	for (i = 0; i < 5; i++) {
     f16:	10 92 94 00 	sts	0x0094, r1
     f1a:	2b c0       	rjmp	.+86     	; 0xf72 <check_matchingEEPROM+0x64>
		/*read the password from EEPROM*/
		EEPROM_readByte(ADDRESS + i, &password_saved[i]);
     f1c:	80 91 94 00 	lds	r24, 0x0094
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	ac 01       	movw	r20, r24
     f28:	80 91 94 00 	lds	r24, 0x0094
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9c 01       	movw	r18, r24
     f32:	2b 56       	subi	r18, 0x6B	; 107
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	ca 01       	movw	r24, r20
     f38:	b9 01       	movw	r22, r18
     f3a:	0e 94 ba 09 	call	0x1374	; 0x1374 <EEPROM_readByte>
		if (password_saved[i] != password_recieved[i]) {
     f3e:	80 91 94 00 	lds	r24, 0x0094
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	fc 01       	movw	r30, r24
     f48:	eb 56       	subi	r30, 0x6B	; 107
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	20 81       	ld	r18, Z
     f4e:	80 91 94 00 	lds	r24, 0x0094
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	fc 01       	movw	r30, r24
     f58:	e1 57       	subi	r30, 0x71	; 113
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	28 17       	cp	r18, r24
     f60:	19 f0       	breq	.+6      	; 0xf68 <check_matchingEEPROM+0x5a>
			checkPass = wrongPass;
     f62:	10 92 8e 00 	sts	0x008E, r1
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <check_matchingEEPROM+0x6c>
 * Returns     : None
 ***************************************************/

void check_matchingEEPROM() {

	for (i = 0; i < 5; i++) {
     f68:	80 91 94 00 	lds	r24, 0x0094
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	80 93 94 00 	sts	0x0094, r24
     f72:	80 91 94 00 	lds	r24, 0x0094
     f76:	85 30       	cpi	r24, 0x05	; 5
     f78:	88 f2       	brcs	.-94     	; 0xf1c <check_matchingEEPROM+0xe>
		if (password_saved[i] != password_recieved[i]) {
			checkPass = wrongPass;
			break;
		}
	}
	if (i == 5) {
     f7a:	80 91 94 00 	lds	r24, 0x0094
     f7e:	85 30       	cpi	r24, 0x05	; 5
     f80:	19 f4       	brne	.+6      	; 0xf88 <check_matchingEEPROM+0x7a>
		checkPass = correctPass;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	80 93 8e 00 	sts	0x008E, r24
	}
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <save_in_EEPROM>:
/***************************************************
 * Description : Save password to EEPROM
 * Argument    : None
 * Returns     : None
 ***************************************************/
void save_in_EEPROM() {
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	2e 97       	sbiw	r28, 0x0e	; 14
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61

	for (i = 0; i < 5; i++) {
     fa2:	10 92 94 00 	sts	0x0094, r1
     fa6:	89 c0       	rjmp	.+274    	; 0x10ba <save_in_EEPROM+0x12c>
		EEPROM_writeByte((ADDRESS + i), password_recieved[i]);
     fa8:	80 91 94 00 	lds	r24, 0x0094
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	ac 01       	movw	r20, r24
     fb4:	80 91 94 00 	lds	r24, 0x0094
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	fc 01       	movw	r30, r24
     fbe:	e1 57       	subi	r30, 0x71	; 113
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	20 81       	ld	r18, Z
     fc4:	ca 01       	movw	r24, r20
     fc6:	62 2f       	mov	r22, r18
     fc8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <EEPROM_writeByte>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a0 e2       	ldi	r26, 0x20	; 32
     fd2:	b1 e4       	ldi	r27, 0x41	; 65
     fd4:	8b 87       	std	Y+11, r24	; 0x0b
     fd6:	9c 87       	std	Y+12, r25	; 0x0c
     fd8:	ad 87       	std	Y+13, r26	; 0x0d
     fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     fde:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	4a ef       	ldi	r20, 0xFA	; 250
     fea:	54 e4       	ldi	r21, 0x44	; 68
     fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	8f 83       	std	Y+7, r24	; 0x07
     ff6:	98 87       	std	Y+8, r25	; 0x08
     ff8:	a9 87       	std	Y+9, r26	; 0x09
     ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ffc:	6f 81       	ldd	r22, Y+7	; 0x07
     ffe:	78 85       	ldd	r23, Y+8	; 0x08
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	9a 85       	ldd	r25, Y+10	; 0x0a
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e8       	ldi	r20, 0x80	; 128
    100a:	5f e3       	ldi	r21, 0x3F	; 63
    100c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1010:	88 23       	and	r24, r24
    1012:	2c f4       	brge	.+10     	; 0x101e <save_in_EEPROM+0x90>
		__ticks = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9e 83       	std	Y+6, r25	; 0x06
    101a:	8d 83       	std	Y+5, r24	; 0x05
    101c:	3f c0       	rjmp	.+126    	; 0x109c <save_in_EEPROM+0x10e>
	else if (__tmp > 65535)
    101e:	6f 81       	ldd	r22, Y+7	; 0x07
    1020:	78 85       	ldd	r23, Y+8	; 0x08
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	3f ef       	ldi	r19, 0xFF	; 255
    102a:	4f e7       	ldi	r20, 0x7F	; 127
    102c:	57 e4       	ldi	r21, 0x47	; 71
    102e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1032:	18 16       	cp	r1, r24
    1034:	4c f5       	brge	.+82     	; 0x1088 <save_in_EEPROM+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1036:	6b 85       	ldd	r22, Y+11	; 0x0b
    1038:	7c 85       	ldd	r23, Y+12	; 0x0c
    103a:	8d 85       	ldd	r24, Y+13	; 0x0d
    103c:	9e 85       	ldd	r25, Y+14	; 0x0e
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e2       	ldi	r20, 0x20	; 32
    1044:	51 e4       	ldi	r21, 0x41	; 65
    1046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	0f c0       	rjmp	.+30     	; 0x107e <save_in_EEPROM+0xf0>
    1060:	88 ec       	ldi	r24, 0xC8	; 200
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <save_in_EEPROM+0xde>
    1070:	9c 83       	std	Y+4, r25	; 0x04
    1072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	69 f7       	brne	.-38     	; 0x1060 <save_in_EEPROM+0xd2>
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <save_in_EEPROM+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1088:	6f 81       	ldd	r22, Y+7	; 0x07
    108a:	78 85       	ldd	r23, Y+8	; 0x08
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	9e 83       	std	Y+6, r25	; 0x06
    109a:	8d 83       	std	Y+5, r24	; 0x05
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	9a 83       	std	Y+2, r25	; 0x02
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <save_in_EEPROM+0x11a>
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
 * Argument    : None
 * Returns     : None
 ***************************************************/
void save_in_EEPROM() {

	for (i = 0; i < 5; i++) {
    10b0:	80 91 94 00 	lds	r24, 0x0094
    10b4:	8f 5f       	subi	r24, 0xFF	; 255
    10b6:	80 93 94 00 	sts	0x0094, r24
    10ba:	80 91 94 00 	lds	r24, 0x0094
    10be:	85 30       	cpi	r24, 0x05	; 5
    10c0:	08 f4       	brcc	.+2      	; 0x10c4 <save_in_EEPROM+0x136>
    10c2:	72 cf       	rjmp	.-284    	; 0xfa8 <save_in_EEPROM+0x1a>
		EEPROM_writeByte((ADDRESS + i), password_recieved[i]);
		_delay_ms(10);
	}
}
    10c4:	2e 96       	adiw	r28, 0x0e	; 14
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <recieve_optionMenu>:
 * 					+ -> OPEN DOOR
 * 					- -> CHANGE PASSWORD
 * Argument    : None
 * Returns     : None
 ***************************************************/
void recieve_optionMenu(void) {
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	selected_option = UART_recieveByte();
    10de:	0e 94 86 11 	call	0x230c	; 0x230c <UART_recieveByte>
    10e2:	80 93 79 00 	sts	0x0079, r24
	if (selected_option == '+') {
    10e6:	80 91 79 00 	lds	r24, 0x0079
    10ea:	8b 32       	cpi	r24, 0x2B	; 43
    10ec:	31 f4       	brne	.+12     	; 0x10fa <recieve_optionMenu+0x24>
		g_order = doorState;
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	80 93 76 00 	sts	0x0076, r24
		selected_option=0;
    10f4:	10 92 79 00 	sts	0x0079, r1
    10f8:	09 c0       	rjmp	.+18     	; 0x110c <recieve_optionMenu+0x36>
	} else if (selected_option == '-') {
    10fa:	80 91 79 00 	lds	r24, 0x0079
    10fe:	8d 32       	cpi	r24, 0x2D	; 45
    1100:	29 f4       	brne	.+10     	; 0x110c <recieve_optionMenu+0x36>
		g_order = changePass;
    1102:	84 e0       	ldi	r24, 0x04	; 4
    1104:	80 93 76 00 	sts	0x0076, r24
		selected_option=0;
    1108:	10 92 79 00 	sts	0x0079, r1
	}
}
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <matched_State>:
 * Description : if the user choose + from the menu -> turn on the dc motor(door)
 * Argument    : None
 * Returns     : None
 *************************************************/

void matched_State(void) {
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(DC_Motor_clockwise);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	0e 94 49 09 	call	0x1292	; 0x1292 <DcMotor_Rotate>
	timer(15);
    1120:	8f e0       	ldi	r24, 0x0F	; 15
    1122:	0e 94 0e 07 	call	0xe1c	; 0xe1c <timer>
	DcMotor_Rotate(DC_Motor_stop);
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	0e 94 49 09 	call	0x1292	; 0x1292 <DcMotor_Rotate>
	timer(3);
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <timer>
	DcMotor_Rotate(DC_Motor_Anticlockwise);
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	0e 94 49 09 	call	0x1292	; 0x1292 <DcMotor_Rotate>
	timer(15);
    1138:	8f e0       	ldi	r24, 0x0F	; 15
    113a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <timer>
	DcMotor_Rotate(DC_Motor_stop);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0e 94 49 09 	call	0x1292	; 0x1292 <DcMotor_Rotate>
}
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	08 95       	ret

0000114a <wrong_Passwords>:
/***************************************************
 * Description : if the user enter wrong pass for 3 times -> activate alarming system
 * Argument    : None
 * Returns     : None
 ***************************************************/
void wrong_Passwords(void) {
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	2e 97       	sbiw	r28, 0x0e	; 14
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
	/*Turn on the buzzer for 60 seconds */
	Buzzer_on();
    115e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <Buzzer_on>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e6       	ldi	r25, 0x60	; 96
    1166:	aa e6       	ldi	r26, 0x6A	; 106
    1168:	b7 e4       	ldi	r27, 0x47	; 71
    116a:	8b 87       	std	Y+11, r24	; 0x0b
    116c:	9c 87       	std	Y+12, r25	; 0x0c
    116e:	ad 87       	std	Y+13, r26	; 0x0d
    1170:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	6b 85       	ldd	r22, Y+11	; 0x0b
    1174:	7c 85       	ldd	r23, Y+12	; 0x0c
    1176:	8d 85       	ldd	r24, Y+13	; 0x0d
    1178:	9e 85       	ldd	r25, Y+14	; 0x0e
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	4a ef       	ldi	r20, 0xFA	; 250
    1180:	54 e4       	ldi	r21, 0x44	; 68
    1182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	8f 83       	std	Y+7, r24	; 0x07
    118c:	98 87       	std	Y+8, r25	; 0x08
    118e:	a9 87       	std	Y+9, r26	; 0x09
    1190:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1192:	6f 81       	ldd	r22, Y+7	; 0x07
    1194:	78 85       	ldd	r23, Y+8	; 0x08
    1196:	89 85       	ldd	r24, Y+9	; 0x09
    1198:	9a 85       	ldd	r25, Y+10	; 0x0a
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e8       	ldi	r20, 0x80	; 128
    11a0:	5f e3       	ldi	r21, 0x3F	; 63
    11a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a6:	88 23       	and	r24, r24
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <wrong_Passwords+0x6a>
		__ticks = 1;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9e 83       	std	Y+6, r25	; 0x06
    11b0:	8d 83       	std	Y+5, r24	; 0x05
    11b2:	3f c0       	rjmp	.+126    	; 0x1232 <wrong_Passwords+0xe8>
	else if (__tmp > 65535)
    11b4:	6f 81       	ldd	r22, Y+7	; 0x07
    11b6:	78 85       	ldd	r23, Y+8	; 0x08
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	3f ef       	ldi	r19, 0xFF	; 255
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	57 e4       	ldi	r21, 0x47	; 71
    11c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c8:	18 16       	cp	r1, r24
    11ca:	4c f5       	brge	.+82     	; 0x121e <wrong_Passwords+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e2       	ldi	r20, 0x20	; 32
    11da:	51 e4       	ldi	r21, 0x41	; 65
    11dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	9e 83       	std	Y+6, r25	; 0x06
    11f2:	8d 83       	std	Y+5, r24	; 0x05
    11f4:	0f c0       	rjmp	.+30     	; 0x1214 <wrong_Passwords+0xca>
    11f6:	88 ec       	ldi	r24, 0xC8	; 200
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9c 83       	std	Y+4, r25	; 0x04
    11fc:	8b 83       	std	Y+3, r24	; 0x03
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <wrong_Passwords+0xb8>
    1206:	9c 83       	std	Y+4, r25	; 0x04
    1208:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	9e 83       	std	Y+6, r25	; 0x06
    1212:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	69 f7       	brne	.-38     	; 0x11f6 <wrong_Passwords+0xac>
    121c:	14 c0       	rjmp	.+40     	; 0x1246 <wrong_Passwords+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121e:	6f 81       	ldd	r22, Y+7	; 0x07
    1220:	78 85       	ldd	r23, Y+8	; 0x08
    1222:	89 85       	ldd	r24, Y+9	; 0x09
    1224:	9a 85       	ldd	r25, Y+10	; 0x0a
    1226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9e 83       	std	Y+6, r25	; 0x06
    1230:	8d 83       	std	Y+5, r24	; 0x05
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	9a 83       	std	Y+2, r25	; 0x02
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	9a 81       	ldd	r25, Y+2	; 0x02
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <wrong_Passwords+0xf4>
    1242:	9a 83       	std	Y+2, r25	; 0x02
    1244:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(60000);
	//	timer(30);
	//	/*Stop the buzzer and timer  after 60 seconds  */
	//	Timer_deInit(timer1);
	Buzzer_off();
    1246:	0e 94 ed 06 	call	0xdda	; 0xdda <Buzzer_off>
}
    124a:	2e 96       	adiw	r28, 0x0e	; 14
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <DcMotor_Init>:
 * Description : Initialize the direction of Motor
 * Argument    : None
 * Returns     : None
 ***************************************************/

void DcMotor_Init(void){
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID,PIN5_ID,PIN_OUTPUT); /* set PB0 as Output PIN */
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	65 e0       	ldi	r22, 0x05	; 5
    1268:	41 e0       	ldi	r20, 0x01	; 1
    126a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN6_ID,PIN_OUTPUT); /* set PB1 as Output PIN*/
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	66 e0       	ldi	r22, 0x06	; 6
    1272:	41 e0       	ldi	r20, 0x01	; 1
    1274:	0e 94 1a 0a 	call	0x1434	; 0x1434 <GPIO_setupPinDirection>
	//initialize the motor to be stopped
	GPIO_writePin(PORTC_ID,PIN5_ID,LOGIC_LOW);
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	65 e0       	ldi	r22, 0x05	; 5
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN6_ID,LOGIC_LOW);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	66 e0       	ldi	r22, 0x06	; 6
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
}
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <DcMotor_Rotate>:
 * Argument    : Dcmotor state -> stop/clockwise/anti clockwise
 *
 * Returns      : No Return Type
 ***************************************************/
void DcMotor_Rotate(DC_Motor_state state )
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	89 83       	std	Y+1, r24	; 0x01

 if (state==DC_Motor_clockwise)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	59 f4       	brne	.+22     	; 0x12ba <DcMotor_Rotate+0x28>
{
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_FIRST_PIN,LOGIC_HIGH);
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	65 e0       	ldi	r22, 0x05	; 5
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_SECOND_PIN,LOGIC_LOW);
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	66 e0       	ldi	r22, 0x06	; 6
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
    12b8:	18 c0       	rjmp	.+48     	; 0x12ea <DcMotor_Rotate+0x58>
}
else if (state==DC_Motor_Anticlockwise)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	59 f4       	brne	.+22     	; 0x12d6 <DcMotor_Rotate+0x44>
{
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_FIRST_PIN,LOGIC_LOW);
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	65 e0       	ldi	r22, 0x05	; 5
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_SECOND_PIN,LOGIC_HIGH);
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	66 e0       	ldi	r22, 0x06	; 6
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
    12d4:	0a c0       	rjmp	.+20     	; 0x12ea <DcMotor_Rotate+0x58>
}else{
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_FIRST_PIN,LOGIC_LOW);
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	65 e0       	ldi	r22, 0x05	; 5
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT,DC_MOTOR_SECOND_PIN,LOGIC_LOW);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	66 e0       	ldi	r22, 0x06	; 6
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	0e 94 05 0b 	call	0x160a	; 0x160a <GPIO_writePin>
}
}
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <EEPROM_writeByte+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <EEPROM_writeByte+0x8>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1304:	0e 94 a9 10 	call	0x2152	; 0x2152 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1308:	0e 94 01 11 	call	0x2202	; 0x2202 <TWI_getStatus>
    130c:	88 30       	cpi	r24, 0x08	; 8
    130e:	11 f0       	breq	.+4      	; 0x1314 <EEPROM_writeByte+0x22>
        return ERROR;
    1310:	1c 82       	std	Y+4, r1	; 0x04
    1312:	28 c0       	rjmp	.+80     	; 0x1364 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	80 70       	andi	r24, 0x00	; 0
    131a:	97 70       	andi	r25, 0x07	; 7
    131c:	88 0f       	add	r24, r24
    131e:	89 2f       	mov	r24, r25
    1320:	88 1f       	adc	r24, r24
    1322:	99 0b       	sbc	r25, r25
    1324:	91 95       	neg	r25
    1326:	80 6a       	ori	r24, 0xA0	; 160
    1328:	0e 94 c4 10 	call	0x2188	; 0x2188 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    132c:	0e 94 01 11 	call	0x2202	; 0x2202 <TWI_getStatus>
    1330:	88 31       	cpi	r24, 0x18	; 24
    1332:	11 f0       	breq	.+4      	; 0x1338 <EEPROM_writeByte+0x46>
        return ERROR; 
    1334:	1c 82       	std	Y+4, r1	; 0x04
    1336:	16 c0       	rjmp	.+44     	; 0x1364 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	0e 94 c4 10 	call	0x2188	; 0x2188 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    133e:	0e 94 01 11 	call	0x2202	; 0x2202 <TWI_getStatus>
    1342:	88 32       	cpi	r24, 0x28	; 40
    1344:	11 f0       	breq	.+4      	; 0x134a <EEPROM_writeByte+0x58>
        return ERROR;
    1346:	1c 82       	std	Y+4, r1	; 0x04
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	0e 94 c4 10 	call	0x2188	; 0x2188 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1350:	0e 94 01 11 	call	0x2202	; 0x2202 <TWI_getStatus>
    1354:	88 32       	cpi	r24, 0x28	; 40
    1356:	11 f0       	breq	.+4      	; 0x135c <EEPROM_writeByte+0x6a>
        return ERROR;
    1358:	1c 82       	std	Y+4, r1	; 0x04
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    135c:	0e 94 b9 10 	call	0x2172	; 0x2172 <TWI_stop>
	
    return SUCCESS;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	8c 83       	std	Y+4, r24	; 0x04
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <EEPROM_readByte+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <EEPROM_readByte+0x8>
    137c:	0f 92       	push	r0
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	7c 83       	std	Y+4, r23	; 0x04
    1388:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    138a:	0e 94 a9 10 	call	0x2152	; 0x2152 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    138e:	0e 94 01 11 	call	0x2202	; 0x2202 <TWI_getStatus>
    1392:	88 30       	cpi	r24, 0x08	; 8
    1394:	11 f0       	breq	.+4      	; 0x139a <EEPROM_readByte+0x26>
        return ERROR;
    1396:	1d 82       	std	Y+5, r1	; 0x05
    1398:	44 c0       	rjmp	.+136    	; 0x1422 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02
    139e:	80 70       	andi	r24, 0x00	; 0
    13a0:	97 70       	andi	r25, 0x07	; 7
    13a2:	88 0f       	add	r24, r24
    13a4:	89 2f       	mov	r24, r25
    13a6:	88 1f       	adc	r24, r24
    13a8:	99 0b       	sbc	r25, r25
    13aa:	91 95       	neg	r25
    13ac:	80 6a       	ori	r24, 0xA0	; 160
    13ae:	0e 94 c4 10 	call	0x2188	; 0x2188 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13b2:	0e 94 01 11 	call	0x2202	; 0x2202 <TWI_getStatus>
    13b6:	88 31       	cpi	r24, 0x18	; 24
    13b8:	11 f0       	breq	.+4      	; 0x13be <EEPROM_readByte+0x4a>
        return ERROR;
    13ba:	1d 82       	std	Y+5, r1	; 0x05
    13bc:	32 c0       	rjmp	.+100    	; 0x1422 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	0e 94 c4 10 	call	0x2188	; 0x2188 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13c4:	0e 94 01 11 	call	0x2202	; 0x2202 <TWI_getStatus>
    13c8:	88 32       	cpi	r24, 0x28	; 40
    13ca:	11 f0       	breq	.+4      	; 0x13d0 <EEPROM_readByte+0x5c>
        return ERROR;
    13cc:	1d 82       	std	Y+5, r1	; 0x05
    13ce:	29 c0       	rjmp	.+82     	; 0x1422 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    13d0:	0e 94 a9 10 	call	0x2152	; 0x2152 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    13d4:	0e 94 01 11 	call	0x2202	; 0x2202 <TWI_getStatus>
    13d8:	80 31       	cpi	r24, 0x10	; 16
    13da:	11 f0       	breq	.+4      	; 0x13e0 <EEPROM_readByte+0x6c>
        return ERROR;
    13dc:	1d 82       	std	Y+5, r1	; 0x05
    13de:	21 c0       	rjmp	.+66     	; 0x1422 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	80 70       	andi	r24, 0x00	; 0
    13e6:	97 70       	andi	r25, 0x07	; 7
    13e8:	88 0f       	add	r24, r24
    13ea:	89 2f       	mov	r24, r25
    13ec:	88 1f       	adc	r24, r24
    13ee:	99 0b       	sbc	r25, r25
    13f0:	91 95       	neg	r25
    13f2:	81 6a       	ori	r24, 0xA1	; 161
    13f4:	0e 94 c4 10 	call	0x2188	; 0x2188 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    13f8:	0e 94 01 11 	call	0x2202	; 0x2202 <TWI_getStatus>
    13fc:	80 34       	cpi	r24, 0x40	; 64
    13fe:	11 f0       	breq	.+4      	; 0x1404 <EEPROM_readByte+0x90>
        return ERROR;
    1400:	1d 82       	std	Y+5, r1	; 0x05
    1402:	0f c0       	rjmp	.+30     	; 0x1422 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1404:	0e 94 ee 10 	call	0x21dc	; 0x21dc <TWI_readByteWithNACK>
    1408:	eb 81       	ldd	r30, Y+3	; 0x03
    140a:	fc 81       	ldd	r31, Y+4	; 0x04
    140c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    140e:	0e 94 01 11 	call	0x2202	; 0x2202 <TWI_getStatus>
    1412:	88 35       	cpi	r24, 0x58	; 88
    1414:	11 f0       	breq	.+4      	; 0x141a <EEPROM_readByte+0xa6>
        return ERROR;
    1416:	1d 82       	std	Y+5, r1	; 0x05
    1418:	04 c0       	rjmp	.+8      	; 0x1422 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    141a:	0e 94 b9 10 	call	0x2172	; 0x2172 <TWI_stop>

    return SUCCESS;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	8d 83       	std	Y+5, r24	; 0x05
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	00 d0       	rcall	.+0      	; 0x143a <GPIO_setupPinDirection+0x6>
    143a:	00 d0       	rcall	.+0      	; 0x143c <GPIO_setupPinDirection+0x8>
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02
    1446:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	88 30       	cpi	r24, 0x08	; 8
    144c:	08 f0       	brcs	.+2      	; 0x1450 <GPIO_setupPinDirection+0x1c>
    144e:	d5 c0       	rjmp	.+426    	; 0x15fa <GPIO_setupPinDirection+0x1c6>
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	84 30       	cpi	r24, 0x04	; 4
    1454:	08 f0       	brcs	.+2      	; 0x1458 <GPIO_setupPinDirection+0x24>
    1456:	d1 c0       	rjmp	.+418    	; 0x15fa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3d 83       	std	Y+5, r19	; 0x05
    1460:	2c 83       	std	Y+4, r18	; 0x04
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	9d 81       	ldd	r25, Y+5	; 0x05
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	91 05       	cpc	r25, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <GPIO_setupPinDirection+0x3a>
    146c:	43 c0       	rjmp	.+134    	; 0x14f4 <GPIO_setupPinDirection+0xc0>
    146e:	2c 81       	ldd	r18, Y+4	; 0x04
    1470:	3d 81       	ldd	r19, Y+5	; 0x05
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	2c f4       	brge	.+10     	; 0x1482 <GPIO_setupPinDirection+0x4e>
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	71 f0       	breq	.+28     	; 0x149c <GPIO_setupPinDirection+0x68>
    1480:	bc c0       	rjmp	.+376    	; 0x15fa <GPIO_setupPinDirection+0x1c6>
    1482:	2c 81       	ldd	r18, Y+4	; 0x04
    1484:	3d 81       	ldd	r19, Y+5	; 0x05
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	09 f4       	brne	.+2      	; 0x148e <GPIO_setupPinDirection+0x5a>
    148c:	5f c0       	rjmp	.+190    	; 0x154c <GPIO_setupPinDirection+0x118>
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	91 05       	cpc	r25, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <GPIO_setupPinDirection+0x66>
    1498:	85 c0       	rjmp	.+266    	; 0x15a4 <GPIO_setupPinDirection+0x170>
    149a:	af c0       	rjmp	.+350    	; 0x15fa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	a1 f4       	brne	.+40     	; 0x14ca <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14a2:	aa e3       	ldi	r26, 0x3A	; 58
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ea e3       	ldi	r30, 0x3A	; 58
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <GPIO_setupPinDirection+0x8c>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <GPIO_setupPinDirection+0x88>
    14c4:	84 2b       	or	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	98 c0       	rjmp	.+304    	; 0x15fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14ca:	aa e3       	ldi	r26, 0x3A	; 58
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ea e3       	ldi	r30, 0x3A	; 58
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <GPIO_setupPinDirection+0xb4>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <GPIO_setupPinDirection+0xb0>
    14ec:	80 95       	com	r24
    14ee:	84 23       	and	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	83 c0       	rjmp	.+262    	; 0x15fa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	a1 f4       	brne	.+40     	; 0x1522 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    14fa:	a7 e3       	ldi	r26, 0x37	; 55
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e7 e3       	ldi	r30, 0x37	; 55
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <GPIO_setupPinDirection+0xe4>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <GPIO_setupPinDirection+0xe0>
    151c:	84 2b       	or	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	6c c0       	rjmp	.+216    	; 0x15fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1522:	a7 e3       	ldi	r26, 0x37	; 55
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e7 e3       	ldi	r30, 0x37	; 55
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	02 2e       	mov	r0, r18
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <GPIO_setupPinDirection+0x10c>
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <GPIO_setupPinDirection+0x108>
    1544:	80 95       	com	r24
    1546:	84 23       	and	r24, r20
    1548:	8c 93       	st	X, r24
    154a:	57 c0       	rjmp	.+174    	; 0x15fa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	a1 f4       	brne	.+40     	; 0x157a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1552:	a4 e3       	ldi	r26, 0x34	; 52
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e4 e3       	ldi	r30, 0x34	; 52
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <GPIO_setupPinDirection+0x13c>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <GPIO_setupPinDirection+0x138>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	40 c0       	rjmp	.+128    	; 0x15fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    157a:	a4 e3       	ldi	r26, 0x34	; 52
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e4 e3       	ldi	r30, 0x34	; 52
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <GPIO_setupPinDirection+0x164>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <GPIO_setupPinDirection+0x160>
    159c:	80 95       	com	r24
    159e:	84 23       	and	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	2b c0       	rjmp	.+86     	; 0x15fa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	a1 f4       	brne	.+40     	; 0x15d2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15aa:	a1 e3       	ldi	r26, 0x31	; 49
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e1 e3       	ldi	r30, 0x31	; 49
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <GPIO_setupPinDirection+0x194>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <GPIO_setupPinDirection+0x190>
    15cc:	84 2b       	or	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15d2:	a1 e3       	ldi	r26, 0x31	; 49
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e1 e3       	ldi	r30, 0x31	; 49
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <GPIO_setupPinDirection+0x1bc>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <GPIO_setupPinDirection+0x1b8>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <GPIO_writePin+0x6>
    1610:	00 d0       	rcall	.+0      	; 0x1612 <GPIO_writePin+0x8>
    1612:	0f 92       	push	r0
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	6a 83       	std	Y+2, r22	; 0x02
    161c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	88 30       	cpi	r24, 0x08	; 8
    1622:	08 f0       	brcs	.+2      	; 0x1626 <GPIO_writePin+0x1c>
    1624:	d5 c0       	rjmp	.+426    	; 0x17d0 <GPIO_writePin+0x1c6>
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	84 30       	cpi	r24, 0x04	; 4
    162a:	08 f0       	brcs	.+2      	; 0x162e <GPIO_writePin+0x24>
    162c:	d1 c0       	rjmp	.+418    	; 0x17d0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	3d 83       	std	Y+5, r19	; 0x05
    1636:	2c 83       	std	Y+4, r18	; 0x04
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
    163a:	9d 81       	ldd	r25, Y+5	; 0x05
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	91 05       	cpc	r25, r1
    1640:	09 f4       	brne	.+2      	; 0x1644 <GPIO_writePin+0x3a>
    1642:	43 c0       	rjmp	.+134    	; 0x16ca <GPIO_writePin+0xc0>
    1644:	2c 81       	ldd	r18, Y+4	; 0x04
    1646:	3d 81       	ldd	r19, Y+5	; 0x05
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	2c f4       	brge	.+10     	; 0x1658 <GPIO_writePin+0x4e>
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	9d 81       	ldd	r25, Y+5	; 0x05
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	71 f0       	breq	.+28     	; 0x1672 <GPIO_writePin+0x68>
    1656:	bc c0       	rjmp	.+376    	; 0x17d0 <GPIO_writePin+0x1c6>
    1658:	2c 81       	ldd	r18, Y+4	; 0x04
    165a:	3d 81       	ldd	r19, Y+5	; 0x05
    165c:	22 30       	cpi	r18, 0x02	; 2
    165e:	31 05       	cpc	r19, r1
    1660:	09 f4       	brne	.+2      	; 0x1664 <GPIO_writePin+0x5a>
    1662:	5f c0       	rjmp	.+190    	; 0x1722 <GPIO_writePin+0x118>
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	9d 81       	ldd	r25, Y+5	; 0x05
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	91 05       	cpc	r25, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <GPIO_writePin+0x66>
    166e:	85 c0       	rjmp	.+266    	; 0x177a <GPIO_writePin+0x170>
    1670:	af c0       	rjmp	.+350    	; 0x17d0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	a1 f4       	brne	.+40     	; 0x16a0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1678:	ab e3       	ldi	r26, 0x3B	; 59
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	eb e3       	ldi	r30, 0x3B	; 59
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <GPIO_writePin+0x8c>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <GPIO_writePin+0x88>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	98 c0       	rjmp	.+304    	; 0x17d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16a0:	ab e3       	ldi	r26, 0x3B	; 59
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	eb e3       	ldi	r30, 0x3B	; 59
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <GPIO_writePin+0xb4>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <GPIO_writePin+0xb0>
    16c2:	80 95       	com	r24
    16c4:	84 23       	and	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	83 c0       	rjmp	.+262    	; 0x17d0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	a1 f4       	brne	.+40     	; 0x16f8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16d0:	a8 e3       	ldi	r26, 0x38	; 56
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e8 e3       	ldi	r30, 0x38	; 56
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <GPIO_writePin+0xe4>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <GPIO_writePin+0xe0>
    16f2:	84 2b       	or	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	6c c0       	rjmp	.+216    	; 0x17d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    16f8:	a8 e3       	ldi	r26, 0x38	; 56
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e8 e3       	ldi	r30, 0x38	; 56
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <GPIO_writePin+0x10c>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <GPIO_writePin+0x108>
    171a:	80 95       	com	r24
    171c:	84 23       	and	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	57 c0       	rjmp	.+174    	; 0x17d0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	a1 f4       	brne	.+40     	; 0x1750 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1728:	a5 e3       	ldi	r26, 0x35	; 53
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e5 e3       	ldi	r30, 0x35	; 53
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	48 2f       	mov	r20, r24
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 2e       	mov	r0, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <GPIO_writePin+0x13c>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	0a 94       	dec	r0
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <GPIO_writePin+0x138>
    174a:	84 2b       	or	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	40 c0       	rjmp	.+128    	; 0x17d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1750:	a5 e3       	ldi	r26, 0x35	; 53
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e5 e3       	ldi	r30, 0x35	; 53
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <GPIO_writePin+0x164>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <GPIO_writePin+0x160>
    1772:	80 95       	com	r24
    1774:	84 23       	and	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	2b c0       	rjmp	.+86     	; 0x17d0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	a1 f4       	brne	.+40     	; 0x17a8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1780:	a2 e3       	ldi	r26, 0x32	; 50
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e2 e3       	ldi	r30, 0x32	; 50
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <GPIO_writePin+0x194>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <GPIO_writePin+0x190>
    17a2:	84 2b       	or	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	14 c0       	rjmp	.+40     	; 0x17d0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17a8:	a2 e3       	ldi	r26, 0x32	; 50
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e2 e3       	ldi	r30, 0x32	; 50
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <GPIO_writePin+0x1bc>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <GPIO_writePin+0x1b8>
    17ca:	80 95       	com	r24
    17cc:	84 23       	and	r24, r20
    17ce:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <GPIO_readPin+0x6>
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <GPIO_readPin+0x8>
    17e8:	0f 92       	push	r0
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	8a 83       	std	Y+2, r24	; 0x02
    17f0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    17f2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	88 30       	cpi	r24, 0x08	; 8
    17f8:	08 f0       	brcs	.+2      	; 0x17fc <GPIO_readPin+0x1c>
    17fa:	84 c0       	rjmp	.+264    	; 0x1904 <GPIO_readPin+0x124>
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	84 30       	cpi	r24, 0x04	; 4
    1800:	08 f0       	brcs	.+2      	; 0x1804 <GPIO_readPin+0x24>
    1802:	80 c0       	rjmp	.+256    	; 0x1904 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3d 83       	std	Y+5, r19	; 0x05
    180c:	2c 83       	std	Y+4, r18	; 0x04
    180e:	4c 81       	ldd	r20, Y+4	; 0x04
    1810:	5d 81       	ldd	r21, Y+5	; 0x05
    1812:	41 30       	cpi	r20, 0x01	; 1
    1814:	51 05       	cpc	r21, r1
    1816:	79 f1       	breq	.+94     	; 0x1876 <GPIO_readPin+0x96>
    1818:	8c 81       	ldd	r24, Y+4	; 0x04
    181a:	9d 81       	ldd	r25, Y+5	; 0x05
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	91 05       	cpc	r25, r1
    1820:	34 f4       	brge	.+12     	; 0x182e <GPIO_readPin+0x4e>
    1822:	2c 81       	ldd	r18, Y+4	; 0x04
    1824:	3d 81       	ldd	r19, Y+5	; 0x05
    1826:	21 15       	cp	r18, r1
    1828:	31 05       	cpc	r19, r1
    182a:	69 f0       	breq	.+26     	; 0x1846 <GPIO_readPin+0x66>
    182c:	6b c0       	rjmp	.+214    	; 0x1904 <GPIO_readPin+0x124>
    182e:	4c 81       	ldd	r20, Y+4	; 0x04
    1830:	5d 81       	ldd	r21, Y+5	; 0x05
    1832:	42 30       	cpi	r20, 0x02	; 2
    1834:	51 05       	cpc	r21, r1
    1836:	b9 f1       	breq	.+110    	; 0x18a6 <GPIO_readPin+0xc6>
    1838:	8c 81       	ldd	r24, Y+4	; 0x04
    183a:	9d 81       	ldd	r25, Y+5	; 0x05
    183c:	83 30       	cpi	r24, 0x03	; 3
    183e:	91 05       	cpc	r25, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <GPIO_readPin+0x64>
    1842:	49 c0       	rjmp	.+146    	; 0x18d6 <GPIO_readPin+0xf6>
    1844:	5f c0       	rjmp	.+190    	; 0x1904 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1846:	e9 e3       	ldi	r30, 0x39	; 57
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a9 01       	movw	r20, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <GPIO_readPin+0x7e>
    185a:	55 95       	asr	r21
    185c:	47 95       	ror	r20
    185e:	8a 95       	dec	r24
    1860:	e2 f7       	brpl	.-8      	; 0x185a <GPIO_readPin+0x7a>
    1862:	ca 01       	movw	r24, r20
    1864:	81 70       	andi	r24, 0x01	; 1
    1866:	90 70       	andi	r25, 0x00	; 0
    1868:	88 23       	and	r24, r24
    186a:	19 f0       	breq	.+6      	; 0x1872 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	89 83       	std	Y+1, r24	; 0x01
    1870:	49 c0       	rjmp	.+146    	; 0x1904 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1872:	19 82       	std	Y+1, r1	; 0x01
    1874:	47 c0       	rjmp	.+142    	; 0x1904 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1876:	e6 e3       	ldi	r30, 0x36	; 54
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a9 01       	movw	r20, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <GPIO_readPin+0xae>
    188a:	55 95       	asr	r21
    188c:	47 95       	ror	r20
    188e:	8a 95       	dec	r24
    1890:	e2 f7       	brpl	.-8      	; 0x188a <GPIO_readPin+0xaa>
    1892:	ca 01       	movw	r24, r20
    1894:	81 70       	andi	r24, 0x01	; 1
    1896:	90 70       	andi	r25, 0x00	; 0
    1898:	88 23       	and	r24, r24
    189a:	19 f0       	breq	.+6      	; 0x18a2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	31 c0       	rjmp	.+98     	; 0x1904 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18a2:	19 82       	std	Y+1, r1	; 0x01
    18a4:	2f c0       	rjmp	.+94     	; 0x1904 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18a6:	e3 e3       	ldi	r30, 0x33	; 51
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	a9 01       	movw	r20, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <GPIO_readPin+0xde>
    18ba:	55 95       	asr	r21
    18bc:	47 95       	ror	r20
    18be:	8a 95       	dec	r24
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <GPIO_readPin+0xda>
    18c2:	ca 01       	movw	r24, r20
    18c4:	81 70       	andi	r24, 0x01	; 1
    18c6:	90 70       	andi	r25, 0x00	; 0
    18c8:	88 23       	and	r24, r24
    18ca:	19 f0       	breq	.+6      	; 0x18d2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	19 c0       	rjmp	.+50     	; 0x1904 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18d2:	19 82       	std	Y+1, r1	; 0x01
    18d4:	17 c0       	rjmp	.+46     	; 0x1904 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18d6:	e0 e3       	ldi	r30, 0x30	; 48
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a9 01       	movw	r20, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <GPIO_readPin+0x10e>
    18ea:	55 95       	asr	r21
    18ec:	47 95       	ror	r20
    18ee:	8a 95       	dec	r24
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <GPIO_readPin+0x10a>
    18f2:	ca 01       	movw	r24, r20
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	90 70       	andi	r25, 0x00	; 0
    18f8:	88 23       	and	r24, r24
    18fa:	19 f0       	breq	.+6      	; 0x1902 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1902:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1904:	89 81       	ldd	r24, Y+1	; 0x01
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <GPIO_setupPortDirection+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <GPIO_setupPortDirection+0x8>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	90 f5       	brcc	.+100    	; 0x1990 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	3c 83       	std	Y+4, r19	; 0x04
    1934:	2b 83       	std	Y+3, r18	; 0x03
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	91 05       	cpc	r25, r1
    193e:	d1 f0       	breq	.+52     	; 0x1974 <GPIO_setupPortDirection+0x5e>
    1940:	2b 81       	ldd	r18, Y+3	; 0x03
    1942:	3c 81       	ldd	r19, Y+4	; 0x04
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	2c f4       	brge	.+10     	; 0x1954 <GPIO_setupPortDirection+0x3e>
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	61 f0       	breq	.+24     	; 0x196a <GPIO_setupPortDirection+0x54>
    1952:	1e c0       	rjmp	.+60     	; 0x1990 <GPIO_setupPortDirection+0x7a>
    1954:	2b 81       	ldd	r18, Y+3	; 0x03
    1956:	3c 81       	ldd	r19, Y+4	; 0x04
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	31 05       	cpc	r19, r1
    195c:	81 f0       	breq	.+32     	; 0x197e <GPIO_setupPortDirection+0x68>
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	83 30       	cpi	r24, 0x03	; 3
    1964:	91 05       	cpc	r25, r1
    1966:	81 f0       	breq	.+32     	; 0x1988 <GPIO_setupPortDirection+0x72>
    1968:	13 c0       	rjmp	.+38     	; 0x1990 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    196a:	ea e3       	ldi	r30, 0x3A	; 58
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	80 83       	st	Z, r24
    1972:	0e c0       	rjmp	.+28     	; 0x1990 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1974:	e7 e3       	ldi	r30, 0x37	; 55
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	80 83       	st	Z, r24
    197c:	09 c0       	rjmp	.+18     	; 0x1990 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    197e:	e4 e3       	ldi	r30, 0x34	; 52
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	80 83       	st	Z, r24
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1988:	e1 e3       	ldi	r30, 0x31	; 49
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <GPIO_writePort+0x6>
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <GPIO_writePort+0x8>
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	84 30       	cpi	r24, 0x04	; 4
    19b2:	90 f5       	brcc	.+100    	; 0x1a18 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	3c 83       	std	Y+4, r19	; 0x04
    19bc:	2b 83       	std	Y+3, r18	; 0x03
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	91 05       	cpc	r25, r1
    19c6:	d1 f0       	breq	.+52     	; 0x19fc <GPIO_writePort+0x5e>
    19c8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ca:	3c 81       	ldd	r19, Y+4	; 0x04
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	31 05       	cpc	r19, r1
    19d0:	2c f4       	brge	.+10     	; 0x19dc <GPIO_writePort+0x3e>
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	9c 81       	ldd	r25, Y+4	; 0x04
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	61 f0       	breq	.+24     	; 0x19f2 <GPIO_writePort+0x54>
    19da:	1e c0       	rjmp	.+60     	; 0x1a18 <GPIO_writePort+0x7a>
    19dc:	2b 81       	ldd	r18, Y+3	; 0x03
    19de:	3c 81       	ldd	r19, Y+4	; 0x04
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	81 f0       	breq	.+32     	; 0x1a06 <GPIO_writePort+0x68>
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	83 30       	cpi	r24, 0x03	; 3
    19ec:	91 05       	cpc	r25, r1
    19ee:	81 f0       	breq	.+32     	; 0x1a10 <GPIO_writePort+0x72>
    19f0:	13 c0       	rjmp	.+38     	; 0x1a18 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    19f2:	eb e3       	ldi	r30, 0x3B	; 59
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	80 83       	st	Z, r24
    19fa:	0e c0       	rjmp	.+28     	; 0x1a18 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    19fc:	e8 e3       	ldi	r30, 0x38	; 56
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	80 83       	st	Z, r24
    1a04:	09 c0       	rjmp	.+18     	; 0x1a18 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a06:	e5 e3       	ldi	r30, 0x35	; 53
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	80 83       	st	Z, r24
    1a0e:	04 c0       	rjmp	.+8      	; 0x1a18 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a10:	e2 e3       	ldi	r30, 0x32	; 50
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <GPIO_readPort+0x6>
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <GPIO_readPort+0x8>
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a34:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	84 30       	cpi	r24, 0x04	; 4
    1a3a:	90 f5       	brcc	.+100    	; 0x1aa0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	3c 83       	std	Y+4, r19	; 0x04
    1a44:	2b 83       	std	Y+3, r18	; 0x03
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	d1 f0       	breq	.+52     	; 0x1a84 <GPIO_readPort+0x5e>
    1a50:	2b 81       	ldd	r18, Y+3	; 0x03
    1a52:	3c 81       	ldd	r19, Y+4	; 0x04
    1a54:	22 30       	cpi	r18, 0x02	; 2
    1a56:	31 05       	cpc	r19, r1
    1a58:	2c f4       	brge	.+10     	; 0x1a64 <GPIO_readPort+0x3e>
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	61 f0       	breq	.+24     	; 0x1a7a <GPIO_readPort+0x54>
    1a62:	1e c0       	rjmp	.+60     	; 0x1aa0 <GPIO_readPort+0x7a>
    1a64:	2b 81       	ldd	r18, Y+3	; 0x03
    1a66:	3c 81       	ldd	r19, Y+4	; 0x04
    1a68:	22 30       	cpi	r18, 0x02	; 2
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	81 f0       	breq	.+32     	; 0x1a8e <GPIO_readPort+0x68>
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	83 30       	cpi	r24, 0x03	; 3
    1a74:	91 05       	cpc	r25, r1
    1a76:	81 f0       	breq	.+32     	; 0x1a98 <GPIO_readPort+0x72>
    1a78:	13 c0       	rjmp	.+38     	; 0x1aa0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a7a:	e9 e3       	ldi	r30, 0x39	; 57
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	0e c0       	rjmp	.+28     	; 0x1aa0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a84:	e6 e3       	ldi	r30, 0x36	; 54
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	09 c0       	rjmp	.+18     	; 0x1aa0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a8e:	e3 e3       	ldi	r30, 0x33	; 51
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a98:	e0 e3       	ldi	r30, 0x30	; 48
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <PWM_Timer0_Start>:
 *                4- Setup the direction for OC0 as output pin through the GPIO driver.
 *                5- The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 * Arguments     : duty cycle passed by DCMotor Driver
 * Returns       : No Return Type
 ****************************************************/
void PWM_Timer0_Start(uint8 duty_cycle){
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	0f 92       	push	r0
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Initialize timer with 0 //
    1abc:	e2 e5       	ldi	r30, 0x52	; 82
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	10 82       	st	Z, r1

	OCR0 = (duty_cycle * 255) / 100; // set Compare value
    1ac2:	ec e5       	ldi	r30, 0x5C	; 92
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	48 2f       	mov	r20, r24
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	ca 01       	movw	r24, r20
    1ace:	9c 01       	movw	r18, r24
    1ad0:	22 0f       	add	r18, r18
    1ad2:	33 1f       	adc	r19, r19
    1ad4:	c9 01       	movw	r24, r18
    1ad6:	96 95       	lsr	r25
    1ad8:	98 2f       	mov	r25, r24
    1ada:	88 27       	eor	r24, r24
    1adc:	97 95       	ror	r25
    1ade:	87 95       	ror	r24
    1ae0:	82 1b       	sub	r24, r18
    1ae2:	93 0b       	sbc	r25, r19
    1ae4:	84 0f       	add	r24, r20
    1ae6:	95 1f       	adc	r25, r21
    1ae8:	24 e6       	ldi	r18, 0x64	; 100
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	b9 01       	movw	r22, r18
    1aee:	0e 94 01 12 	call	0x2402	; 0x2402 <__divmodhi4>
    1af2:	cb 01       	movw	r24, r22
    1af4:	80 83       	st	Z, r24

	SET_BIT(DDRC,PC5); // PC5 as output PIN (A)//
    1af6:	a4 e3       	ldi	r26, 0x34	; 52
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e4 e3       	ldi	r30, 0x34	; 52
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	80 62       	ori	r24, 0x20	; 32
    1b02:	8c 93       	st	X, r24
	SET_BIT(DDRC,PC6); // PC5 as output PIN (B)//
    1b04:	a4 e3       	ldi	r26, 0x34	; 52
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e4 e3       	ldi	r30, 0x34	; 52
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 64       	ori	r24, 0x40	; 64
    1b10:	8c 93       	st	X, r24
	/*
	 *1- WGM01/WGM00 -> For Fast PWM Mode of Timer0
	 *2- COM01 -> For non-inverted Mode
	 *3- CS01 -> For clock selector (FCPU / 8)
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
    1b12:	e3 e5       	ldi	r30, 0x53	; 83
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	8a e6       	ldi	r24, 0x6A	; 106
    1b18:	80 83       	st	Z, r24
}
    1b1a:	0f 90       	pop	r0
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <__vector_9>:
volatile uint32 SECONDS_T1_MC2=0;
/*******************************************************************
 *                                  ISR                            *
 *******************************************************************/
//For timer 0 -> overflow (normal) mode
ISR(TIMER0_OVF_vect){
    1b22:	1f 92       	push	r1
    1b24:	0f 92       	push	r0
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	0f 92       	push	r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	2f 93       	push	r18
    1b2e:	3f 93       	push	r19
    1b30:	4f 93       	push	r20
    1b32:	5f 93       	push	r21
    1b34:	6f 93       	push	r22
    1b36:	7f 93       	push	r23
    1b38:	8f 93       	push	r24
    1b3a:	9f 93       	push	r25
    1b3c:	af 93       	push	r26
    1b3e:	bf 93       	push	r27
    1b40:	ef 93       	push	r30
    1b42:	ff 93       	push	r31
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1b4c:	80 91 7c 00 	lds	r24, 0x007C
    1b50:	90 91 7d 00 	lds	r25, 0x007D
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	29 f0       	breq	.+10     	; 0x1b62 <__vector_9+0x40>
	{
		(*g_callBackPtr0)();  /* Call call back function */
    1b58:	e0 91 7c 00 	lds	r30, 0x007C
    1b5c:	f0 91 7d 00 	lds	r31, 0x007D
    1b60:	09 95       	icall
	}
}
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	ff 91       	pop	r31
    1b68:	ef 91       	pop	r30
    1b6a:	bf 91       	pop	r27
    1b6c:	af 91       	pop	r26
    1b6e:	9f 91       	pop	r25
    1b70:	8f 91       	pop	r24
    1b72:	7f 91       	pop	r23
    1b74:	6f 91       	pop	r22
    1b76:	5f 91       	pop	r21
    1b78:	4f 91       	pop	r20
    1b7a:	3f 91       	pop	r19
    1b7c:	2f 91       	pop	r18
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	0f 90       	pop	r0
    1b84:	1f 90       	pop	r1
    1b86:	18 95       	reti

00001b88 <__vector_19>:

ISR(TIMER0_COMP_vect){
    1b88:	1f 92       	push	r1
    1b8a:	0f 92       	push	r0
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	0f 92       	push	r0
    1b90:	11 24       	eor	r1, r1
    1b92:	2f 93       	push	r18
    1b94:	3f 93       	push	r19
    1b96:	4f 93       	push	r20
    1b98:	5f 93       	push	r21
    1b9a:	6f 93       	push	r22
    1b9c:	7f 93       	push	r23
    1b9e:	8f 93       	push	r24
    1ba0:	9f 93       	push	r25
    1ba2:	af 93       	push	r26
    1ba4:	bf 93       	push	r27
    1ba6:	ef 93       	push	r30
    1ba8:	ff 93       	push	r31
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1bb2:	80 91 7c 00 	lds	r24, 0x007C
    1bb6:	90 91 7d 00 	lds	r25, 0x007D
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	29 f0       	breq	.+10     	; 0x1bc8 <__vector_19+0x40>
	{
		(*g_callBackPtr0)();  /* Call call back function */
    1bbe:	e0 91 7c 00 	lds	r30, 0x007C
    1bc2:	f0 91 7d 00 	lds	r31, 0x007D
    1bc6:	09 95       	icall
	}
}
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	ff 91       	pop	r31
    1bce:	ef 91       	pop	r30
    1bd0:	bf 91       	pop	r27
    1bd2:	af 91       	pop	r26
    1bd4:	9f 91       	pop	r25
    1bd6:	8f 91       	pop	r24
    1bd8:	7f 91       	pop	r23
    1bda:	6f 91       	pop	r22
    1bdc:	5f 91       	pop	r21
    1bde:	4f 91       	pop	r20
    1be0:	3f 91       	pop	r19
    1be2:	2f 91       	pop	r18
    1be4:	0f 90       	pop	r0
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	0f 90       	pop	r0
    1bea:	1f 90       	pop	r1
    1bec:	18 95       	reti

00001bee <__vector_8>:

//For timer 1 -> overflow (normal) mode
ISR(TIMER1_OVF_vect){
    1bee:	1f 92       	push	r1
    1bf0:	0f 92       	push	r0
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	0f 92       	push	r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	2f 93       	push	r18
    1bfa:	3f 93       	push	r19
    1bfc:	4f 93       	push	r20
    1bfe:	5f 93       	push	r21
    1c00:	6f 93       	push	r22
    1c02:	7f 93       	push	r23
    1c04:	8f 93       	push	r24
    1c06:	9f 93       	push	r25
    1c08:	af 93       	push	r26
    1c0a:	bf 93       	push	r27
    1c0c:	ef 93       	push	r30
    1c0e:	ff 93       	push	r31
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    1c18:	80 91 7e 00 	lds	r24, 0x007E
    1c1c:	90 91 7f 00 	lds	r25, 0x007F
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	29 f0       	breq	.+10     	; 0x1c2e <__vector_8+0x40>
	{
		(*g_callBackPtr1)();  /* Call call back function */
    1c24:	e0 91 7e 00 	lds	r30, 0x007E
    1c28:	f0 91 7f 00 	lds	r31, 0x007F
    1c2c:	09 95       	icall
	}
}
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	ff 91       	pop	r31
    1c34:	ef 91       	pop	r30
    1c36:	bf 91       	pop	r27
    1c38:	af 91       	pop	r26
    1c3a:	9f 91       	pop	r25
    1c3c:	8f 91       	pop	r24
    1c3e:	7f 91       	pop	r23
    1c40:	6f 91       	pop	r22
    1c42:	5f 91       	pop	r21
    1c44:	4f 91       	pop	r20
    1c46:	3f 91       	pop	r19
    1c48:	2f 91       	pop	r18
    1c4a:	0f 90       	pop	r0
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	0f 90       	pop	r0
    1c50:	1f 90       	pop	r1
    1c52:	18 95       	reti

00001c54 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    1c54:	1f 92       	push	r1
    1c56:	0f 92       	push	r0
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	0f 92       	push	r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	2f 93       	push	r18
    1c60:	3f 93       	push	r19
    1c62:	4f 93       	push	r20
    1c64:	5f 93       	push	r21
    1c66:	6f 93       	push	r22
    1c68:	7f 93       	push	r23
    1c6a:	8f 93       	push	r24
    1c6c:	9f 93       	push	r25
    1c6e:	af 93       	push	r26
    1c70:	bf 93       	push	r27
    1c72:	ef 93       	push	r30
    1c74:	ff 93       	push	r31
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    1c7e:	80 91 7e 00 	lds	r24, 0x007E
    1c82:	90 91 7f 00 	lds	r25, 0x007F
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	29 f0       	breq	.+10     	; 0x1c94 <__vector_6+0x40>
	{
		(*g_callBackPtr1)();  /* Call call back function */
    1c8a:	e0 91 7e 00 	lds	r30, 0x007E
    1c8e:	f0 91 7f 00 	lds	r31, 0x007F
    1c92:	09 95       	icall
	}
}
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	ff 91       	pop	r31
    1c9a:	ef 91       	pop	r30
    1c9c:	bf 91       	pop	r27
    1c9e:	af 91       	pop	r26
    1ca0:	9f 91       	pop	r25
    1ca2:	8f 91       	pop	r24
    1ca4:	7f 91       	pop	r23
    1ca6:	6f 91       	pop	r22
    1ca8:	5f 91       	pop	r21
    1caa:	4f 91       	pop	r20
    1cac:	3f 91       	pop	r19
    1cae:	2f 91       	pop	r18
    1cb0:	0f 90       	pop	r0
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	0f 90       	pop	r0
    1cb6:	1f 90       	pop	r1
    1cb8:	18 95       	reti

00001cba <__vector_4>:

//For timer 2 -> overflow (normal) mode
ISR(TIMER2_OVF_vect){
    1cba:	1f 92       	push	r1
    1cbc:	0f 92       	push	r0
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	0f 92       	push	r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	2f 93       	push	r18
    1cc6:	3f 93       	push	r19
    1cc8:	4f 93       	push	r20
    1cca:	5f 93       	push	r21
    1ccc:	6f 93       	push	r22
    1cce:	7f 93       	push	r23
    1cd0:	8f 93       	push	r24
    1cd2:	9f 93       	push	r25
    1cd4:	af 93       	push	r26
    1cd6:	bf 93       	push	r27
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1ce4:	80 91 80 00 	lds	r24, 0x0080
    1ce8:	90 91 81 00 	lds	r25, 0x0081
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	29 f0       	breq	.+10     	; 0x1cfa <__vector_4+0x40>
	{
		(*g_callBackPtr2)();  /* Call call back function */
    1cf0:	e0 91 80 00 	lds	r30, 0x0080
    1cf4:	f0 91 81 00 	lds	r31, 0x0081
    1cf8:	09 95       	icall
	}
}
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	ff 91       	pop	r31
    1d00:	ef 91       	pop	r30
    1d02:	bf 91       	pop	r27
    1d04:	af 91       	pop	r26
    1d06:	9f 91       	pop	r25
    1d08:	8f 91       	pop	r24
    1d0a:	7f 91       	pop	r23
    1d0c:	6f 91       	pop	r22
    1d0e:	5f 91       	pop	r21
    1d10:	4f 91       	pop	r20
    1d12:	3f 91       	pop	r19
    1d14:	2f 91       	pop	r18
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	0f 90       	pop	r0
    1d1c:	1f 90       	pop	r1
    1d1e:	18 95       	reti

00001d20 <__vector_3>:

ISR(TIMER2_COMP_vect){
    1d20:	1f 92       	push	r1
    1d22:	0f 92       	push	r0
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	0f 92       	push	r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	2f 93       	push	r18
    1d2c:	3f 93       	push	r19
    1d2e:	4f 93       	push	r20
    1d30:	5f 93       	push	r21
    1d32:	6f 93       	push	r22
    1d34:	7f 93       	push	r23
    1d36:	8f 93       	push	r24
    1d38:	9f 93       	push	r25
    1d3a:	af 93       	push	r26
    1d3c:	bf 93       	push	r27
    1d3e:	ef 93       	push	r30
    1d40:	ff 93       	push	r31
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1d4a:	80 91 80 00 	lds	r24, 0x0080
    1d4e:	90 91 81 00 	lds	r25, 0x0081
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	29 f0       	breq	.+10     	; 0x1d60 <__vector_3+0x40>
	{
		(*g_callBackPtr2)();  /* Call call back function */
    1d56:	e0 91 80 00 	lds	r30, 0x0080
    1d5a:	f0 91 81 00 	lds	r31, 0x0081
    1d5e:	09 95       	icall
	}
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	ff 91       	pop	r31
    1d66:	ef 91       	pop	r30
    1d68:	bf 91       	pop	r27
    1d6a:	af 91       	pop	r26
    1d6c:	9f 91       	pop	r25
    1d6e:	8f 91       	pop	r24
    1d70:	7f 91       	pop	r23
    1d72:	6f 91       	pop	r22
    1d74:	5f 91       	pop	r21
    1d76:	4f 91       	pop	r20
    1d78:	3f 91       	pop	r19
    1d7a:	2f 91       	pop	r18
    1d7c:	0f 90       	pop	r0
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	0f 90       	pop	r0
    1d82:	1f 90       	pop	r1
    1d84:	18 95       	reti

00001d86 <Timer_init>:
/***************************************************
 * Description : Initialize the Timer
 * Argument    : pointer to struct (TIMER_congif)
 * Returns     : None
 ***************************************************/
void Timer_init(const TIMER_config * Config_Ptr){
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <Timer_init+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <Timer_init+0x8>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->channel){
    1d96:	e9 81       	ldd	r30, Y+1	; 0x01
    1d98:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9a:	80 81       	ld	r24, Z
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	3c 83       	std	Y+4, r19	; 0x04
    1da2:	2b 83       	std	Y+3, r18	; 0x03
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	91 05       	cpc	r25, r1
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <Timer_init+0x2a>
    1dae:	6d c0       	rjmp	.+218    	; 0x1e8a <Timer_init+0x104>
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	3c 81       	ldd	r19, Y+4	; 0x04
    1db4:	22 30       	cpi	r18, 0x02	; 2
    1db6:	31 05       	cpc	r19, r1
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <Timer_init+0x36>
    1dba:	c1 c0       	rjmp	.+386    	; 0x1f3e <Timer_init+0x1b8>
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <Timer_init+0x40>
    1dc4:	01 c1       	rjmp	.+514    	; 0x1fc8 <Timer_init+0x242>

	case timer0:
		SET_BIT(TCCR0,FOC0);//for non PWM mode
    1dc6:	a3 e5       	ldi	r26, 0x53	; 83
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e3 e5       	ldi	r30, 0x53	; 83
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	80 68       	ori	r24, 0x80	; 128
    1dd2:	8c 93       	st	X, r24
		if(Config_Ptr->mode==normal){
    1dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	88 23       	and	r24, r24
    1ddc:	21 f5       	brne	.+72     	; 0x1e26 <Timer_init+0xa0>
			//enable interrupt for normal mode -> timer 0
			SET_BIT(TIMSK,TOIE0);
    1dde:	a9 e5       	ldi	r26, 0x59	; 89
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 e5       	ldi	r30, 0x59	; 89
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	81 60       	ori	r24, 0x01	; 1
    1dea:	8c 93       	st	X, r24
			//Activate normal (overflow) mode
			CLEAR_BIT(TCCR0,WGM00);
    1dec:	a3 e5       	ldi	r26, 0x53	; 83
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e3 e5       	ldi	r30, 0x53	; 83
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8f 7b       	andi	r24, 0xBF	; 191
    1df8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
    1dfa:	a3 e5       	ldi	r26, 0x53	; 83
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e3 e5       	ldi	r30, 0x53	; 83
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	87 7f       	andi	r24, 0xF7	; 247
    1e06:	8c 93       	st	X, r24
			//disconnect OC0
			CLEAR_BIT(TCCR0,COM00);
    1e08:	a3 e5       	ldi	r26, 0x53	; 83
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e3 e5       	ldi	r30, 0x53	; 83
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	8f 7e       	andi	r24, 0xEF	; 239
    1e14:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
    1e16:	a3 e5       	ldi	r26, 0x53	; 83
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e3 e5       	ldi	r30, 0x53	; 83
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	8f 7d       	andi	r24, 0xDF	; 223
    1e22:	8c 93       	st	X, r24
    1e24:	21 c0       	rjmp	.+66     	; 0x1e68 <Timer_init+0xe2>
		}
		else if(Config_Ptr->mode==ctc){
    1e26:	e9 81       	ldd	r30, Y+1	; 0x01
    1e28:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	82 30       	cpi	r24, 0x02	; 2
    1e2e:	e1 f4       	brne	.+56     	; 0x1e68 <Timer_init+0xe2>
			//enable interrupt for CTC mode -> timer 0
			SET_BIT(TIMSK,OCIE0);
    1e30:	a9 e5       	ldi	r26, 0x59	; 89
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e9 e5       	ldi	r30, 0x59	; 89
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	82 60       	ori	r24, 0x02	; 2
    1e3c:	8c 93       	st	X, r24
			//Activate CTC (compare) mode
			CLEAR_BIT(TCCR0,WGM00);
    1e3e:	a3 e5       	ldi	r26, 0x53	; 83
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e3 e5       	ldi	r30, 0x53	; 83
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8f 7b       	andi	r24, 0xBF	; 191
    1e4a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    1e4c:	a3 e5       	ldi	r26, 0x53	; 83
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e3 e5       	ldi	r30, 0x53	; 83
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	88 60       	ori	r24, 0x08	; 8
    1e58:	8c 93       	st	X, r24
			//add the compare value
			OCR0=(uint8)Config_Ptr->compare_value;
    1e5a:	ac e5       	ldi	r26, 0x5C	; 92
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e60:	fa 81       	ldd	r31, Y+2	; 0x02
    1e62:	83 81       	ldd	r24, Z+3	; 0x03
    1e64:	94 81       	ldd	r25, Z+4	; 0x04
    1e66:	8c 93       	st	X, r24
		}
		TCNT0 =0; /* Clear counter register */
    1e68:	e2 e5       	ldi	r30, 0x52	; 82
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	10 82       	st	Z, r1
		TCCR0 =(TCCR0 &(~0X07)) | (Config_Ptr->clock & 0x07); /* configure Pre-scaler */
    1e6e:	a3 e5       	ldi	r26, 0x53	; 83
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e3 e5       	ldi	r30, 0x53	; 83
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	98 2f       	mov	r25, r24
    1e7a:	98 7f       	andi	r25, 0xF8	; 248
    1e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e80:	81 81       	ldd	r24, Z+1	; 0x01
    1e82:	87 70       	andi	r24, 0x07	; 7
    1e84:	89 2b       	or	r24, r25
    1e86:	8c 93       	st	X, r24
    1e88:	9f c0       	rjmp	.+318    	; 0x1fc8 <Timer_init+0x242>
		break;

	case timer1:
		//for non PWM mode
		SET_BIT(TCCR1A,FOC1A);
    1e8a:	af e4       	ldi	r26, 0x4F	; 79
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	ef e4       	ldi	r30, 0x4F	; 79
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	88 60       	ori	r24, 0x08	; 8
    1e96:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    1e98:	af e4       	ldi	r26, 0x4F	; 79
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	ef e4       	ldi	r30, 0x4F	; 79
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	84 60       	ori	r24, 0x04	; 4
    1ea4:	8c 93       	st	X, r24
		if(Config_Ptr->mode==normal){
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	88 23       	and	r24, r24
    1eae:	91 f4       	brne	.+36     	; 0x1ed4 <Timer_init+0x14e>
			//enable interrupt for normal mode -> timer 1
			SET_BIT(TIMSK,TOIE1);
    1eb0:	a9 e5       	ldi	r26, 0x59	; 89
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e9 e5       	ldi	r30, 0x59	; 89
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	84 60       	ori	r24, 0x04	; 4
    1ebc:	8c 93       	st	X, r24
			TCCR1B=0;
    1ebe:	ee e4       	ldi	r30, 0x4E	; 78
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	10 82       	st	Z, r1
			TCCR1A &= ~0XF3;
    1ec4:	af e4       	ldi	r26, 0x4F	; 79
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ef e4       	ldi	r30, 0x4F	; 79
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	8c 70       	andi	r24, 0x0C	; 12
    1ed0:	8c 93       	st	X, r24
    1ed2:	23 c0       	rjmp	.+70     	; 0x1f1a <Timer_init+0x194>
		}
		else if(Config_Ptr->mode==ctc){
    1ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	82 30       	cpi	r24, 0x02	; 2
    1edc:	f1 f4       	brne	.+60     	; 0x1f1a <Timer_init+0x194>
			//enable interrupt for CTC mode -> timer 1
			SET_BIT(TIMSK,OCIE1A);
    1ede:	a9 e5       	ldi	r26, 0x59	; 89
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e9 e5       	ldi	r30, 0x59	; 89
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	80 61       	ori	r24, 0x10	; 16
    1eea:	8c 93       	st	X, r24
			//activate compare mode
			TCCR1B |= 0X08; /* set bit WGM12 Bit 3*/
    1eec:	ae e4       	ldi	r26, 0x4E	; 78
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ee e4       	ldi	r30, 0x4E	; 78
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	88 60       	ori	r24, 0x08	; 8
    1ef8:	8c 93       	st	X, r24
			TCCR1A &= ~0XF3;
    1efa:	af e4       	ldi	r26, 0x4F	; 79
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	ef e4       	ldi	r30, 0x4F	; 79
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8c 70       	andi	r24, 0x0C	; 12
    1f06:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->compare_value; /* enter compare value */
    1f08:	aa e4       	ldi	r26, 0x4A	; 74
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f10:	83 81       	ldd	r24, Z+3	; 0x03
    1f12:	94 81       	ldd	r25, Z+4	; 0x04
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	9c 93       	st	X, r25
    1f18:	8e 93       	st	-X, r24
		}
		TCNT1=0;    /* Clear Counter 1 */
    1f1a:	ec e4       	ldi	r30, 0x4C	; 76
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	11 82       	std	Z+1, r1	; 0x01
    1f20:	10 82       	st	Z, r1
		TCCR1B =(TCCR1B &(~0X07)) | (Config_Ptr->clock & 0x07); /* configure Pre-scaler */
    1f22:	ae e4       	ldi	r26, 0x4E	; 78
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	ee e4       	ldi	r30, 0x4E	; 78
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	98 2f       	mov	r25, r24
    1f2e:	98 7f       	andi	r25, 0xF8	; 248
    1f30:	e9 81       	ldd	r30, Y+1	; 0x01
    1f32:	fa 81       	ldd	r31, Y+2	; 0x02
    1f34:	81 81       	ldd	r24, Z+1	; 0x01
    1f36:	87 70       	andi	r24, 0x07	; 7
    1f38:	89 2b       	or	r24, r25
    1f3a:	8c 93       	st	X, r24
    1f3c:	45 c0       	rjmp	.+138    	; 0x1fc8 <Timer_init+0x242>
		break;

	case timer2:
		//for non PWM mode
		SET_BIT(TCCR2,FOC2);
    1f3e:	a5 e4       	ldi	r26, 0x45	; 69
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e5 e4       	ldi	r30, 0x45	; 69
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	80 68       	ori	r24, 0x80	; 128
    1f4a:	8c 93       	st	X, r24
		if(Config_Ptr->mode==normal){
    1f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	88 23       	and	r24, r24
    1f54:	79 f4       	brne	.+30     	; 0x1f74 <Timer_init+0x1ee>
			//enable interrupt for normal mode -> timer 2
			SET_BIT(TIMSK,OCIE2);
    1f56:	a9 e5       	ldi	r26, 0x59	; 89
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e9 e5       	ldi	r30, 0x59	; 89
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	80 68       	ori	r24, 0x80	; 128
    1f62:	8c 93       	st	X, r24
			TCCR2 &= ~0X78;
    1f64:	a5 e4       	ldi	r26, 0x45	; 69
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e5 e4       	ldi	r30, 0x45	; 69
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	87 78       	andi	r24, 0x87	; 135
    1f70:	8c 93       	st	X, r24
    1f72:	1a c0       	rjmp	.+52     	; 0x1fa8 <Timer_init+0x222>
		}
		else if(Config_Ptr->mode==ctc){
    1f74:	e9 81       	ldd	r30, Y+1	; 0x01
    1f76:	fa 81       	ldd	r31, Y+2	; 0x02
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	82 30       	cpi	r24, 0x02	; 2
    1f7c:	a9 f4       	brne	.+42     	; 0x1fa8 <Timer_init+0x222>
			//enable interrupt for CTC mode -> timer 2
			SET_BIT(TIMSK,TOIE2);
    1f7e:	a9 e5       	ldi	r26, 0x59	; 89
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e9 e5       	ldi	r30, 0x59	; 89
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	80 64       	ori	r24, 0x40	; 64
    1f8a:	8c 93       	st	X, r24
			TCCR2 |= 0X08;        /* WGM20 0 WGM21 1 Normal CTC Mode */
    1f8c:	a5 e4       	ldi	r26, 0x45	; 69
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e5 e4       	ldi	r30, 0x45	; 69
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	88 60       	ori	r24, 0x08	; 8
    1f98:	8c 93       	st	X, r24
			OCR2 =(uint8) Config_Ptr->compare_value; /* enter compare value*/
    1f9a:	a3 e4       	ldi	r26, 0x43	; 67
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa2:	83 81       	ldd	r24, Z+3	; 0x03
    1fa4:	94 81       	ldd	r25, Z+4	; 0x04
    1fa6:	8c 93       	st	X, r24
		}
		TCNT2 =0; /* Clear counter register */
    1fa8:	e4 e4       	ldi	r30, 0x44	; 68
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	10 82       	st	Z, r1
		TCCR2 =(TCCR2 &(~0X07)) | (Config_Ptr->clock & 0x07); /* configure Pre-scaler */
    1fae:	a5 e4       	ldi	r26, 0x45	; 69
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e5 e4       	ldi	r30, 0x45	; 69
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	98 2f       	mov	r25, r24
    1fba:	98 7f       	andi	r25, 0xF8	; 248
    1fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc0:	81 81       	ldd	r24, Z+1	; 0x01
    1fc2:	87 70       	andi	r24, 0x07	; 7
    1fc4:	89 2b       	or	r24, r25
    1fc6:	8c 93       	st	X, r24
		break;
	}
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <Timer_deInit>:
 * Description : deinitialize the Timer
 * Argument    : channel of the timer -> timer 0,1,2
 * Returns     : None
 ***************************************************/

void Timer_deInit(Timer_channel channel){
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <Timer_deInit+0x6>
    1fdc:	0f 92       	push	r0
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	89 83       	std	Y+1, r24	; 0x01
	switch (channel)
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	3b 83       	std	Y+3, r19	; 0x03
    1fec:	2a 83       	std	Y+2, r18	; 0x02
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	d1 f0       	breq	.+52     	; 0x202c <Timer_deInit+0x56>
    1ff8:	2a 81       	ldd	r18, Y+2	; 0x02
    1ffa:	3b 81       	ldd	r19, Y+3	; 0x03
    1ffc:	22 30       	cpi	r18, 0x02	; 2
    1ffe:	31 05       	cpc	r19, r1
    2000:	59 f1       	breq	.+86     	; 0x2058 <Timer_deInit+0x82>
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	9b 81       	ldd	r25, Y+3	; 0x03
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	b9 f5       	brne	.+110    	; 0x2078 <Timer_deInit+0xa2>
	{
	case timer0:
		TIMSK &= ~0X03; /* Disable All TIMER0 interrupt */
    200a:	a9 e5       	ldi	r26, 0x59	; 89
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e9 e5       	ldi	r30, 0x59	; 89
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8c 7f       	andi	r24, 0xFC	; 252
    2016:	8c 93       	st	X, r24
		TCNT0=0;        /* Disable timer0 */
    2018:	e2 e5       	ldi	r30, 0x52	; 82
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	10 82       	st	Z, r1
		TCCR0=0;        /* Clear Counter*/
    201e:	e3 e5       	ldi	r30, 0x53	; 83
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	10 82       	st	Z, r1
		OCR0=0;         /*Clear Compare Register*/
    2024:	ec e5       	ldi	r30, 0x5C	; 92
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	10 82       	st	Z, r1
    202a:	26 c0       	rjmp	.+76     	; 0x2078 <Timer_deInit+0xa2>
		break;
	case timer1:
		TIMSK &= ~0X1C; /*Disable All TIMER1 Interrupt */
    202c:	a9 e5       	ldi	r26, 0x59	; 89
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e9 e5       	ldi	r30, 0x59	; 89
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	83 7e       	andi	r24, 0xE3	; 227
    2038:	8c 93       	st	X, r24
		TCCR1A=0;       /* Disable Timer1 */
    203a:	ef e4       	ldi	r30, 0x4F	; 79
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	10 82       	st	Z, r1
		TCCR1B=0;
    2040:	ee e4       	ldi	r30, 0x4E	; 78
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	10 82       	st	Z, r1
		TCNT1=0;        /* Clear Counter*/
    2046:	ec e4       	ldi	r30, 0x4C	; 76
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	11 82       	std	Z+1, r1	; 0x01
    204c:	10 82       	st	Z, r1
		OCR1A=0;        /*Clear Compare Register*/
    204e:	ea e4       	ldi	r30, 0x4A	; 74
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	11 82       	std	Z+1, r1	; 0x01
    2054:	10 82       	st	Z, r1
    2056:	10 c0       	rjmp	.+32     	; 0x2078 <Timer_deInit+0xa2>

		break;
	case timer2:
		TIMSK &= ~0XC0; /* Disable All TIMER2 interrupt */
    2058:	a9 e5       	ldi	r26, 0x59	; 89
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e9 e5       	ldi	r30, 0x59	; 89
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	8f 73       	andi	r24, 0x3F	; 63
    2064:	8c 93       	st	X, r24
		TCNT2=0;        /* Disable TIMER2 */
    2066:	e4 e4       	ldi	r30, 0x44	; 68
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	10 82       	st	Z, r1
		TCCR2=0;        /* Clear Counter*/
    206c:	e5 e4       	ldi	r30, 0x45	; 69
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	10 82       	st	Z, r1
		OCR0=0;         /*Clear Compare Register*/
    2072:	ec e5       	ldi	r30, 0x5C	; 92
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	10 82       	st	Z, r1
		break;
	}
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <Timer_setCallBack>:
 * Argument    : channel of the timer -> timer 0,1,2
 * 				 pointer to Call Back function
 * Returns     : None
 ***************************************************/

void Timer_setCallBack(Timer_channel channel,void(*a_ptr)(void)){
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <Timer_setCallBack+0x6>
    208a:	00 d0       	rcall	.+0      	; 0x208c <Timer_setCallBack+0x8>
    208c:	0f 92       	push	r0
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	7b 83       	std	Y+3, r23	; 0x03
    2096:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel){
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	3d 83       	std	Y+5, r19	; 0x05
    20a0:	2c 83       	std	Y+4, r18	; 0x04
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	81 30       	cpi	r24, 0x01	; 1
    20a8:	91 05       	cpc	r25, r1
    20aa:	81 f0       	breq	.+32     	; 0x20cc <Timer_setCallBack+0x48>
    20ac:	2c 81       	ldd	r18, Y+4	; 0x04
    20ae:	3d 81       	ldd	r19, Y+5	; 0x05
    20b0:	22 30       	cpi	r18, 0x02	; 2
    20b2:	31 05       	cpc	r19, r1
    20b4:	91 f0       	breq	.+36     	; 0x20da <Timer_setCallBack+0x56>
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	a1 f4       	brne	.+40     	; 0x20e6 <Timer_setCallBack+0x62>
	case timer0:
		g_callBackPtr0=a_ptr;
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	9b 81       	ldd	r25, Y+3	; 0x03
    20c2:	90 93 7d 00 	sts	0x007D, r25
    20c6:	80 93 7c 00 	sts	0x007C, r24
    20ca:	0d c0       	rjmp	.+26     	; 0x20e6 <Timer_setCallBack+0x62>
		break;
	case timer1:
		g_callBackPtr1=a_ptr;
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	9b 81       	ldd	r25, Y+3	; 0x03
    20d0:	90 93 7f 00 	sts	0x007F, r25
    20d4:	80 93 7e 00 	sts	0x007E, r24
    20d8:	06 c0       	rjmp	.+12     	; 0x20e6 <Timer_setCallBack+0x62>
		break;
	case timer2:
		g_callBackPtr2=a_ptr;
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	9b 81       	ldd	r25, Y+3	; 0x03
    20de:	90 93 81 00 	sts	0x0081, r25
    20e2:	80 93 80 00 	sts	0x0080, r24
		break;

	}
}
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const I2C_config *configuration)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <TWI_init+0x6>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR = configuration->BitRate;
    2104:	a0 e2       	ldi	r26, 0x20	; 32
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e9 81       	ldd	r30, Y+1	; 0x01
    210a:	fa 81       	ldd	r31, Y+2	; 0x02
    210c:	81 81       	ldd	r24, Z+1	; 0x01
    210e:	8c 93       	st	X, r24
	TWSR |= ( (TWSR & ~ 0X03) | configuration->clock );
    2110:	a1 e2       	ldi	r26, 0x21	; 33
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e1 e2       	ldi	r30, 0x21	; 33
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	28 2f       	mov	r18, r24
    211c:	e1 e2       	ldi	r30, 0x21	; 33
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	98 2f       	mov	r25, r24
    2124:	9c 7f       	andi	r25, 0xFC	; 252
    2126:	e9 81       	ldd	r30, Y+1	; 0x01
    2128:	fa 81       	ldd	r31, Y+2	; 0x02
    212a:	80 81       	ld	r24, Z
    212c:	89 2b       	or	r24, r25
    212e:	82 2b       	or	r24, r18
    2130:	8c 93       	st	X, r24
	TWAR = (~0X01 & configuration->slave_address );
    2132:	a2 e2       	ldi	r26, 0x22	; 34
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e9 81       	ldd	r30, Y+1	; 0x01
    2138:	fa 81       	ldd	r31, Y+2	; 0x02
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	8e 7f       	andi	r24, 0xFE	; 254
    213e:	8c 93       	st	X, r24
	TWCR = (1<<TWEN); /* enable TWI */
    2140:	e6 e5       	ldi	r30, 0x56	; 86
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	84 e0       	ldi	r24, 0x04	; 4
    2146:	80 83       	st	Z, r24
}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <TWI_start>:

void TWI_start(void)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    215a:	e6 e5       	ldi	r30, 0x56	; 86
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	84 ea       	ldi	r24, 0xA4	; 164
    2160:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2162:	e6 e5       	ldi	r30, 0x56	; 86
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	88 23       	and	r24, r24
    216a:	dc f7       	brge	.-10     	; 0x2162 <TWI_start+0x10>
}
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <TWI_stop>:

void TWI_stop(void)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    217a:	e6 e5       	ldi	r30, 0x56	; 86
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	84 e9       	ldi	r24, 0x94	; 148
    2180:	80 83       	st	Z, r24
}
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	0f 92       	push	r0
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2194:	e3 e2       	ldi	r30, 0x23	; 35
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    219c:	e6 e5       	ldi	r30, 0x56	; 86
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	84 e8       	ldi	r24, 0x84	; 132
    21a2:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    21a4:	e6 e5       	ldi	r30, 0x56	; 86
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	88 23       	and	r24, r24
    21ac:	dc f7       	brge	.-10     	; 0x21a4 <TWI_writeByte+0x1c>
}
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    21be:	e6 e5       	ldi	r30, 0x56	; 86
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	84 ec       	ldi	r24, 0xC4	; 196
    21c4:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    21c6:	e6 e5       	ldi	r30, 0x56	; 86
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	88 23       	and	r24, r24
    21ce:	dc f7       	brge	.-10     	; 0x21c6 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    21d0:	e3 e2       	ldi	r30, 0x23	; 35
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
}
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    21e4:	e6 e5       	ldi	r30, 0x56	; 86
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	84 e8       	ldi	r24, 0x84	; 132
    21ea:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    21ec:	e6 e5       	ldi	r30, 0x56	; 86
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	88 23       	and	r24, r24
    21f4:	dc f7       	brge	.-10     	; 0x21ec <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    21f6:	e3 e2       	ldi	r30, 0x23	; 35
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	0f 92       	push	r0
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    220c:	e1 e2       	ldi	r30, 0x21	; 33
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	88 7f       	andi	r24, 0xF8	; 248
    2214:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2216:	89 81       	ldd	r24, Y+1	; 0x01
}
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_config *configuration)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <UART_init+0x6>
    2226:	00 d0       	rcall	.+0      	; 0x2228 <UART_init+0x8>
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2230:	ea e2       	ldi	r30, 0x2A	; 42
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	88 e1       	ldi	r24, 0x18	; 24
    2236:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2238:	e0 e4       	ldi	r30, 0x40	; 64
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	86 e8       	ldi	r24, 0x86	; 134
    223e:	80 83       	st	Z, r24
	UCSRC|=((configuration->polarity_mode) <<4);
    2240:	a0 e4       	ldi	r26, 0x40	; 64
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e0 e4       	ldi	r30, 0x40	; 64
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	28 2f       	mov	r18, r24
    224c:	e9 81       	ldd	r30, Y+1	; 0x01
    224e:	fa 81       	ldd	r31, Y+2	; 0x02
    2250:	81 81       	ldd	r24, Z+1	; 0x01
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	82 95       	swap	r24
    2258:	92 95       	swap	r25
    225a:	90 7f       	andi	r25, 0xF0	; 240
    225c:	98 27       	eor	r25, r24
    225e:	80 7f       	andi	r24, 0xF0	; 240
    2260:	98 27       	eor	r25, r24
    2262:	82 2b       	or	r24, r18
    2264:	8c 93       	st	X, r24
	
	switch(configuration->mode){
    2266:	e9 81       	ldd	r30, Y+1	; 0x01
    2268:	fa 81       	ldd	r31, Y+2	; 0x02
    226a:	80 81       	ld	r24, Z
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	3c 83       	std	Y+4, r19	; 0x04
    2272:	2b 83       	std	Y+3, r18	; 0x03
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	9c 81       	ldd	r25, Y+4	; 0x04
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	31 f0       	breq	.+12     	; 0x2288 <UART_init+0x68>
    227c:	2b 81       	ldd	r18, Y+3	; 0x03
    227e:	3c 81       	ldd	r19, Y+4	; 0x04
    2280:	21 30       	cpi	r18, 0x01	; 1
    2282:	31 05       	cpc	r19, r1
    2284:	81 f0       	breq	.+32     	; 0x22a6 <UART_init+0x86>
    2286:	24 c0       	rjmp	.+72     	; 0x22d0 <UART_init+0xb0>
	case Async:
		CLEAR_BIT(UCSRC,UMSEL);
    2288:	a0 e4       	ldi	r26, 0x40	; 64
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e0 e4       	ldi	r30, 0x40	; 64
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8f 7b       	andi	r24, 0xBF	; 191
    2294:	8c 93       	st	X, r24
		UBRRH = (BAUD_PRESCALE_SYNCH>>8);
    2296:	e0 e4       	ldi	r30, 0x40	; 64
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	10 82       	st	Z, r1
		UBRRL =  BAUD_PRESCALE_SYNCH;
    229c:	e9 e2       	ldi	r30, 0x29	; 41
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	83 e3       	ldi	r24, 0x33	; 51
    22a2:	80 83       	st	Z, r24
    22a4:	15 c0       	rjmp	.+42     	; 0x22d0 <UART_init+0xb0>
		break;
	case sync:
		SET_BIT(UCSRC,UMSEL);
    22a6:	a0 e4       	ldi	r26, 0x40	; 64
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	e0 e4       	ldi	r30, 0x40	; 64
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	80 64       	ori	r24, 0x40	; 64
    22b2:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCPOL);
    22b4:	a0 e4       	ldi	r26, 0x40	; 64
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e0 e4       	ldi	r30, 0x40	; 64
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	81 60       	ori	r24, 0x01	; 1
    22c0:	8c 93       	st	X, r24
		UBRRH = (BAUD_PRESCALE_SYNCH>>8);
    22c2:	e0 e4       	ldi	r30, 0x40	; 64
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	10 82       	st	Z, r1
		UBRRL =  BAUD_PRESCALE_SYNCH;
    22c8:	e9 e2       	ldi	r30, 0x29	; 41
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	83 e3       	ldi	r24, 0x33	; 51
    22ce:	80 83       	st	Z, r24
		break;
	}
}
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	0f 92       	push	r0
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    22ea:	eb e2       	ldi	r30, 0x2B	; 43
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	88 2f       	mov	r24, r24
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	80 72       	andi	r24, 0x20	; 32
    22f6:	90 70       	andi	r25, 0x00	; 0
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	b9 f3       	breq	.-18     	; 0x22ea <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    22fc:	ec e2       	ldi	r30, 0x2C	; 44
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2304:	0f 90       	pop	r0
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2314:	eb e2       	ldi	r30, 0x2B	; 43
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	88 23       	and	r24, r24
    231c:	dc f7       	brge	.-10     	; 0x2314 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    231e:	ec e2       	ldi	r30, 0x2C	; 44
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
}
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	00 d0       	rcall	.+0      	; 0x2330 <UART_sendString+0x6>
    2330:	0f 92       	push	r0
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	9b 83       	std	Y+3, r25	; 0x03
    2338:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    233a:	19 82       	std	Y+1, r1	; 0x01
    233c:	0e c0       	rjmp	.+28     	; 0x235a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	9b 81       	ldd	r25, Y+3	; 0x03
    2348:	fc 01       	movw	r30, r24
    234a:	e2 0f       	add	r30, r18
    234c:	f3 1f       	adc	r31, r19
    234e:	80 81       	ld	r24, Z
    2350:	0e 94 6f 11 	call	0x22de	; 0x22de <UART_sendByte>
		i++;
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	8f 5f       	subi	r24, 0xFF	; 255
    2358:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	9b 81       	ldd	r25, Y+3	; 0x03
    2364:	fc 01       	movw	r30, r24
    2366:	e2 0f       	add	r30, r18
    2368:	f3 1f       	adc	r31, r19
    236a:	80 81       	ld	r24, Z
    236c:	88 23       	and	r24, r24
    236e:	39 f7       	brne	.-50     	; 0x233e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    237c:	0f 93       	push	r16
    237e:	1f 93       	push	r17
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	00 d0       	rcall	.+0      	; 0x2386 <UART_receiveString+0xa>
    2386:	0f 92       	push	r0
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	9b 83       	std	Y+3, r25	; 0x03
    238e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2390:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	9b 81       	ldd	r25, Y+3	; 0x03
    239c:	8c 01       	movw	r16, r24
    239e:	02 0f       	add	r16, r18
    23a0:	13 1f       	adc	r17, r19
    23a2:	0e 94 86 11 	call	0x230c	; 0x230c <UART_recieveByte>
    23a6:	f8 01       	movw	r30, r16
    23a8:	80 83       	st	Z, r24
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	8f 5f       	subi	r24, 0xFF	; 255
    23b0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	8c 01       	movw	r16, r24
    23be:	02 0f       	add	r16, r18
    23c0:	13 1f       	adc	r17, r19
    23c2:	0e 94 86 11 	call	0x230c	; 0x230c <UART_recieveByte>
    23c6:	f8 01       	movw	r30, r16
    23c8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	9b 81       	ldd	r25, Y+3	; 0x03
    23d4:	fc 01       	movw	r30, r24
    23d6:	e2 0f       	add	r30, r18
    23d8:	f3 1f       	adc	r31, r19
    23da:	80 81       	ld	r24, Z
    23dc:	83 32       	cpi	r24, 0x23	; 35
    23de:	31 f7       	brne	.-52     	; 0x23ac <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ea:	fc 01       	movw	r30, r24
    23ec:	e2 0f       	add	r30, r18
    23ee:	f3 1f       	adc	r31, r19
    23f0:	10 82       	st	Z, r1
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	08 95       	ret

00002402 <__divmodhi4>:
    2402:	97 fb       	bst	r25, 7
    2404:	09 2e       	mov	r0, r25
    2406:	07 26       	eor	r0, r23
    2408:	0a d0       	rcall	.+20     	; 0x241e <__divmodhi4_neg1>
    240a:	77 fd       	sbrc	r23, 7
    240c:	04 d0       	rcall	.+8      	; 0x2416 <__divmodhi4_neg2>
    240e:	0c d0       	rcall	.+24     	; 0x2428 <__udivmodhi4>
    2410:	06 d0       	rcall	.+12     	; 0x241e <__divmodhi4_neg1>
    2412:	00 20       	and	r0, r0
    2414:	1a f4       	brpl	.+6      	; 0x241c <__divmodhi4_exit>

00002416 <__divmodhi4_neg2>:
    2416:	70 95       	com	r23
    2418:	61 95       	neg	r22
    241a:	7f 4f       	sbci	r23, 0xFF	; 255

0000241c <__divmodhi4_exit>:
    241c:	08 95       	ret

0000241e <__divmodhi4_neg1>:
    241e:	f6 f7       	brtc	.-4      	; 0x241c <__divmodhi4_exit>
    2420:	90 95       	com	r25
    2422:	81 95       	neg	r24
    2424:	9f 4f       	sbci	r25, 0xFF	; 255
    2426:	08 95       	ret

00002428 <__udivmodhi4>:
    2428:	aa 1b       	sub	r26, r26
    242a:	bb 1b       	sub	r27, r27
    242c:	51 e1       	ldi	r21, 0x11	; 17
    242e:	07 c0       	rjmp	.+14     	; 0x243e <__udivmodhi4_ep>

00002430 <__udivmodhi4_loop>:
    2430:	aa 1f       	adc	r26, r26
    2432:	bb 1f       	adc	r27, r27
    2434:	a6 17       	cp	r26, r22
    2436:	b7 07       	cpc	r27, r23
    2438:	10 f0       	brcs	.+4      	; 0x243e <__udivmodhi4_ep>
    243a:	a6 1b       	sub	r26, r22
    243c:	b7 0b       	sbc	r27, r23

0000243e <__udivmodhi4_ep>:
    243e:	88 1f       	adc	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	5a 95       	dec	r21
    2444:	a9 f7       	brne	.-22     	; 0x2430 <__udivmodhi4_loop>
    2446:	80 95       	com	r24
    2448:	90 95       	com	r25
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	08 95       	ret

00002450 <__prologue_saves__>:
    2450:	2f 92       	push	r2
    2452:	3f 92       	push	r3
    2454:	4f 92       	push	r4
    2456:	5f 92       	push	r5
    2458:	6f 92       	push	r6
    245a:	7f 92       	push	r7
    245c:	8f 92       	push	r8
    245e:	9f 92       	push	r9
    2460:	af 92       	push	r10
    2462:	bf 92       	push	r11
    2464:	cf 92       	push	r12
    2466:	df 92       	push	r13
    2468:	ef 92       	push	r14
    246a:	ff 92       	push	r15
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	ca 1b       	sub	r28, r26
    247a:	db 0b       	sbc	r29, r27
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	09 94       	ijmp

00002488 <__epilogue_restores__>:
    2488:	2a 88       	ldd	r2, Y+18	; 0x12
    248a:	39 88       	ldd	r3, Y+17	; 0x11
    248c:	48 88       	ldd	r4, Y+16	; 0x10
    248e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2490:	6e 84       	ldd	r6, Y+14	; 0x0e
    2492:	7d 84       	ldd	r7, Y+13	; 0x0d
    2494:	8c 84       	ldd	r8, Y+12	; 0x0c
    2496:	9b 84       	ldd	r9, Y+11	; 0x0b
    2498:	aa 84       	ldd	r10, Y+10	; 0x0a
    249a:	b9 84       	ldd	r11, Y+9	; 0x09
    249c:	c8 84       	ldd	r12, Y+8	; 0x08
    249e:	df 80       	ldd	r13, Y+7	; 0x07
    24a0:	ee 80       	ldd	r14, Y+6	; 0x06
    24a2:	fd 80       	ldd	r15, Y+5	; 0x05
    24a4:	0c 81       	ldd	r16, Y+4	; 0x04
    24a6:	1b 81       	ldd	r17, Y+3	; 0x03
    24a8:	aa 81       	ldd	r26, Y+2	; 0x02
    24aa:	b9 81       	ldd	r27, Y+1	; 0x01
    24ac:	ce 0f       	add	r28, r30
    24ae:	d1 1d       	adc	r29, r1
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	ed 01       	movw	r28, r26
    24bc:	08 95       	ret

000024be <_exit>:
    24be:	f8 94       	cli

000024c0 <__stop_program>:
    24c0:	ff cf       	rjmp	.-2      	; 0x24c0 <__stop_program>
