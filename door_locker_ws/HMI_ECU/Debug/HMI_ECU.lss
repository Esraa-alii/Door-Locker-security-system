
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000385c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  0000385c  000038f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800182  00800182  00003a12  2**0
                  ALLOC
  3 .stab         00003510  00000000  00000000  00003a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001411  00000000  00000000  00006f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008335  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008475  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000085e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a22e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b119  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c2b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <__vector_3>
      10:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6e 18 	jmp	0x30dc	; 0x30dc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__vector_8>
      24:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b0 1b 	jmp	0x3760	; 0x3760 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e6       	ldi	r26, 0x6C	; 108
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b0 1b 	jmp	0x3760	; 0x3760 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e6       	ldi	r24, 0x6C	; 108
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bc 1b 	jmp	0x3778	; 0x3778 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dc 1b 	jmp	0x37b8	; 0x37b8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
//		LCD_clearScreen();
//
//	}while(g_matchedflag == 0);
//}

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	cc 54       	subi	r28, 0x4C	; 76
     b50:	d0 40       	sbci	r29, 0x00	; 0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
	//intialize the LCD
	LCD_init();
     b5c:	0e 94 aa 12 	call	0x2554	; 0x2554 <LCD_init>

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_config uart_config ={Async,enable_evenPolarity,one_bit};
     b60:	9e 01       	movw	r18, r28
     b62:	27 5c       	subi	r18, 0xC7	; 199
     b64:	3f 4f       	sbci	r19, 0xFF	; 255
     b66:	25 96       	adiw	r28, 0x05	; 5
     b68:	3f af       	std	Y+63, r19	; 0x3f
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	25 97       	sbiw	r28, 0x05	; 5
     b6e:	89 e7       	ldi	r24, 0x79	; 121
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	27 96       	adiw	r28, 0x07	; 7
     b74:	9f af       	std	Y+63, r25	; 0x3f
     b76:	8e af       	std	Y+62, r24	; 0x3e
     b78:	27 97       	sbiw	r28, 0x07	; 7
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	28 96       	adiw	r28, 0x08	; 8
     b7e:	9f af       	std	Y+63, r25	; 0x3f
     b80:	28 97       	sbiw	r28, 0x08	; 8
     b82:	27 96       	adiw	r28, 0x07	; 7
     b84:	ee ad       	ldd	r30, Y+62	; 0x3e
     b86:	ff ad       	ldd	r31, Y+63	; 0x3f
     b88:	27 97       	sbiw	r28, 0x07	; 7
     b8a:	00 80       	ld	r0, Z
     b8c:	27 96       	adiw	r28, 0x07	; 7
     b8e:	2e ad       	ldd	r18, Y+62	; 0x3e
     b90:	3f ad       	ldd	r19, Y+63	; 0x3f
     b92:	27 97       	sbiw	r28, 0x07	; 7
     b94:	2f 5f       	subi	r18, 0xFF	; 255
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	27 96       	adiw	r28, 0x07	; 7
     b9a:	3f af       	std	Y+63, r19	; 0x3f
     b9c:	2e af       	std	Y+62, r18	; 0x3e
     b9e:	27 97       	sbiw	r28, 0x07	; 7
     ba0:	25 96       	adiw	r28, 0x05	; 5
     ba2:	ee ad       	ldd	r30, Y+62	; 0x3e
     ba4:	ff ad       	ldd	r31, Y+63	; 0x3f
     ba6:	25 97       	sbiw	r28, 0x05	; 5
     ba8:	00 82       	st	Z, r0
     baa:	25 96       	adiw	r28, 0x05	; 5
     bac:	2e ad       	ldd	r18, Y+62	; 0x3e
     bae:	3f ad       	ldd	r19, Y+63	; 0x3f
     bb0:	25 97       	sbiw	r28, 0x05	; 5
     bb2:	2f 5f       	subi	r18, 0xFF	; 255
     bb4:	3f 4f       	sbci	r19, 0xFF	; 255
     bb6:	25 96       	adiw	r28, 0x05	; 5
     bb8:	3f af       	std	Y+63, r19	; 0x3f
     bba:	2e af       	std	Y+62, r18	; 0x3e
     bbc:	25 97       	sbiw	r28, 0x05	; 5
     bbe:	28 96       	adiw	r28, 0x08	; 8
     bc0:	3f ad       	ldd	r19, Y+63	; 0x3f
     bc2:	28 97       	sbiw	r28, 0x08	; 8
     bc4:	31 50       	subi	r19, 0x01	; 1
     bc6:	28 96       	adiw	r28, 0x08	; 8
     bc8:	3f af       	std	Y+63, r19	; 0x3f
     bca:	28 97       	sbiw	r28, 0x08	; 8
     bcc:	28 96       	adiw	r28, 0x08	; 8
     bce:	8f ad       	ldd	r24, Y+63	; 0x3f
     bd0:	28 97       	sbiw	r28, 0x08	; 8
     bd2:	88 23       	and	r24, r24
     bd4:	b1 f6       	brne	.-84     	; 0xb82 <main+0x3c>
	UART_init(&uart_config);
     bd6:	ce 01       	movw	r24, r28
     bd8:	c9 96       	adiw	r24, 0x39	; 57
     bda:	0e 94 bf 1a 	call	0x357e	; 0x357e <UART_init>

	/*initialize the timer driver
	 * channel -> timer0
	 * clock -> 1024
	 * mode -> overflow mode (normal)*/
	TIMER_config timer_config ={timer0,t_clk1024,normal,0};
     bde:	fe 01       	movw	r30, r28
     be0:	fc 96       	adiw	r30, 0x3c	; 60
     be2:	2a 96       	adiw	r28, 0x0a	; 10
     be4:	ff af       	std	Y+63, r31	; 0x3f
     be6:	ee af       	std	Y+62, r30	; 0x3e
     be8:	2a 97       	sbiw	r28, 0x0a	; 10
     bea:	24 e7       	ldi	r18, 0x74	; 116
     bec:	31 e0       	ldi	r19, 0x01	; 1
     bee:	2c 96       	adiw	r28, 0x0c	; 12
     bf0:	3f af       	std	Y+63, r19	; 0x3f
     bf2:	2e af       	std	Y+62, r18	; 0x3e
     bf4:	2c 97       	sbiw	r28, 0x0c	; 12
     bf6:	35 e0       	ldi	r19, 0x05	; 5
     bf8:	2d 96       	adiw	r28, 0x0d	; 13
     bfa:	3f af       	std	Y+63, r19	; 0x3f
     bfc:	2d 97       	sbiw	r28, 0x0d	; 13
     bfe:	2c 96       	adiw	r28, 0x0c	; 12
     c00:	ee ad       	ldd	r30, Y+62	; 0x3e
     c02:	ff ad       	ldd	r31, Y+63	; 0x3f
     c04:	2c 97       	sbiw	r28, 0x0c	; 12
     c06:	00 80       	ld	r0, Z
     c08:	2c 96       	adiw	r28, 0x0c	; 12
     c0a:	2e ad       	ldd	r18, Y+62	; 0x3e
     c0c:	3f ad       	ldd	r19, Y+63	; 0x3f
     c0e:	2c 97       	sbiw	r28, 0x0c	; 12
     c10:	2f 5f       	subi	r18, 0xFF	; 255
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	2c 96       	adiw	r28, 0x0c	; 12
     c16:	3f af       	std	Y+63, r19	; 0x3f
     c18:	2e af       	std	Y+62, r18	; 0x3e
     c1a:	2c 97       	sbiw	r28, 0x0c	; 12
     c1c:	2a 96       	adiw	r28, 0x0a	; 10
     c1e:	ee ad       	ldd	r30, Y+62	; 0x3e
     c20:	ff ad       	ldd	r31, Y+63	; 0x3f
     c22:	2a 97       	sbiw	r28, 0x0a	; 10
     c24:	00 82       	st	Z, r0
     c26:	2a 96       	adiw	r28, 0x0a	; 10
     c28:	2e ad       	ldd	r18, Y+62	; 0x3e
     c2a:	3f ad       	ldd	r19, Y+63	; 0x3f
     c2c:	2a 97       	sbiw	r28, 0x0a	; 10
     c2e:	2f 5f       	subi	r18, 0xFF	; 255
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	2a 96       	adiw	r28, 0x0a	; 10
     c34:	3f af       	std	Y+63, r19	; 0x3f
     c36:	2e af       	std	Y+62, r18	; 0x3e
     c38:	2a 97       	sbiw	r28, 0x0a	; 10
     c3a:	2d 96       	adiw	r28, 0x0d	; 13
     c3c:	3f ad       	ldd	r19, Y+63	; 0x3f
     c3e:	2d 97       	sbiw	r28, 0x0d	; 13
     c40:	31 50       	subi	r19, 0x01	; 1
     c42:	2d 96       	adiw	r28, 0x0d	; 13
     c44:	3f af       	std	Y+63, r19	; 0x3f
     c46:	2d 97       	sbiw	r28, 0x0d	; 13
     c48:	2d 96       	adiw	r28, 0x0d	; 13
     c4a:	8f ad       	ldd	r24, Y+63	; 0x3f
     c4c:	2d 97       	sbiw	r28, 0x0d	; 13
     c4e:	88 23       	and	r24, r24
     c50:	b1 f6       	brne	.-84     	; 0xbfe <main+0xb8>
	Timer_init(&timer_config);
     c52:	ce 01       	movw	r24, r28
     c54:	cc 96       	adiw	r24, 0x3c	; 60
     c56:	0e 94 07 19 	call	0x320e	; 0x320e <Timer_init>
	Timer_setCallBack(timer0,timer_decrement_counter);
     c5a:	2d ef       	ldi	r18, 0xFD	; 253
     c5c:	38 e0       	ldi	r19, 0x08	; 8
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	b9 01       	movw	r22, r18
     c62:	0e 94 86 1a 	call	0x350c	; 0x350c <Timer_setCallBack>

	/*open pin of global interrupt the I-bit*/

	SREG |= (1 << 7);
     c66:	af e5       	ldi	r26, 0x5F	; 95
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	ef e5       	ldi	r30, 0x5F	; 95
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	80 68       	ori	r24, 0x80	; 128
     c72:	8c 93       	st	X, r24

	g_order = enterPass;
     c74:	10 92 a5 01 	sts	0x01A5, r1
//	Password_savePassword();
	while (1) {

		switch (g_order) {
     c78:	80 91 a5 01 	lds	r24, 0x01A5
     c7c:	e8 2f       	mov	r30, r24
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	23 96       	adiw	r28, 0x03	; 3
     c82:	ff af       	std	Y+63, r31	; 0x3f
     c84:	ee af       	std	Y+62, r30	; 0x3e
     c86:	23 97       	sbiw	r28, 0x03	; 3
     c88:	23 96       	adiw	r28, 0x03	; 3
     c8a:	2e ad       	ldd	r18, Y+62	; 0x3e
     c8c:	3f ad       	ldd	r19, Y+63	; 0x3f
     c8e:	23 97       	sbiw	r28, 0x03	; 3
     c90:	22 30       	cpi	r18, 0x02	; 2
     c92:	31 05       	cpc	r19, r1
     c94:	09 f4       	brne	.+2      	; 0xc98 <main+0x152>
     c96:	bc c1       	rjmp	.+888    	; 0x1010 <main+0x4ca>
     c98:	23 96       	adiw	r28, 0x03	; 3
     c9a:	8e ad       	ldd	r24, Y+62	; 0x3e
     c9c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c9e:	23 97       	sbiw	r28, 0x03	; 3
     ca0:	83 30       	cpi	r24, 0x03	; 3
     ca2:	91 05       	cpc	r25, r1
     ca4:	7c f4       	brge	.+30     	; 0xcc4 <main+0x17e>
     ca6:	23 96       	adiw	r28, 0x03	; 3
     ca8:	ee ad       	ldd	r30, Y+62	; 0x3e
     caa:	ff ad       	ldd	r31, Y+63	; 0x3f
     cac:	23 97       	sbiw	r28, 0x03	; 3
     cae:	30 97       	sbiw	r30, 0x00	; 0
     cb0:	11 f1       	breq	.+68     	; 0xcf6 <main+0x1b0>
     cb2:	23 96       	adiw	r28, 0x03	; 3
     cb4:	2e ad       	ldd	r18, Y+62	; 0x3e
     cb6:	3f ad       	ldd	r19, Y+63	; 0x3f
     cb8:	23 97       	sbiw	r28, 0x03	; 3
     cba:	21 30       	cpi	r18, 0x01	; 1
     cbc:	31 05       	cpc	r19, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <main+0x17c>
     cc0:	a7 c0       	rjmp	.+334    	; 0xe10 <main+0x2ca>
     cc2:	da cf       	rjmp	.-76     	; 0xc78 <main+0x132>
     cc4:	23 96       	adiw	r28, 0x03	; 3
     cc6:	8e ad       	ldd	r24, Y+62	; 0x3e
     cc8:	9f ad       	ldd	r25, Y+63	; 0x3f
     cca:	23 97       	sbiw	r28, 0x03	; 3
     ccc:	84 30       	cpi	r24, 0x04	; 4
     cce:	91 05       	cpc	r25, r1
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <main+0x18e>
     cd2:	db c1       	rjmp	.+950    	; 0x108a <main+0x544>
     cd4:	23 96       	adiw	r28, 0x03	; 3
     cd6:	ee ad       	ldd	r30, Y+62	; 0x3e
     cd8:	ff ad       	ldd	r31, Y+63	; 0x3f
     cda:	23 97       	sbiw	r28, 0x03	; 3
     cdc:	e4 30       	cpi	r30, 0x04	; 4
     cde:	f1 05       	cpc	r31, r1
     ce0:	0c f4       	brge	.+2      	; 0xce4 <main+0x19e>
     ce2:	a9 c1       	rjmp	.+850    	; 0x1036 <main+0x4f0>
     ce4:	23 96       	adiw	r28, 0x03	; 3
     ce6:	2e ad       	ldd	r18, Y+62	; 0x3e
     ce8:	3f ad       	ldd	r19, Y+63	; 0x3f
     cea:	23 97       	sbiw	r28, 0x03	; 3
     cec:	25 30       	cpi	r18, 0x05	; 5
     cee:	31 05       	cpc	r19, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <main+0x1ae>
     cf2:	7d c2       	rjmp	.+1274   	; 0x11ee <main+0x6a8>
     cf4:	c1 cf       	rjmp	.-126    	; 0xc78 <main+0x132>
		/*
		 * At the start if the system ask the user to enter pass and confirm it
		 */
		case enterPass:

			Enter_Password();
     cf6:	0e 94 65 09 	call	0x12ca	; 0x12ca <Enter_Password>
			/*checking if the password matched then go to step 1
			 * if unmatched repeat this step again
			 */
			if (checking_value == correctPass) {
     cfa:	80 91 9b 01 	lds	r24, 0x019B
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	21 f4       	brne	.+8      	; 0xd0a <main+0x1c4>
				g_order = sendByUART;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 a5 01 	sts	0x01A5, r24
     d08:	80 c0       	rjmp	.+256    	; 0xe0a <main+0x2c4>
			} else {
				LCD_clearScreen();
     d0a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
				LCD_moveCursor(0,0);
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
				LCD_displayString("Wrong password!");
     d16:	80 e6       	ldi	r24, 0x60	; 96
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	aa e7       	ldi	r26, 0x7A	; 122
     d24:	b4 e4       	ldi	r27, 0x44	; 68
     d26:	8d ab       	std	Y+53, r24	; 0x35
     d28:	9e ab       	std	Y+54, r25	; 0x36
     d2a:	af ab       	std	Y+55, r26	; 0x37
     d2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d2e:	6d a9       	ldd	r22, Y+53	; 0x35
     d30:	7e a9       	ldd	r23, Y+54	; 0x36
     d32:	8f a9       	ldd	r24, Y+55	; 0x37
     d34:	98 ad       	ldd	r25, Y+56	; 0x38
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	4a ef       	ldi	r20, 0xFA	; 250
     d3c:	54 e4       	ldi	r21, 0x44	; 68
     d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	89 ab       	std	Y+49, r24	; 0x31
     d48:	9a ab       	std	Y+50, r25	; 0x32
     d4a:	ab ab       	std	Y+51, r26	; 0x33
     d4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d4e:	69 a9       	ldd	r22, Y+49	; 0x31
     d50:	7a a9       	ldd	r23, Y+50	; 0x32
     d52:	8b a9       	ldd	r24, Y+51	; 0x33
     d54:	9c a9       	ldd	r25, Y+52	; 0x34
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e8       	ldi	r20, 0x80	; 128
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d62:	88 23       	and	r24, r24
     d64:	2c f4       	brge	.+10     	; 0xd70 <main+0x22a>
		__ticks = 1;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	98 ab       	std	Y+48, r25	; 0x30
     d6c:	8f a7       	std	Y+47, r24	; 0x2f
     d6e:	3f c0       	rjmp	.+126    	; 0xdee <main+0x2a8>
	else if (__tmp > 65535)
     d70:	69 a9       	ldd	r22, Y+49	; 0x31
     d72:	7a a9       	ldd	r23, Y+50	; 0x32
     d74:	8b a9       	ldd	r24, Y+51	; 0x33
     d76:	9c a9       	ldd	r25, Y+52	; 0x34
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	3f ef       	ldi	r19, 0xFF	; 255
     d7c:	4f e7       	ldi	r20, 0x7F	; 127
     d7e:	57 e4       	ldi	r21, 0x47	; 71
     d80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d84:	18 16       	cp	r1, r24
     d86:	4c f5       	brge	.+82     	; 0xdda <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d88:	6d a9       	ldd	r22, Y+53	; 0x35
     d8a:	7e a9       	ldd	r23, Y+54	; 0x36
     d8c:	8f a9       	ldd	r24, Y+55	; 0x37
     d8e:	98 ad       	ldd	r25, Y+56	; 0x38
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e2       	ldi	r20, 0x20	; 32
     d96:	51 e4       	ldi	r21, 0x41	; 65
     d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	bc 01       	movw	r22, r24
     da2:	cd 01       	movw	r24, r26
     da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	98 ab       	std	Y+48, r25	; 0x30
     dae:	8f a7       	std	Y+47, r24	; 0x2f
     db0:	0f c0       	rjmp	.+30     	; 0xdd0 <main+0x28a>
     db2:	88 ec       	ldi	r24, 0xC8	; 200
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9e a7       	std	Y+46, r25	; 0x2e
     db8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dba:	8d a5       	ldd	r24, Y+45	; 0x2d
     dbc:	9e a5       	ldd	r25, Y+46	; 0x2e
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <main+0x278>
     dc2:	9e a7       	std	Y+46, r25	; 0x2e
     dc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc6:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc8:	98 a9       	ldd	r25, Y+48	; 0x30
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	98 ab       	std	Y+48, r25	; 0x30
     dce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
     dd2:	98 a9       	ldd	r25, Y+48	; 0x30
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	69 f7       	brne	.-38     	; 0xdb2 <main+0x26c>
     dd8:	14 c0       	rjmp	.+40     	; 0xe02 <main+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dda:	69 a9       	ldd	r22, Y+49	; 0x31
     ddc:	7a a9       	ldd	r23, Y+50	; 0x32
     dde:	8b a9       	ldd	r24, Y+51	; 0x33
     de0:	9c a9       	ldd	r25, Y+52	; 0x34
     de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	98 ab       	std	Y+48, r25	; 0x30
     dec:	8f a7       	std	Y+47, r24	; 0x2f
     dee:	8f a5       	ldd	r24, Y+47	; 0x2f
     df0:	98 a9       	ldd	r25, Y+48	; 0x30
     df2:	9c a7       	std	Y+44, r25	; 0x2c
     df4:	8b a7       	std	Y+43, r24	; 0x2b
     df6:	8b a5       	ldd	r24, Y+43	; 0x2b
     df8:	9c a5       	ldd	r25, Y+44	; 0x2c
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <main+0x2b4>
     dfe:	9c a7       	std	Y+44, r25	; 0x2c
     e00:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				LCD_clearScreen();
     e02:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
				g_order =enterPass ;
     e06:	10 92 a5 01 	sts	0x01A5, r1
			}
			LCD_clearScreen();
     e0a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
     e0e:	34 cf       	rjmp	.-408    	; 0xc78 <main+0x132>

			/*
			 * if the password confirmed send it through the UART to the Control_ECU
			 */
		case sendByUART:
			LCD_clearScreen();
     e10:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			LCD_moveCursor(0,0);
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
			LCD_displayString("Correct pass!");
     e1c:	80 e7       	ldi	r24, 0x70	; 112
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	aa ef       	ldi	r26, 0xFA	; 250
     e2a:	b3 e4       	ldi	r27, 0x43	; 67
     e2c:	8f a3       	std	Y+39, r24	; 0x27
     e2e:	98 a7       	std	Y+40, r25	; 0x28
     e30:	a9 a7       	std	Y+41, r26	; 0x29
     e32:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e34:	6f a1       	ldd	r22, Y+39	; 0x27
     e36:	78 a5       	ldd	r23, Y+40	; 0x28
     e38:	89 a5       	ldd	r24, Y+41	; 0x29
     e3a:	9a a5       	ldd	r25, Y+42	; 0x2a
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4a ef       	ldi	r20, 0xFA	; 250
     e42:	54 e4       	ldi	r21, 0x44	; 68
     e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	8b a3       	std	Y+35, r24	; 0x23
     e4e:	9c a3       	std	Y+36, r25	; 0x24
     e50:	ad a3       	std	Y+37, r26	; 0x25
     e52:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e54:	6b a1       	ldd	r22, Y+35	; 0x23
     e56:	7c a1       	ldd	r23, Y+36	; 0x24
     e58:	8d a1       	ldd	r24, Y+37	; 0x25
     e5a:	9e a1       	ldd	r25, Y+38	; 0x26
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e8       	ldi	r20, 0x80	; 128
     e62:	5f e3       	ldi	r21, 0x3F	; 63
     e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e68:	88 23       	and	r24, r24
     e6a:	2c f4       	brge	.+10     	; 0xe76 <main+0x330>
		__ticks = 1;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	9a a3       	std	Y+34, r25	; 0x22
     e72:	89 a3       	std	Y+33, r24	; 0x21
     e74:	3f c0       	rjmp	.+126    	; 0xef4 <main+0x3ae>
	else if (__tmp > 65535)
     e76:	6b a1       	ldd	r22, Y+35	; 0x23
     e78:	7c a1       	ldd	r23, Y+36	; 0x24
     e7a:	8d a1       	ldd	r24, Y+37	; 0x25
     e7c:	9e a1       	ldd	r25, Y+38	; 0x26
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	57 e4       	ldi	r21, 0x47	; 71
     e86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	4c f5       	brge	.+82     	; 0xee0 <main+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	6f a1       	ldd	r22, Y+39	; 0x27
     e90:	78 a5       	ldd	r23, Y+40	; 0x28
     e92:	89 a5       	ldd	r24, Y+41	; 0x29
     e94:	9a a5       	ldd	r25, Y+42	; 0x2a
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e2       	ldi	r20, 0x20	; 32
     e9c:	51 e4       	ldi	r21, 0x41	; 65
     e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9a a3       	std	Y+34, r25	; 0x22
     eb4:	89 a3       	std	Y+33, r24	; 0x21
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <main+0x390>
     eb8:	88 ec       	ldi	r24, 0xC8	; 200
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	98 a3       	std	Y+32, r25	; 0x20
     ebe:	8f 8f       	std	Y+31, r24	; 0x1f
     ec0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ec2:	98 a1       	ldd	r25, Y+32	; 0x20
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <main+0x37e>
     ec8:	98 a3       	std	Y+32, r25	; 0x20
     eca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	89 a1       	ldd	r24, Y+33	; 0x21
     ece:	9a a1       	ldd	r25, Y+34	; 0x22
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	9a a3       	std	Y+34, r25	; 0x22
     ed4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed6:	89 a1       	ldd	r24, Y+33	; 0x21
     ed8:	9a a1       	ldd	r25, Y+34	; 0x22
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	69 f7       	brne	.-38     	; 0xeb8 <main+0x372>
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <main+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee0:	6b a1       	ldd	r22, Y+35	; 0x23
     ee2:	7c a1       	ldd	r23, Y+36	; 0x24
     ee4:	8d a1       	ldd	r24, Y+37	; 0x25
     ee6:	9e a1       	ldd	r25, Y+38	; 0x26
     ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9a a3       	std	Y+34, r25	; 0x22
     ef2:	89 a3       	std	Y+33, r24	; 0x21
     ef4:	89 a1       	ldd	r24, Y+33	; 0x21
     ef6:	9a a1       	ldd	r25, Y+34	; 0x22
     ef8:	9e 8f       	std	Y+30, r25	; 0x1e
     efa:	8d 8f       	std	Y+29, r24	; 0x1d
     efc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     efe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <main+0x3ba>
     f04:	9e 8f       	std	Y+30, r25	; 0x1e
     f06:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			send_Pass_ToMcu2();
     f08:	0e 94 05 0b 	call	0x160a	; 0x160a <send_Pass_ToMcu2>
			LCD_clearScreen();
     f0c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			LCD_clearScreen();
     f10:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			LCD_moveCursor(0,0);
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
			LCD_displayString("Password saved!");
     f1c:	8e e7       	ldi	r24, 0x7E	; 126
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	aa ef       	ldi	r26, 0xFA	; 250
     f2a:	b3 e4       	ldi	r27, 0x43	; 67
     f2c:	89 8f       	std	Y+25, r24	; 0x19
     f2e:	9a 8f       	std	Y+26, r25	; 0x1a
     f30:	ab 8f       	std	Y+27, r26	; 0x1b
     f32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f34:	69 8d       	ldd	r22, Y+25	; 0x19
     f36:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	4a ef       	ldi	r20, 0xFA	; 250
     f42:	54 e4       	ldi	r21, 0x44	; 68
     f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	8d 8b       	std	Y+21, r24	; 0x15
     f4e:	9e 8b       	std	Y+22, r25	; 0x16
     f50:	af 8b       	std	Y+23, r26	; 0x17
     f52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f54:	6d 89       	ldd	r22, Y+21	; 0x15
     f56:	7e 89       	ldd	r23, Y+22	; 0x16
     f58:	8f 89       	ldd	r24, Y+23	; 0x17
     f5a:	98 8d       	ldd	r25, Y+24	; 0x18
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e8       	ldi	r20, 0x80	; 128
     f62:	5f e3       	ldi	r21, 0x3F	; 63
     f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f68:	88 23       	and	r24, r24
     f6a:	2c f4       	brge	.+10     	; 0xf76 <main+0x430>
		__ticks = 1;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9c 8b       	std	Y+20, r25	; 0x14
     f72:	8b 8b       	std	Y+19, r24	; 0x13
     f74:	3f c0       	rjmp	.+126    	; 0xff4 <main+0x4ae>
	else if (__tmp > 65535)
     f76:	6d 89       	ldd	r22, Y+21	; 0x15
     f78:	7e 89       	ldd	r23, Y+22	; 0x16
     f7a:	8f 89       	ldd	r24, Y+23	; 0x17
     f7c:	98 8d       	ldd	r25, Y+24	; 0x18
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f e7       	ldi	r20, 0x7F	; 127
     f84:	57 e4       	ldi	r21, 0x47	; 71
     f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8a:	18 16       	cp	r1, r24
     f8c:	4c f5       	brge	.+82     	; 0xfe0 <main+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8e:	69 8d       	ldd	r22, Y+25	; 0x19
     f90:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f92:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f94:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e2       	ldi	r20, 0x20	; 32
     f9c:	51 e4       	ldi	r21, 0x41	; 65
     f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	bc 01       	movw	r22, r24
     fa8:	cd 01       	movw	r24, r26
     faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	9c 8b       	std	Y+20, r25	; 0x14
     fb4:	8b 8b       	std	Y+19, r24	; 0x13
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <main+0x490>
     fb8:	88 ec       	ldi	r24, 0xC8	; 200
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9a 8b       	std	Y+18, r25	; 0x12
     fbe:	89 8b       	std	Y+17, r24	; 0x11
     fc0:	89 89       	ldd	r24, Y+17	; 0x11
     fc2:	9a 89       	ldd	r25, Y+18	; 0x12
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <main+0x47e>
     fc8:	9a 8b       	std	Y+18, r25	; 0x12
     fca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fcc:	8b 89       	ldd	r24, Y+19	; 0x13
     fce:	9c 89       	ldd	r25, Y+20	; 0x14
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	9c 8b       	std	Y+20, r25	; 0x14
     fd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd6:	8b 89       	ldd	r24, Y+19	; 0x13
     fd8:	9c 89       	ldd	r25, Y+20	; 0x14
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	69 f7       	brne	.-38     	; 0xfb8 <main+0x472>
     fde:	14 c0       	rjmp	.+40     	; 0x1008 <main+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe0:	6d 89       	ldd	r22, Y+21	; 0x15
     fe2:	7e 89       	ldd	r23, Y+22	; 0x16
     fe4:	8f 89       	ldd	r24, Y+23	; 0x17
     fe6:	98 8d       	ldd	r25, Y+24	; 0x18
     fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	9c 8b       	std	Y+20, r25	; 0x14
     ff2:	8b 8b       	std	Y+19, r24	; 0x13
     ff4:	8b 89       	ldd	r24, Y+19	; 0x13
     ff6:	9c 89       	ldd	r25, Y+20	; 0x14
     ff8:	98 8b       	std	Y+16, r25	; 0x10
     ffa:	8f 87       	std	Y+15, r24	; 0x0f
     ffc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffe:	98 89       	ldd	r25, Y+16	; 0x10
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	f1 f7       	brne	.-4      	; 0x1000 <main+0x4ba>
    1004:	98 8b       	std	Y+16, r25	; 0x10
    1006:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			g_order = displayMenu;
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	80 93 a5 01 	sts	0x01A5, r24
    100e:	34 ce       	rjmp	.-920    	; 0xc78 <main+0x132>
			 * display the option menu
			 * + -> open door
			 * - -> change password
			 */
		case displayMenu:
			display_optionsMenu();
    1010:	0e 94 85 0c 	call	0x190a	; 0x190a <display_optionsMenu>
			if (selected_option == '+') {
    1014:	80 91 a2 01 	lds	r24, 0x01A2
    1018:	8b 32       	cpi	r24, 0x2B	; 43
    101a:	21 f4       	brne	.+8      	; 0x1024 <main+0x4de>
				g_order = doorState;
    101c:	83 e0       	ldi	r24, 0x03	; 3
    101e:	80 93 a5 01 	sts	0x01A5, r24
    1022:	2a ce       	rjmp	.-940    	; 0xc78 <main+0x132>
			} else if (selected_option == '-') {
    1024:	80 91 a2 01 	lds	r24, 0x01A2
    1028:	8d 32       	cpi	r24, 0x2D	; 45
    102a:	09 f0       	breq	.+2      	; 0x102e <main+0x4e8>
    102c:	25 ce       	rjmp	.-950    	; 0xc78 <main+0x132>
				g_order = changePass;
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	80 93 a5 01 	sts	0x01A5, r24
    1034:	21 ce       	rjmp	.-958    	; 0xc78 <main+0x132>
			 * and wait 3 seconds and close the door and rotate the DC_motor Anti clock wise for 15 seconds }
			 * if the password unmatched their is 3 attempts to enter the correct and if the user does not
			 * enter the correct one the buzzer will turn on for 60 seconds and
			 */
		case doorState:
			LCD_clearScreen();
    1036:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
			LCD_displayString("Enter password");
    1042:	8e e8       	ldi	r24, 0x8E	; 142
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
			LCD_moveCursor(1, 4);
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	64 e0       	ldi	r22, 0x04	; 4
    104e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
			enter_saved_pass();
    1052:	0e 94 cc 0b 	call	0x1798	; 0x1798 <enter_saved_pass>
			LCD_moveCursor(1, 4);
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	64 e0       	ldi	r22, 0x04	; 4
    105a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
			send_Pass_ToMcu2();
    105e:	0e 94 05 0b 	call	0x160a	; 0x160a <send_Pass_ToMcu2>
			LCD_clearScreen();
    1062:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			checker = UART_recieveByte();
    1066:	0e 94 35 1b 	call	0x366a	; 0x366a <UART_recieveByte>
    106a:	80 93 a3 01 	sts	0x01A3, r24
			check_Pass(checker);
    106e:	80 91 a3 01 	lds	r24, 0x01A3
    1072:	0e 94 a0 0c 	call	0x1940	; 0x1940 <check_Pass>
			if(do_case)
    1076:	80 91 a4 01 	lds	r24, 0x01A4
    107a:	88 23       	and	r24, r24
    107c:	11 f0       	breq	.+4      	; 0x1082 <main+0x53c>
				matched_State();
    107e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <matched_State>
			g_order=displayMenu;
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	80 93 a5 01 	sts	0x01A5, r24
    1088:	f7 cd       	rjmp	.-1042   	; 0xc78 <main+0x132>
			break;
			/*
			 * This case change the password by reset the old password and change it
			 */
		case changePass:
			LCD_clearScreen();
    108a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
			LCD_displayString("Enter old pass");
    1096:	8d e9       	ldi	r24, 0x9D	; 157
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
			LCD_moveCursor(1, 4);
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	64 e0       	ldi	r22, 0x04	; 4
    10a2:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
			/*Enter the old password */
			enter_saved_pass();
    10a6:	0e 94 cc 0b 	call	0x1798	; 0x1798 <enter_saved_pass>
			LCD_moveCursor(1, 4);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	64 e0       	ldi	r22, 0x04	; 4
    10ae:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
			/*Then send to MCU2 to compare with that saved in EEprom*/
			send_Pass_ToMcu2();
    10b2:	0e 94 05 0b 	call	0x160a	; 0x160a <send_Pass_ToMcu2>
			LCD_clearScreen();
    10b6:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			/*receive the state from MCU2 in checker
			 * if the checker = 1 so enter the new password twice and save in eeprom
			 * if checker = 0 so return to case 0 to try again to enter the correct old password
			 */
			checker = UART_recieveByte();
    10ba:	0e 94 35 1b 	call	0x366a	; 0x366a <UART_recieveByte>
    10be:	80 93 a3 01 	sts	0x01A3, r24
			check_Pass(checker);
    10c2:	80 91 a3 01 	lds	r24, 0x01A3
    10c6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <check_Pass>
			if(do_case){
    10ca:	80 91 a4 01 	lds	r24, 0x01A4
    10ce:	88 23       	and	r24, r24
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <main+0x58e>
    10d2:	d2 cd       	rjmp	.-1116   	; 0xc78 <main+0x132>
				Enter_Password();
    10d4:	0e 94 65 09 	call	0x12ca	; 0x12ca <Enter_Password>
				if (checking_value == correctPass) {
    10d8:	80 91 9b 01 	lds	r24, 0x019B
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	21 f4       	brne	.+8      	; 0x10e8 <main+0x5a2>
					g_order = sendByUART;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 a5 01 	sts	0x01A5, r24
    10e6:	80 c0       	rjmp	.+256    	; 0x11e8 <main+0x6a2>
				} else {
					LCD_clearScreen();
    10e8:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
					LCD_moveCursor(0, 0);
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
					LCD_displayString("Wrong Password!");
    10f4:	8c ea       	ldi	r24, 0xAC	; 172
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	aa e7       	ldi	r26, 0x7A	; 122
    1102:	b4 e4       	ldi	r27, 0x44	; 68
    1104:	8b 87       	std	Y+11, r24	; 0x0b
    1106:	9c 87       	std	Y+12, r25	; 0x0c
    1108:	ad 87       	std	Y+13, r26	; 0x0d
    110a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110c:	6b 85       	ldd	r22, Y+11	; 0x0b
    110e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1110:	8d 85       	ldd	r24, Y+13	; 0x0d
    1112:	9e 85       	ldd	r25, Y+14	; 0x0e
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	4a ef       	ldi	r20, 0xFA	; 250
    111a:	54 e4       	ldi	r21, 0x44	; 68
    111c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8f 83       	std	Y+7, r24	; 0x07
    1126:	98 87       	std	Y+8, r25	; 0x08
    1128:	a9 87       	std	Y+9, r26	; 0x09
    112a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112c:	6f 81       	ldd	r22, Y+7	; 0x07
    112e:	78 85       	ldd	r23, Y+8	; 0x08
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	9a 85       	ldd	r25, Y+10	; 0x0a
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1140:	88 23       	and	r24, r24
    1142:	2c f4       	brge	.+10     	; 0x114e <main+0x608>
		__ticks = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9e 83       	std	Y+6, r25	; 0x06
    114a:	8d 83       	std	Y+5, r24	; 0x05
    114c:	3f c0       	rjmp	.+126    	; 0x11cc <main+0x686>
	else if (__tmp > 65535)
    114e:	6f 81       	ldd	r22, Y+7	; 0x07
    1150:	78 85       	ldd	r23, Y+8	; 0x08
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	9a 85       	ldd	r25, Y+10	; 0x0a
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	4f e7       	ldi	r20, 0x7F	; 127
    115c:	57 e4       	ldi	r21, 0x47	; 71
    115e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1162:	18 16       	cp	r1, r24
    1164:	4c f5       	brge	.+82     	; 0x11b8 <main+0x672>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1166:	6b 85       	ldd	r22, Y+11	; 0x0b
    1168:	7c 85       	ldd	r23, Y+12	; 0x0c
    116a:	8d 85       	ldd	r24, Y+13	; 0x0d
    116c:	9e 85       	ldd	r25, Y+14	; 0x0e
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	0f c0       	rjmp	.+30     	; 0x11ae <main+0x668>
    1190:	88 ec       	ldi	r24, 0xC8	; 200
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <main+0x656>
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	69 f7       	brne	.-38     	; 0x1190 <main+0x64a>
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <main+0x69a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ba:	78 85       	ldd	r23, Y+8	; 0x08
    11bc:	89 85       	ldd	r24, Y+9	; 0x09
    11be:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <main+0x692>
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					LCD_clearScreen();
    11e0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
					g_order = enterPass;
    11e4:	10 92 a5 01 	sts	0x01A5, r1
				}
				LCD_clearScreen();
    11e8:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
    11ec:	45 cd       	rjmp	.-1398   	; 0xc78 <main+0x132>
			 * the code will go to this step in step the user entered wrong password for 3 times
			 * and turn on the buzzer for 60 seconds
			 * and display warning message
			 */
		case wrongPassword:
			wrong_Passwords();
    11ee:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <wrong_Passwords>
			g_order=displayMenu;
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	80 93 a5 01 	sts	0x01A5, r24
    11f8:	3f cd       	rjmp	.-1410   	; 0xc78 <main+0x132>

000011fa <timer_decrement_counter>:
/***************************************************
 * Description : count time for call back
 * Argument    : None
 * Returns     : None
 ***************************************************/
void timer_decrement_counter(void) {
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
	/*increases the global tick each time the timer interrupt*/
	g_timer_tick++;
    1202:	80 91 82 01 	lds	r24, 0x0182
    1206:	90 91 83 01 	lds	r25, 0x0183
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	90 93 83 01 	sts	0x0183, r25
    1210:	80 93 82 01 	sts	0x0182, r24
}
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <timer>:

void timer(uint8 volatile g_seconds_required) {
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	2b 97       	sbiw	r28, 0x0b	; 11
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	8e 83       	std	Y+6, r24	; 0x06
	TIMER_config timer_config ={timer0,t_clk1024,normal,0};
    1230:	ce 01       	movw	r24, r28
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	98 87       	std	Y+8, r25	; 0x08
    1236:	8f 83       	std	Y+7, r24	; 0x07
    1238:	ec e7       	ldi	r30, 0x7C	; 124
    123a:	f1 e0       	ldi	r31, 0x01	; 1
    123c:	fa 87       	std	Y+10, r31	; 0x0a
    123e:	e9 87       	std	Y+9, r30	; 0x09
    1240:	f5 e0       	ldi	r31, 0x05	; 5
    1242:	fb 87       	std	Y+11, r31	; 0x0b
    1244:	e9 85       	ldd	r30, Y+9	; 0x09
    1246:	fa 85       	ldd	r31, Y+10	; 0x0a
    1248:	00 80       	ld	r0, Z
    124a:	89 85       	ldd	r24, Y+9	; 0x09
    124c:	9a 85       	ldd	r25, Y+10	; 0x0a
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	9a 87       	std	Y+10, r25	; 0x0a
    1252:	89 87       	std	Y+9, r24	; 0x09
    1254:	ef 81       	ldd	r30, Y+7	; 0x07
    1256:	f8 85       	ldd	r31, Y+8	; 0x08
    1258:	00 82       	st	Z, r0
    125a:	8f 81       	ldd	r24, Y+7	; 0x07
    125c:	98 85       	ldd	r25, Y+8	; 0x08
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	98 87       	std	Y+8, r25	; 0x08
    1262:	8f 83       	std	Y+7, r24	; 0x07
    1264:	9b 85       	ldd	r25, Y+11	; 0x0b
    1266:	91 50       	subi	r25, 0x01	; 1
    1268:	9b 87       	std	Y+11, r25	; 0x0b
    126a:	eb 85       	ldd	r30, Y+11	; 0x0b
    126c:	ee 23       	and	r30, r30
    126e:	51 f7       	brne	.-44     	; 0x1244 <timer+0x2a>
	Timer_init(&timer_config);
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	0e 94 07 19 	call	0x320e	; 0x320e <Timer_init>
	Timer_setCallBack(timer0,timer_decrement_counter);
    1278:	2d ef       	ldi	r18, 0xFD	; 253
    127a:	38 e0       	ldi	r19, 0x08	; 8
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	b9 01       	movw	r22, r18
    1280:	0e 94 86 1a 	call	0x350c	; 0x350c <Timer_setCallBack>
	while (g_timer_tick != ((NUMBER_OF_OVERFLOWS_PER_SECOND) * g_seconds_required));
    1284:	8e 81       	ldd	r24, Y+6	; 0x06
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	82 95       	swap	r24
    1290:	92 95       	swap	r25
    1292:	90 7f       	andi	r25, 0xF0	; 240
    1294:	98 27       	eor	r25, r24
    1296:	80 7f       	andi	r24, 0xF0	; 240
    1298:	98 27       	eor	r25, r24
    129a:	9c 01       	movw	r18, r24
    129c:	80 91 82 01 	lds	r24, 0x0182
    12a0:	90 91 83 01 	lds	r25, 0x0183
    12a4:	28 17       	cp	r18, r24
    12a6:	39 07       	cpc	r19, r25
    12a8:	69 f7       	brne	.-38     	; 0x1284 <timer+0x6a>
	Timer_deInit(timer0);
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	0e 94 2f 1a 	call	0x345e	; 0x345e <Timer_deInit>
	g_timer_tick = 0;
    12b0:	10 92 83 01 	sts	0x0183, r1
    12b4:	10 92 82 01 	sts	0x0182, r1
}
    12b8:	2b 96       	adiw	r28, 0x0b	; 11
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <Enter_Password>:
/***************************************************
 * Description : Ask the user to enter the pass and confirm it
 * Argument    : None
 * Returns     : None
 ***************************************************/
void Enter_Password(void) {
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	6c 97       	sbiw	r28, 0x1c	; 28
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
	/*receive the first password from the keypad and store at array*/
	LCD_displayString("Enter Password");
    12e2:	8c eb       	ldi	r24, 0xBC	; 188
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
	LCD_moveCursor(1, 4);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	64 e0       	ldi	r22, 0x04	; 4
    12ee:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
	for (i = 0; i < 5; i++) {
    12f2:	10 92 a1 01 	sts	0x01A1, r1
    12f6:	98 c0       	rjmp	.+304    	; 0x1428 <Enter_Password+0x15e>
		pass[i] = KEYPAD_getPressedKey();
    12f8:	80 91 a1 01 	lds	r24, 0x01A1
    12fc:	08 2f       	mov	r16, r24
    12fe:	10 e0       	ldi	r17, 0x00	; 0
    1300:	0e 94 b2 11 	call	0x2364	; 0x2364 <KEYPAD_getPressedKey>
    1304:	f8 01       	movw	r30, r16
    1306:	ea 56       	subi	r30, 0x6A	; 106
    1308:	fe 4f       	sbci	r31, 0xFE	; 254
    130a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    130c:	8a e2       	ldi	r24, 0x2A	; 42
    130e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayCharacter>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	aa ef       	ldi	r26, 0xFA	; 250
    1318:	b3 e4       	ldi	r27, 0x43	; 67
    131a:	89 8f       	std	Y+25, r24	; 0x19
    131c:	9a 8f       	std	Y+26, r25	; 0x1a
    131e:	ab 8f       	std	Y+27, r26	; 0x1b
    1320:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1322:	69 8d       	ldd	r22, Y+25	; 0x19
    1324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4a ef       	ldi	r20, 0xFA	; 250
    1330:	54 e4       	ldi	r21, 0x44	; 68
    1332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	8d 8b       	std	Y+21, r24	; 0x15
    133c:	9e 8b       	std	Y+22, r25	; 0x16
    133e:	af 8b       	std	Y+23, r26	; 0x17
    1340:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1342:	6d 89       	ldd	r22, Y+21	; 0x15
    1344:	7e 89       	ldd	r23, Y+22	; 0x16
    1346:	8f 89       	ldd	r24, Y+23	; 0x17
    1348:	98 8d       	ldd	r25, Y+24	; 0x18
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e8       	ldi	r20, 0x80	; 128
    1350:	5f e3       	ldi	r21, 0x3F	; 63
    1352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1356:	88 23       	and	r24, r24
    1358:	2c f4       	brge	.+10     	; 0x1364 <Enter_Password+0x9a>
		__ticks = 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9c 8b       	std	Y+20, r25	; 0x14
    1360:	8b 8b       	std	Y+19, r24	; 0x13
    1362:	3f c0       	rjmp	.+126    	; 0x13e2 <Enter_Password+0x118>
	else if (__tmp > 65535)
    1364:	6d 89       	ldd	r22, Y+21	; 0x15
    1366:	7e 89       	ldd	r23, Y+22	; 0x16
    1368:	8f 89       	ldd	r24, Y+23	; 0x17
    136a:	98 8d       	ldd	r25, Y+24	; 0x18
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	3f ef       	ldi	r19, 0xFF	; 255
    1370:	4f e7       	ldi	r20, 0x7F	; 127
    1372:	57 e4       	ldi	r21, 0x47	; 71
    1374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1378:	18 16       	cp	r1, r24
    137a:	4c f5       	brge	.+82     	; 0x13ce <Enter_Password+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137c:	69 8d       	ldd	r22, Y+25	; 0x19
    137e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1380:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1382:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e2       	ldi	r20, 0x20	; 32
    138a:	51 e4       	ldi	r21, 0x41	; 65
    138c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9c 8b       	std	Y+20, r25	; 0x14
    13a2:	8b 8b       	std	Y+19, r24	; 0x13
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <Enter_Password+0xfa>
    13a6:	88 ec       	ldi	r24, 0xC8	; 200
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9a 8b       	std	Y+18, r25	; 0x12
    13ac:	89 8b       	std	Y+17, r24	; 0x11
    13ae:	89 89       	ldd	r24, Y+17	; 0x11
    13b0:	9a 89       	ldd	r25, Y+18	; 0x12
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <Enter_Password+0xe8>
    13b6:	9a 8b       	std	Y+18, r25	; 0x12
    13b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ba:	8b 89       	ldd	r24, Y+19	; 0x13
    13bc:	9c 89       	ldd	r25, Y+20	; 0x14
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	9c 8b       	std	Y+20, r25	; 0x14
    13c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c4:	8b 89       	ldd	r24, Y+19	; 0x13
    13c6:	9c 89       	ldd	r25, Y+20	; 0x14
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	69 f7       	brne	.-38     	; 0x13a6 <Enter_Password+0xdc>
    13cc:	14 c0       	rjmp	.+40     	; 0x13f6 <Enter_Password+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ce:	6d 89       	ldd	r22, Y+21	; 0x15
    13d0:	7e 89       	ldd	r23, Y+22	; 0x16
    13d2:	8f 89       	ldd	r24, Y+23	; 0x17
    13d4:	98 8d       	ldd	r25, Y+24	; 0x18
    13d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	9c 8b       	std	Y+20, r25	; 0x14
    13e0:	8b 8b       	std	Y+19, r24	; 0x13
    13e2:	8b 89       	ldd	r24, Y+19	; 0x13
    13e4:	9c 89       	ldd	r25, Y+20	; 0x14
    13e6:	98 8b       	std	Y+16, r25	; 0x10
    13e8:	8f 87       	std	Y+15, r24	; 0x0f
    13ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ec:	98 89       	ldd	r25, Y+16	; 0x10
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <Enter_Password+0x124>
    13f2:	98 8b       	std	Y+16, r25	; 0x10
    13f4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		/*if we press on ON/C key it clear the pass that entered and would start again from 0*/
		if (pass[i] == 13) {
    13f6:	80 91 a1 01 	lds	r24, 0x01A1
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	fc 01       	movw	r30, r24
    1400:	ea 56       	subi	r30, 0x6A	; 106
    1402:	fe 4f       	sbci	r31, 0xFE	; 254
    1404:	80 81       	ld	r24, Z
    1406:	8d 30       	cpi	r24, 0x0D	; 13
    1408:	51 f4       	brne	.+20     	; 0x141e <Enter_Password+0x154>
			/*clear the screen */
			LCD_clearScreen();
    140a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			/*enter the new password */
			LCD_displayString("Enter new password");
    140e:	8b ec       	ldi	r24, 0xCB	; 203
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
			LCD_moveCursor(0, 0);
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
 ***************************************************/
void Enter_Password(void) {
	/*receive the first password from the keypad and store at array*/
	LCD_displayString("Enter Password");
	LCD_moveCursor(1, 4);
	for (i = 0; i < 5; i++) {
    141e:	80 91 a1 01 	lds	r24, 0x01A1
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	80 93 a1 01 	sts	0x01A1, r24
    1428:	80 91 a1 01 	lds	r24, 0x01A1
    142c:	85 30       	cpi	r24, 0x05	; 5
    142e:	08 f4       	brcc	.+2      	; 0x1432 <Enter_Password+0x168>
    1430:	63 cf       	rjmp	.-314    	; 0x12f8 <Enter_Password+0x2e>
			LCD_moveCursor(0, 0);

		}
	}
	/*Enter the second password from the keypad and store at array */
	LCD_clearScreen();
    1432:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
	LCD_displayString("Re-Enter Pass");
    1436:	8e ed       	ldi	r24, 0xDE	; 222
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
	LCD_moveCursor(1, 4);
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	64 e0       	ldi	r22, 0x04	; 4
    1442:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
	for (i = 0; i < 5; i++) {
    1446:	10 92 a1 01 	sts	0x01A1, r1
    144a:	98 c0       	rjmp	.+304    	; 0x157c <Enter_Password+0x2b2>
		confirmPass[i] = KEYPAD_getPressedKey();
    144c:	80 91 a1 01 	lds	r24, 0x01A1
    1450:	08 2f       	mov	r16, r24
    1452:	10 e0       	ldi	r17, 0x00	; 0
    1454:	0e 94 b2 11 	call	0x2364	; 0x2364 <KEYPAD_getPressedKey>
    1458:	f8 01       	movw	r30, r16
    145a:	e4 56       	subi	r30, 0x64	; 100
    145c:	fe 4f       	sbci	r31, 0xFE	; 254
    145e:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1460:	8a e2       	ldi	r24, 0x2A	; 42
    1462:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayCharacter>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	aa ef       	ldi	r26, 0xFA	; 250
    146c:	b3 e4       	ldi	r27, 0x43	; 67
    146e:	8b 87       	std	Y+11, r24	; 0x0b
    1470:	9c 87       	std	Y+12, r25	; 0x0c
    1472:	ad 87       	std	Y+13, r26	; 0x0d
    1474:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1476:	6b 85       	ldd	r22, Y+11	; 0x0b
    1478:	7c 85       	ldd	r23, Y+12	; 0x0c
    147a:	8d 85       	ldd	r24, Y+13	; 0x0d
    147c:	9e 85       	ldd	r25, Y+14	; 0x0e
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	4a ef       	ldi	r20, 0xFA	; 250
    1484:	54 e4       	ldi	r21, 0x44	; 68
    1486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8f 83       	std	Y+7, r24	; 0x07
    1490:	98 87       	std	Y+8, r25	; 0x08
    1492:	a9 87       	std	Y+9, r26	; 0x09
    1494:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1496:	6f 81       	ldd	r22, Y+7	; 0x07
    1498:	78 85       	ldd	r23, Y+8	; 0x08
    149a:	89 85       	ldd	r24, Y+9	; 0x09
    149c:	9a 85       	ldd	r25, Y+10	; 0x0a
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	5f e3       	ldi	r21, 0x3F	; 63
    14a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14aa:	88 23       	and	r24, r24
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <Enter_Password+0x1ee>
		__ticks = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9e 83       	std	Y+6, r25	; 0x06
    14b4:	8d 83       	std	Y+5, r24	; 0x05
    14b6:	3f c0       	rjmp	.+126    	; 0x1536 <Enter_Password+0x26c>
	else if (__tmp > 65535)
    14b8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ba:	78 85       	ldd	r23, Y+8	; 0x08
    14bc:	89 85       	ldd	r24, Y+9	; 0x09
    14be:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	3f ef       	ldi	r19, 0xFF	; 255
    14c4:	4f e7       	ldi	r20, 0x7F	; 127
    14c6:	57 e4       	ldi	r21, 0x47	; 71
    14c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	4c f5       	brge	.+82     	; 0x1522 <Enter_Password+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e2       	ldi	r20, 0x20	; 32
    14de:	51 e4       	ldi	r21, 0x41	; 65
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	9e 83       	std	Y+6, r25	; 0x06
    14f6:	8d 83       	std	Y+5, r24	; 0x05
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <Enter_Password+0x24e>
    14fa:	88 ec       	ldi	r24, 0xC8	; 200
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9c 83       	std	Y+4, r25	; 0x04
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	9c 81       	ldd	r25, Y+4	; 0x04
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <Enter_Password+0x23c>
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	69 f7       	brne	.-38     	; 0x14fa <Enter_Password+0x230>
    1520:	14 c0       	rjmp	.+40     	; 0x154a <Enter_Password+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1522:	6f 81       	ldd	r22, Y+7	; 0x07
    1524:	78 85       	ldd	r23, Y+8	; 0x08
    1526:	89 85       	ldd	r24, Y+9	; 0x09
    1528:	9a 85       	ldd	r25, Y+10	; 0x0a
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <Enter_Password+0x278>
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		/*if we press on ON/C key it clear the pass that entered and would start again from 0*/
		if (confirmPass[i] == 13) {
    154a:	80 91 a1 01 	lds	r24, 0x01A1
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	fc 01       	movw	r30, r24
    1554:	e4 56       	subi	r30, 0x64	; 100
    1556:	fe 4f       	sbci	r31, 0xFE	; 254
    1558:	80 81       	ld	r24, Z
    155a:	8d 30       	cpi	r24, 0x0D	; 13
    155c:	51 f4       	brne	.+20     	; 0x1572 <Enter_Password+0x2a8>
			/*clear the screen */
			LCD_clearScreen();
    155e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			/*enter the new password */
			LCD_displayString("Enter new password");
    1562:	8b ec       	ldi	r24, 0xCB	; 203
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
			LCD_moveCursor(2, 0);
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
	}
	/*Enter the second password from the keypad and store at array */
	LCD_clearScreen();
	LCD_displayString("Re-Enter Pass");
	LCD_moveCursor(1, 4);
	for (i = 0; i < 5; i++) {
    1572:	80 91 a1 01 	lds	r24, 0x01A1
    1576:	8f 5f       	subi	r24, 0xFF	; 255
    1578:	80 93 a1 01 	sts	0x01A1, r24
    157c:	80 91 a1 01 	lds	r24, 0x01A1
    1580:	85 30       	cpi	r24, 0x05	; 5
    1582:	08 f4       	brcc	.+2      	; 0x1586 <Enter_Password+0x2bc>
    1584:	63 cf       	rjmp	.-314    	; 0x144c <Enter_Password+0x182>
			LCD_moveCursor(2, 0);

		}
	}
	/*calling the function to compare between two passwords */
	check_matchedPass();
    1586:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <check_matchedPass>
}
    158a:	6c 96       	adiw	r28, 0x1c	; 28
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <check_matchedPass>:
 * Description : check if the 2 pass matched or not
 * Argument    : None
 * Returns     : None
 ***************************************************/

void check_matchedPass() {
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	for (i = 0; i < 5; i++) {
    15a8:	10 92 a1 01 	sts	0x01A1, r1
    15ac:	20 c0       	rjmp	.+64     	; 0x15ee <check_matchedPass+0x4e>
		if (pass[i] != confirmPass[i]) {
    15ae:	80 91 a1 01 	lds	r24, 0x01A1
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	fc 01       	movw	r30, r24
    15b8:	ea 56       	subi	r30, 0x6A	; 106
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	20 81       	ld	r18, Z
    15be:	80 91 a1 01 	lds	r24, 0x01A1
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	fc 01       	movw	r30, r24
    15c8:	e4 56       	subi	r30, 0x64	; 100
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	80 81       	ld	r24, Z
    15ce:	28 17       	cp	r18, r24
    15d0:	49 f0       	breq	.+18     	; 0x15e4 <check_matchedPass+0x44>
			LCD_clearScreen();
    15d2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
			checking_value = wrongPass;
    15de:	10 92 9b 01 	sts	0x019B, r1
    15e2:	09 c0       	rjmp	.+18     	; 0x15f6 <check_matchedPass+0x56>
 * Argument    : None
 * Returns     : None
 ***************************************************/

void check_matchedPass() {
	for (i = 0; i < 5; i++) {
    15e4:	80 91 a1 01 	lds	r24, 0x01A1
    15e8:	8f 5f       	subi	r24, 0xFF	; 255
    15ea:	80 93 a1 01 	sts	0x01A1, r24
    15ee:	80 91 a1 01 	lds	r24, 0x01A1
    15f2:	85 30       	cpi	r24, 0x05	; 5
    15f4:	e0 f2       	brcs	.-72     	; 0x15ae <check_matchedPass+0xe>
			LCD_moveCursor(0,0);
			checking_value = wrongPass;
			break;
		}
	}
	if(i==5){
    15f6:	80 91 a1 01 	lds	r24, 0x01A1
    15fa:	85 30       	cpi	r24, 0x05	; 5
    15fc:	19 f4       	brne	.+6      	; 0x1604 <check_matchedPass+0x64>
		checking_value = correctPass;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 93 9b 01 	sts	0x019B, r24
	}
}
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <send_Pass_ToMcu2>:
/***************************************************
 * Description : send pass to Control_ECU by UART
 * Argument    : None
 * Returns     : None
 ***************************************************/
void send_Pass_ToMcu2(void){
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
	//	LCD_displayString("Press=to send password");
	if (KEYPAD_getPressedKey() == '=') {
    1612:	0e 94 b2 11 	call	0x2364	; 0x2364 <KEYPAD_getPressedKey>
    1616:	8d 33       	cpi	r24, 0x3D	; 61
    1618:	b1 f4       	brne	.+44     	; 0x1646 <send_Pass_ToMcu2+0x3c>
		for (i = 0; i < 5; i++) {
    161a:	10 92 a1 01 	sts	0x01A1, r1
    161e:	0f c0       	rjmp	.+30     	; 0x163e <send_Pass_ToMcu2+0x34>
			UART_sendByte(pass[i]);
    1620:	80 91 a1 01 	lds	r24, 0x01A1
    1624:	88 2f       	mov	r24, r24
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	fc 01       	movw	r30, r24
    162a:	ea 56       	subi	r30, 0x6A	; 106
    162c:	fe 4f       	sbci	r31, 0xFE	; 254
    162e:	80 81       	ld	r24, Z
    1630:	0e 94 1e 1b 	call	0x363c	; 0x363c <UART_sendByte>
 * Returns     : None
 ***************************************************/
void send_Pass_ToMcu2(void){
	//	LCD_displayString("Press=to send password");
	if (KEYPAD_getPressedKey() == '=') {
		for (i = 0; i < 5; i++) {
    1634:	80 91 a1 01 	lds	r24, 0x01A1
    1638:	8f 5f       	subi	r24, 0xFF	; 255
    163a:	80 93 a1 01 	sts	0x01A1, r24
    163e:	80 91 a1 01 	lds	r24, 0x01A1
    1642:	85 30       	cpi	r24, 0x05	; 5
    1644:	68 f3       	brcs	.-38     	; 0x1620 <send_Pass_ToMcu2+0x16>
			UART_sendByte(pass[i]);
		}
	}

}
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <options_menu>:
 * 				+ -> open door
 * 				- -> change pass
 * Argument    : None
 * Returns     : None
 ***************************************************/
void options_menu(void) {
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	2e 97       	sbiw	r28, 0x0e	; 14
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61

	/*repeats until the user choose one of two options */
	do {
		selected_option = KEYPAD_getPressedKey();
    1660:	0e 94 b2 11 	call	0x2364	; 0x2364 <KEYPAD_getPressedKey>
    1664:	80 93 a2 01 	sts	0x01A2, r24
	} while ((selected_option != '+') && (selected_option != '-'));
    1668:	80 91 a2 01 	lds	r24, 0x01A2
    166c:	8b 32       	cpi	r24, 0x2B	; 43
    166e:	21 f0       	breq	.+8      	; 0x1678 <options_menu+0x2c>
    1670:	80 91 a2 01 	lds	r24, 0x01A2
    1674:	8d 32       	cpi	r24, 0x2D	; 45
    1676:	a1 f7       	brne	.-24     	; 0x1660 <options_menu+0x14>

	/*sends to MCU2 the option which the user chose*/
	UART_sendByte(selected_option);
    1678:	80 91 a2 01 	lds	r24, 0x01A2
    167c:	0e 94 1e 1b 	call	0x363c	; 0x363c <UART_sendByte>
	LCD_clearScreen();
    1680:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	aa ef       	ldi	r26, 0xFA	; 250
    168a:	b3 e4       	ldi	r27, 0x43	; 67
    168c:	8b 87       	std	Y+11, r24	; 0x0b
    168e:	9c 87       	std	Y+12, r25	; 0x0c
    1690:	ad 87       	std	Y+13, r26	; 0x0d
    1692:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1694:	6b 85       	ldd	r22, Y+11	; 0x0b
    1696:	7c 85       	ldd	r23, Y+12	; 0x0c
    1698:	8d 85       	ldd	r24, Y+13	; 0x0d
    169a:	9e 85       	ldd	r25, Y+14	; 0x0e
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	4a ef       	ldi	r20, 0xFA	; 250
    16a2:	54 e4       	ldi	r21, 0x44	; 68
    16a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8f 83       	std	Y+7, r24	; 0x07
    16ae:	98 87       	std	Y+8, r25	; 0x08
    16b0:	a9 87       	std	Y+9, r26	; 0x09
    16b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <options_menu+0x8a>
		__ticks = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	3f c0       	rjmp	.+126    	; 0x1754 <options_menu+0x108>
	else if (__tmp > 65535)
    16d6:	6f 81       	ldd	r22, Y+7	; 0x07
    16d8:	78 85       	ldd	r23, Y+8	; 0x08
    16da:	89 85       	ldd	r24, Y+9	; 0x09
    16dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	4f e7       	ldi	r20, 0x7F	; 127
    16e4:	57 e4       	ldi	r21, 0x47	; 71
    16e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	4c f5       	brge	.+82     	; 0x1740 <options_menu+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	51 e4       	ldi	r21, 0x41	; 65
    16fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9e 83       	std	Y+6, r25	; 0x06
    1714:	8d 83       	std	Y+5, r24	; 0x05
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <options_menu+0xea>
    1718:	88 ec       	ldi	r24, 0xC8	; 200
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <options_menu+0xd8>
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f7       	brne	.-38     	; 0x1718 <options_menu+0xcc>
    173e:	14 c0       	rjmp	.+40     	; 0x1768 <options_menu+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1740:	6f 81       	ldd	r22, Y+7	; 0x07
    1742:	78 85       	ldd	r23, Y+8	; 0x08
    1744:	89 85       	ldd	r24, Y+9	; 0x09
    1746:	9a 85       	ldd	r25, Y+10	; 0x0a
    1748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <options_menu+0x114>
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);
	/*decide where we need the code run */
	if (selected_option == '+') {
    1768:	80 91 a2 01 	lds	r24, 0x01A2
    176c:	8b 32       	cpi	r24, 0x2B	; 43
    176e:	21 f4       	brne	.+8      	; 0x1778 <options_menu+0x12c>
		g_order = doorState;
    1770:	83 e0       	ldi	r24, 0x03	; 3
    1772:	80 93 a5 01 	sts	0x01A5, r24
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <options_menu+0x13a>
	} else if (selected_option == '-') {
    1778:	80 91 a2 01 	lds	r24, 0x01A2
    177c:	8d 32       	cpi	r24, 0x2D	; 45
    177e:	19 f4       	brne	.+6      	; 0x1786 <options_menu+0x13a>
		g_order = changePass;
    1780:	84 e0       	ldi	r24, 0x04	; 4
    1782:	80 93 a5 01 	sts	0x01A5, r24
	}

}
    1786:	2e 96       	adiw	r28, 0x0e	; 14
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <enter_saved_pass>:
 * Description : store entered pass from keypad to an array
 * Argument    : None
 * Returns     : None
 ***************************************************/

void enter_saved_pass(void) {
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	2e 97       	sbiw	r28, 0x0e	; 14
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
	for (i = 0; i < 5; i++) {
    17b0:	10 92 a1 01 	sts	0x01A1, r1
    17b4:	9a c0       	rjmp	.+308    	; 0x18ea <enter_saved_pass+0x152>
		pass[i] = KEYPAD_getPressedKey();
    17b6:	80 91 a1 01 	lds	r24, 0x01A1
    17ba:	08 2f       	mov	r16, r24
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	0e 94 b2 11 	call	0x2364	; 0x2364 <KEYPAD_getPressedKey>
    17c2:	f8 01       	movw	r30, r16
    17c4:	ea 56       	subi	r30, 0x6A	; 106
    17c6:	fe 4f       	sbci	r31, 0xFE	; 254
    17c8:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    17ca:	8a e2       	ldi	r24, 0x2A	; 42
    17cc:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayCharacter>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	aa ef       	ldi	r26, 0xFA	; 250
    17d6:	b3 e4       	ldi	r27, 0x43	; 67
    17d8:	8b 87       	std	Y+11, r24	; 0x0b
    17da:	9c 87       	std	Y+12, r25	; 0x0c
    17dc:	ad 87       	std	Y+13, r26	; 0x0d
    17de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4a ef       	ldi	r20, 0xFA	; 250
    17ee:	54 e4       	ldi	r21, 0x44	; 68
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8f 83       	std	Y+7, r24	; 0x07
    17fa:	98 87       	std	Y+8, r25	; 0x08
    17fc:	a9 87       	std	Y+9, r26	; 0x09
    17fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1800:	6f 81       	ldd	r22, Y+7	; 0x07
    1802:	78 85       	ldd	r23, Y+8	; 0x08
    1804:	89 85       	ldd	r24, Y+9	; 0x09
    1806:	9a 85       	ldd	r25, Y+10	; 0x0a
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e8       	ldi	r20, 0x80	; 128
    180e:	5f e3       	ldi	r21, 0x3F	; 63
    1810:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1814:	88 23       	and	r24, r24
    1816:	2c f4       	brge	.+10     	; 0x1822 <enter_saved_pass+0x8a>
		__ticks = 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
    1820:	3f c0       	rjmp	.+126    	; 0x18a0 <enter_saved_pass+0x108>
	else if (__tmp > 65535)
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	3f ef       	ldi	r19, 0xFF	; 255
    182e:	4f e7       	ldi	r20, 0x7F	; 127
    1830:	57 e4       	ldi	r21, 0x47	; 71
    1832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1836:	18 16       	cp	r1, r24
    1838:	4c f5       	brge	.+82     	; 0x188c <enter_saved_pass+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183a:	6b 85       	ldd	r22, Y+11	; 0x0b
    183c:	7c 85       	ldd	r23, Y+12	; 0x0c
    183e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1840:	9e 85       	ldd	r25, Y+14	; 0x0e
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e2       	ldi	r20, 0x20	; 32
    1848:	51 e4       	ldi	r21, 0x41	; 65
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	bc 01       	movw	r22, r24
    1854:	cd 01       	movw	r24, r26
    1856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	9e 83       	std	Y+6, r25	; 0x06
    1860:	8d 83       	std	Y+5, r24	; 0x05
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <enter_saved_pass+0xea>
    1864:	88 ec       	ldi	r24, 0xC8	; 200
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9c 83       	std	Y+4, r25	; 0x04
    186a:	8b 83       	std	Y+3, r24	; 0x03
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <enter_saved_pass+0xd8>
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	69 f7       	brne	.-38     	; 0x1864 <enter_saved_pass+0xcc>
    188a:	14 c0       	rjmp	.+40     	; 0x18b4 <enter_saved_pass+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188c:	6f 81       	ldd	r22, Y+7	; 0x07
    188e:	78 85       	ldd	r23, Y+8	; 0x08
    1890:	89 85       	ldd	r24, Y+9	; 0x09
    1892:	9a 85       	ldd	r25, Y+10	; 0x0a
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	9e 83       	std	Y+6, r25	; 0x06
    189e:	8d 83       	std	Y+5, r24	; 0x05
    18a0:	8d 81       	ldd	r24, Y+5	; 0x05
    18a2:	9e 81       	ldd	r25, Y+6	; 0x06
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <enter_saved_pass+0x114>
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		/*if we press on ON/C key it clear the pass that entered and would start again from 0*/
		if (pass[i] == 13) {
    18b4:	80 91 a1 01 	lds	r24, 0x01A1
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	fc 01       	movw	r30, r24
    18be:	ea 56       	subi	r30, 0x6A	; 106
    18c0:	fe 4f       	sbci	r31, 0xFE	; 254
    18c2:	80 81       	ld	r24, Z
    18c4:	8d 30       	cpi	r24, 0x0D	; 13
    18c6:	61 f4       	brne	.+24     	; 0x18e0 <enter_saved_pass+0x148>
			/*clear the screen */
			LCD_clearScreen();
    18c8:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
			/*enter the new password */
			LCD_displayString("Enter new password");
    18cc:	8b ec       	ldi	r24, 0xCB	; 203
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
			LCD_moveCursor(0, 0);
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
			i = 0;
    18dc:	10 92 a1 01 	sts	0x01A1, r1
 * Argument    : None
 * Returns     : None
 ***************************************************/

void enter_saved_pass(void) {
	for (i = 0; i < 5; i++) {
    18e0:	80 91 a1 01 	lds	r24, 0x01A1
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	80 93 a1 01 	sts	0x01A1, r24
    18ea:	80 91 a1 01 	lds	r24, 0x01A1
    18ee:	85 30       	cpi	r24, 0x05	; 5
    18f0:	08 f4       	brcc	.+2      	; 0x18f4 <enter_saved_pass+0x15c>
    18f2:	61 cf       	rjmp	.-318    	; 0x17b6 <enter_saved_pass+0x1e>
			LCD_moveCursor(0, 0);
			i = 0;
		}
	}

}
    18f4:	2e 96       	adiw	r28, 0x0e	; 14
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	08 95       	ret

0000190a <display_optionsMenu>:
 * 				+ -> open door
 * 				- -> change pass
 * Argument    : None
 * Returns     : None
 ***************************************************/
void display_optionsMenu(void) {
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1912:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
	LCD_displayString("+: Open door ");
    191e:	8c ee       	ldi	r24, 0xEC	; 236
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
	LCD_displayString("-: Change Pass");
    192e:	8a ef       	ldi	r24, 0xFA	; 250
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
	options_menu();
    1936:	0e 94 26 0b 	call	0x164c	; 0x164c <options_menu>
}
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <check_Pass>:
/***************************************************
 * Description : check if the received pass is correct or not
 * Argument    : check password
 * Returns     : None
 ***************************************************/
void check_Pass(uint8 check_password) {
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	6d 97       	sbiw	r28, 0x1d	; 29
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	8d 8f       	std	Y+29, r24	; 0x1d
	/*In this case if the password unmatched
	 *so display on the screen unmatched
	 *and receive from the MCU2  the step that will go to
	 */
	if (check_password == 0) {
    1956:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1958:	88 23       	and	r24, r24
    195a:	09 f0       	breq	.+2      	; 0x195e <check_Pass+0x1e>
    195c:	7f c0       	rjmp	.+254    	; 0x1a5c <check_Pass+0x11c>
		LCD_displayString("Wrong Password");
    195e:	89 e0       	ldi	r24, 0x09	; 9
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e6       	ldi	r25, 0x60	; 96
    196a:	aa e6       	ldi	r26, 0x6A	; 106
    196c:	b7 e4       	ldi	r27, 0x47	; 71
    196e:	89 8f       	std	Y+25, r24	; 0x19
    1970:	9a 8f       	std	Y+26, r25	; 0x1a
    1972:	ab 8f       	std	Y+27, r26	; 0x1b
    1974:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	69 8d       	ldd	r22, Y+25	; 0x19
    1978:	7a 8d       	ldd	r23, Y+26	; 0x1a
    197a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    197c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a ef       	ldi	r20, 0xFA	; 250
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8d 8b       	std	Y+21, r24	; 0x15
    1990:	9e 8b       	std	Y+22, r25	; 0x16
    1992:	af 8b       	std	Y+23, r26	; 0x17
    1994:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1996:	6d 89       	ldd	r22, Y+21	; 0x15
    1998:	7e 89       	ldd	r23, Y+22	; 0x16
    199a:	8f 89       	ldd	r24, Y+23	; 0x17
    199c:	98 8d       	ldd	r25, Y+24	; 0x18
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <check_Pass+0x78>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9c 8b       	std	Y+20, r25	; 0x14
    19b4:	8b 8b       	std	Y+19, r24	; 0x13
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <check_Pass+0xf6>
	else if (__tmp > 65535)
    19b8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ba:	7e 89       	ldd	r23, Y+22	; 0x16
    19bc:	8f 89       	ldd	r24, Y+23	; 0x17
    19be:	98 8d       	ldd	r25, Y+24	; 0x18
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	4c f5       	brge	.+82     	; 0x1a22 <check_Pass+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	69 8d       	ldd	r22, Y+25	; 0x19
    19d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9c 8b       	std	Y+20, r25	; 0x14
    19f6:	8b 8b       	std	Y+19, r24	; 0x13
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <check_Pass+0xd8>
    19fa:	88 ec       	ldi	r24, 0xC8	; 200
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9a 8b       	std	Y+18, r25	; 0x12
    1a00:	89 8b       	std	Y+17, r24	; 0x11
    1a02:	89 89       	ldd	r24, Y+17	; 0x11
    1a04:	9a 89       	ldd	r25, Y+18	; 0x12
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <check_Pass+0xc6>
    1a0a:	9a 8b       	std	Y+18, r25	; 0x12
    1a0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	9c 8b       	std	Y+20, r25	; 0x14
    1a16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a18:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <check_Pass+0xba>
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <check_Pass+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	6d 89       	ldd	r22, Y+21	; 0x15
    1a24:	7e 89       	ldd	r23, Y+22	; 0x16
    1a26:	8f 89       	ldd	r24, Y+23	; 0x17
    1a28:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9c 8b       	std	Y+20, r25	; 0x14
    1a34:	8b 8b       	std	Y+19, r24	; 0x13
    1a36:	8b 89       	ldd	r24, Y+19	; 0x13
    1a38:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3a:	98 8b       	std	Y+16, r25	; 0x10
    1a3c:	8f 87       	std	Y+15, r24	; 0x0f
    1a3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a40:	98 89       	ldd	r25, Y+16	; 0x10
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <check_Pass+0x102>
    1a46:	98 8b       	std	Y+16, r25	; 0x10
    1a48:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(60000);
		LCD_clearScreen();
    1a4a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
		g_order = UART_recieveByte();
    1a4e:	0e 94 35 1b 	call	0x366a	; 0x366a <UART_recieveByte>
    1a52:	80 93 a5 01 	sts	0x01A5, r24
		do_case=wrongPass;
    1a56:	10 92 a4 01 	sts	0x01A4, r1
    1a5a:	7f c0       	rjmp	.+254    	; 0x1b5a <check_Pass+0x21a>
	 * So display on the screen Matched password
	 * and open the door and turn on the DC_motor and rotate clock wise for 15 seconds
	 * and display (The door is opening) while the DC_motor is rotating
	 *
	 */
	else if (check_password == 1) {
    1a5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <check_Pass+0x124>
    1a62:	7b c0       	rjmp	.+246    	; 0x1b5a <check_Pass+0x21a>
		LCD_displayString("correct Password");
    1a64:	88 e1       	ldi	r24, 0x18	; 24
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	aa e7       	ldi	r26, 0x7A	; 122
    1a72:	b4 e4       	ldi	r27, 0x44	; 68
    1a74:	8b 87       	std	Y+11, r24	; 0x0b
    1a76:	9c 87       	std	Y+12, r25	; 0x0c
    1a78:	ad 87       	std	Y+13, r26	; 0x0d
    1a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	4a ef       	ldi	r20, 0xFA	; 250
    1a8a:	54 e4       	ldi	r21, 0x44	; 68
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	8f 83       	std	Y+7, r24	; 0x07
    1a96:	98 87       	std	Y+8, r25	; 0x08
    1a98:	a9 87       	std	Y+9, r26	; 0x09
    1a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e8       	ldi	r20, 0x80	; 128
    1aaa:	5f e3       	ldi	r21, 0x3F	; 63
    1aac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab0:	88 23       	and	r24, r24
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <check_Pass+0x17e>
		__ticks = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	3f c0       	rjmp	.+126    	; 0x1b3c <check_Pass+0x1fc>
	else if (__tmp > 65535)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	4c f5       	brge	.+82     	; 0x1b28 <check_Pass+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	0f c0       	rjmp	.+30     	; 0x1b1e <check_Pass+0x1de>
    1b00:	88 ec       	ldi	r24, 0xC8	; 200
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9c 83       	std	Y+4, r25	; 0x04
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <check_Pass+0x1cc>
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <check_Pass+0x1c0>
    1b26:	14 c0       	rjmp	.+40     	; 0x1b50 <check_Pass+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <check_Pass+0x208>
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    1b50:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
		do_case=correctPass;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	80 93 a4 01 	sts	0x01A4, r24
	}
}
    1b5a:	6d 96       	adiw	r28, 0x1d	; 29
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <matched_State>:
/***************************************************
 * Description : display the state of dc motor -> opening / stop / closing
 * Argument    : None
 * Returns     : None
 ***************************************************/
void matched_State(void) {
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
	/*display on the lcd message for 15 seconds then clear the screen*/
	LCD_displayString("Opening the door");
    1b74:	89 e2       	ldi	r24, 0x29	; 41
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
	timer(15);
    1b7c:	8f e0       	ldi	r24, 0x0F	; 15
    1b7e:	0e 94 0d 09 	call	0x121a	; 0x121a <timer>
	LCD_clearScreen();
    1b82:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
	/*display on the lcd message for 3 seconds then clear the screen*/
	LCD_displayString("Door close in 3s");
    1b8e:	8a e3       	ldi	r24, 0x3A	; 58
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
	timer(3);
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	0e 94 0d 09 	call	0x121a	; 0x121a <timer>
	LCD_clearScreen();
    1b9c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
	/*display on the lcd message for 15 seconds then clear the screen*/
	LCD_displayString("Closing The door");
    1ba8:	8b e4       	ldi	r24, 0x4B	; 75
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
	timer(15);
    1bb0:	8f e0       	ldi	r24, 0x0F	; 15
    1bb2:	0e 94 0d 09 	call	0x121a	; 0x121a <timer>
	LCD_clearScreen();
    1bb6:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
}
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <wrong_Passwords>:
/***************************************************
 * Description : if the user enter wrong pass for 3 times -> activate alarming system
 * Argument    : None
 * Returns     : None
 ***************************************************/
void wrong_Passwords(void) {
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	2e 97       	sbiw	r28, 0x0e	; 14
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1bd4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
	LCD_displayString("Wrong Password!");
    1be0:	8c e5       	ldi	r24, 0x5C	; 92
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e6       	ldi	r25, 0x60	; 96
    1bec:	aa e6       	ldi	r26, 0x6A	; 106
    1bee:	b7 e4       	ldi	r27, 0x47	; 71
    1bf0:	8b 87       	std	Y+11, r24	; 0x0b
    1bf2:	9c 87       	std	Y+12, r25	; 0x0c
    1bf4:	ad 87       	std	Y+13, r26	; 0x0d
    1bf6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a ef       	ldi	r20, 0xFA	; 250
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8f 83       	std	Y+7, r24	; 0x07
    1c12:	98 87       	std	Y+8, r25	; 0x08
    1c14:	a9 87       	std	Y+9, r26	; 0x09
    1c16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c18:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1a:	78 85       	ldd	r23, Y+8	; 0x08
    1c1c:	89 85       	ldd	r24, Y+9	; 0x09
    1c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e8       	ldi	r20, 0x80	; 128
    1c26:	5f e3       	ldi	r21, 0x3F	; 63
    1c28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2c:	88 23       	and	r24, r24
    1c2e:	2c f4       	brge	.+10     	; 0x1c3a <wrong_Passwords+0x7a>
		__ticks = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
    1c38:	3f c0       	rjmp	.+126    	; 0x1cb8 <wrong_Passwords+0xf8>
	else if (__tmp > 65535)
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	57 e4       	ldi	r21, 0x47	; 71
    1c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	4c f5       	brge	.+82     	; 0x1ca4 <wrong_Passwords+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9e 83       	std	Y+6, r25	; 0x06
    1c78:	8d 83       	std	Y+5, r24	; 0x05
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <wrong_Passwords+0xda>
    1c7c:	88 ec       	ldi	r24, 0xC8	; 200
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9c 83       	std	Y+4, r25	; 0x04
    1c82:	8b 83       	std	Y+3, r24	; 0x03
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <wrong_Passwords+0xc8>
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	69 f7       	brne	.-38     	; 0x1c7c <wrong_Passwords+0xbc>
    1ca2:	14 c0       	rjmp	.+40     	; 0x1ccc <wrong_Passwords+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <wrong_Passwords+0x104>
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(60000);
	timer(30);
    1ccc:	8e e1       	ldi	r24, 0x1E	; 30
    1cce:	0e 94 0d 09 	call	0x121a	; 0x121a <timer>
	display_optionsMenu();
    1cd2:	0e 94 85 0c 	call	0x190a	; 0x190a <display_optionsMenu>
}
    1cd6:	2e 96       	adiw	r28, 0x0e	; 14
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <GPIO_setupPinDirection+0x6>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <GPIO_setupPinDirection+0x8>
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	6a 83       	std	Y+2, r22	; 0x02
    1cfa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	88 30       	cpi	r24, 0x08	; 8
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <GPIO_setupPinDirection+0x1c>
    1d02:	d5 c0       	rjmp	.+426    	; 0x1eae <GPIO_setupPinDirection+0x1c6>
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	84 30       	cpi	r24, 0x04	; 4
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <GPIO_setupPinDirection+0x24>
    1d0a:	d1 c0       	rjmp	.+418    	; 0x1eae <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3d 83       	std	Y+5, r19	; 0x05
    1d14:	2c 83       	std	Y+4, r18	; 0x04
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <GPIO_setupPinDirection+0x3a>
    1d20:	43 c0       	rjmp	.+134    	; 0x1da8 <GPIO_setupPinDirection+0xc0>
    1d22:	2c 81       	ldd	r18, Y+4	; 0x04
    1d24:	3d 81       	ldd	r19, Y+5	; 0x05
    1d26:	22 30       	cpi	r18, 0x02	; 2
    1d28:	31 05       	cpc	r19, r1
    1d2a:	2c f4       	brge	.+10     	; 0x1d36 <GPIO_setupPinDirection+0x4e>
    1d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	71 f0       	breq	.+28     	; 0x1d50 <GPIO_setupPinDirection+0x68>
    1d34:	bc c0       	rjmp	.+376    	; 0x1eae <GPIO_setupPinDirection+0x1c6>
    1d36:	2c 81       	ldd	r18, Y+4	; 0x04
    1d38:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3a:	22 30       	cpi	r18, 0x02	; 2
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <GPIO_setupPinDirection+0x5a>
    1d40:	5f c0       	rjmp	.+190    	; 0x1e00 <GPIO_setupPinDirection+0x118>
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	9d 81       	ldd	r25, Y+5	; 0x05
    1d46:	83 30       	cpi	r24, 0x03	; 3
    1d48:	91 05       	cpc	r25, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <GPIO_setupPinDirection+0x66>
    1d4c:	85 c0       	rjmp	.+266    	; 0x1e58 <GPIO_setupPinDirection+0x170>
    1d4e:	af c0       	rjmp	.+350    	; 0x1eae <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	a1 f4       	brne	.+40     	; 0x1d7e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d56:	aa e3       	ldi	r26, 0x3A	; 58
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	ea e3       	ldi	r30, 0x3A	; 58
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	48 2f       	mov	r20, r24
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <GPIO_setupPinDirection+0x8c>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <GPIO_setupPinDirection+0x88>
    1d78:	84 2b       	or	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	98 c0       	rjmp	.+304    	; 0x1eae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d7e:	aa e3       	ldi	r26, 0x3A	; 58
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	ea e3       	ldi	r30, 0x3A	; 58
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <GPIO_setupPinDirection+0xb4>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <GPIO_setupPinDirection+0xb0>
    1da0:	80 95       	com	r24
    1da2:	84 23       	and	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	83 c0       	rjmp	.+262    	; 0x1eae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	a1 f4       	brne	.+40     	; 0x1dd6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1dae:	a7 e3       	ldi	r26, 0x37	; 55
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e7 e3       	ldi	r30, 0x37	; 55
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	48 2f       	mov	r20, r24
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 2e       	mov	r0, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <GPIO_setupPinDirection+0xe4>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	0a 94       	dec	r0
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <GPIO_setupPinDirection+0xe0>
    1dd0:	84 2b       	or	r24, r20
    1dd2:	8c 93       	st	X, r24
    1dd4:	6c c0       	rjmp	.+216    	; 0x1eae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1dd6:	a7 e3       	ldi	r26, 0x37	; 55
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e7 e3       	ldi	r30, 0x37	; 55
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	48 2f       	mov	r20, r24
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 2e       	mov	r0, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <GPIO_setupPinDirection+0x10c>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <GPIO_setupPinDirection+0x108>
    1df8:	80 95       	com	r24
    1dfa:	84 23       	and	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	57 c0       	rjmp	.+174    	; 0x1eae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	a1 f4       	brne	.+40     	; 0x1e2e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e06:	a4 e3       	ldi	r26, 0x34	; 52
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e4 e3       	ldi	r30, 0x34	; 52
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	48 2f       	mov	r20, r24
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <GPIO_setupPinDirection+0x13c>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 94       	dec	r0
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <GPIO_setupPinDirection+0x138>
    1e28:	84 2b       	or	r24, r20
    1e2a:	8c 93       	st	X, r24
    1e2c:	40 c0       	rjmp	.+128    	; 0x1eae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e2e:	a4 e3       	ldi	r26, 0x34	; 52
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e4 e3       	ldi	r30, 0x34	; 52
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <GPIO_setupPinDirection+0x164>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <GPIO_setupPinDirection+0x160>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	2b c0       	rjmp	.+86     	; 0x1eae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	a1 f4       	brne	.+40     	; 0x1e86 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e5e:	a1 e3       	ldi	r26, 0x31	; 49
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e1 e3       	ldi	r30, 0x31	; 49
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	48 2f       	mov	r20, r24
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 2e       	mov	r0, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <GPIO_setupPinDirection+0x194>
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	0a 94       	dec	r0
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <GPIO_setupPinDirection+0x190>
    1e80:	84 2b       	or	r24, r20
    1e82:	8c 93       	st	X, r24
    1e84:	14 c0       	rjmp	.+40     	; 0x1eae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e86:	a1 e3       	ldi	r26, 0x31	; 49
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e1 e3       	ldi	r30, 0x31	; 49
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	48 2f       	mov	r20, r24
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 2e       	mov	r0, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <GPIO_setupPinDirection+0x1bc>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	0a 94       	dec	r0
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <GPIO_setupPinDirection+0x1b8>
    1ea8:	80 95       	com	r24
    1eaa:	84 23       	and	r24, r20
    1eac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <GPIO_writePin+0x6>
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <GPIO_writePin+0x8>
    1ec6:	0f 92       	push	r0
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	6a 83       	std	Y+2, r22	; 0x02
    1ed0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	88 30       	cpi	r24, 0x08	; 8
    1ed6:	08 f0       	brcs	.+2      	; 0x1eda <GPIO_writePin+0x1c>
    1ed8:	d5 c0       	rjmp	.+426    	; 0x2084 <GPIO_writePin+0x1c6>
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	84 30       	cpi	r24, 0x04	; 4
    1ede:	08 f0       	brcs	.+2      	; 0x1ee2 <GPIO_writePin+0x24>
    1ee0:	d1 c0       	rjmp	.+418    	; 0x2084 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	3d 83       	std	Y+5, r19	; 0x05
    1eea:	2c 83       	std	Y+4, r18	; 0x04
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <GPIO_writePin+0x3a>
    1ef6:	43 c0       	rjmp	.+134    	; 0x1f7e <GPIO_writePin+0xc0>
    1ef8:	2c 81       	ldd	r18, Y+4	; 0x04
    1efa:	3d 81       	ldd	r19, Y+5	; 0x05
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <GPIO_writePin+0x4e>
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	9d 81       	ldd	r25, Y+5	; 0x05
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	71 f0       	breq	.+28     	; 0x1f26 <GPIO_writePin+0x68>
    1f0a:	bc c0       	rjmp	.+376    	; 0x2084 <GPIO_writePin+0x1c6>
    1f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f10:	22 30       	cpi	r18, 0x02	; 2
    1f12:	31 05       	cpc	r19, r1
    1f14:	09 f4       	brne	.+2      	; 0x1f18 <GPIO_writePin+0x5a>
    1f16:	5f c0       	rjmp	.+190    	; 0x1fd6 <GPIO_writePin+0x118>
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	83 30       	cpi	r24, 0x03	; 3
    1f1e:	91 05       	cpc	r25, r1
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <GPIO_writePin+0x66>
    1f22:	85 c0       	rjmp	.+266    	; 0x202e <GPIO_writePin+0x170>
    1f24:	af c0       	rjmp	.+350    	; 0x2084 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	a1 f4       	brne	.+40     	; 0x1f54 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f2c:	ab e3       	ldi	r26, 0x3B	; 59
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	eb e3       	ldi	r30, 0x3B	; 59
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	48 2f       	mov	r20, r24
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	02 2e       	mov	r0, r18
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <GPIO_writePin+0x8c>
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	0a 94       	dec	r0
    1f4c:	e2 f7       	brpl	.-8      	; 0x1f46 <GPIO_writePin+0x88>
    1f4e:	84 2b       	or	r24, r20
    1f50:	8c 93       	st	X, r24
    1f52:	98 c0       	rjmp	.+304    	; 0x2084 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1f54:	ab e3       	ldi	r26, 0x3B	; 59
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	eb e3       	ldi	r30, 0x3B	; 59
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 2e       	mov	r0, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <GPIO_writePin+0xb4>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	0a 94       	dec	r0
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <GPIO_writePin+0xb0>
    1f76:	80 95       	com	r24
    1f78:	84 23       	and	r24, r20
    1f7a:	8c 93       	st	X, r24
    1f7c:	83 c0       	rjmp	.+262    	; 0x2084 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	a1 f4       	brne	.+40     	; 0x1fac <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f84:	a8 e3       	ldi	r26, 0x38	; 56
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e8 e3       	ldi	r30, 0x38	; 56
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	48 2f       	mov	r20, r24
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	02 2e       	mov	r0, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <GPIO_writePin+0xe4>
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	0a 94       	dec	r0
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <GPIO_writePin+0xe0>
    1fa6:	84 2b       	or	r24, r20
    1fa8:	8c 93       	st	X, r24
    1faa:	6c c0       	rjmp	.+216    	; 0x2084 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1fac:	a8 e3       	ldi	r26, 0x38	; 56
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e8 e3       	ldi	r30, 0x38	; 56
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	48 2f       	mov	r20, r24
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	02 2e       	mov	r0, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <GPIO_writePin+0x10c>
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	0a 94       	dec	r0
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <GPIO_writePin+0x108>
    1fce:	80 95       	com	r24
    1fd0:	84 23       	and	r24, r20
    1fd2:	8c 93       	st	X, r24
    1fd4:	57 c0       	rjmp	.+174    	; 0x2084 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	a1 f4       	brne	.+40     	; 0x2004 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1fdc:	a5 e3       	ldi	r26, 0x35	; 53
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e5 e3       	ldi	r30, 0x35	; 53
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	48 2f       	mov	r20, r24
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	02 2e       	mov	r0, r18
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <GPIO_writePin+0x13c>
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	0a 94       	dec	r0
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <GPIO_writePin+0x138>
    1ffe:	84 2b       	or	r24, r20
    2000:	8c 93       	st	X, r24
    2002:	40 c0       	rjmp	.+128    	; 0x2084 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2004:	a5 e3       	ldi	r26, 0x35	; 53
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e5 e3       	ldi	r30, 0x35	; 53
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	48 2f       	mov	r20, r24
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	02 2e       	mov	r0, r18
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <GPIO_writePin+0x164>
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	0a 94       	dec	r0
    2024:	e2 f7       	brpl	.-8      	; 0x201e <GPIO_writePin+0x160>
    2026:	80 95       	com	r24
    2028:	84 23       	and	r24, r20
    202a:	8c 93       	st	X, r24
    202c:	2b c0       	rjmp	.+86     	; 0x2084 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	a1 f4       	brne	.+40     	; 0x205c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2034:	a2 e3       	ldi	r26, 0x32	; 50
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e2 e3       	ldi	r30, 0x32	; 50
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	48 2f       	mov	r20, r24
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 2e       	mov	r0, r18
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <GPIO_writePin+0x194>
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	0a 94       	dec	r0
    2054:	e2 f7       	brpl	.-8      	; 0x204e <GPIO_writePin+0x190>
    2056:	84 2b       	or	r24, r20
    2058:	8c 93       	st	X, r24
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    205c:	a2 e3       	ldi	r26, 0x32	; 50
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e2 e3       	ldi	r30, 0x32	; 50
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	48 2f       	mov	r20, r24
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 2e       	mov	r0, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <GPIO_writePin+0x1bc>
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	0a 94       	dec	r0
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <GPIO_writePin+0x1b8>
    207e:	80 95       	com	r24
    2080:	84 23       	and	r24, r20
    2082:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <GPIO_readPin+0x6>
    209a:	00 d0       	rcall	.+0      	; 0x209c <GPIO_readPin+0x8>
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	8a 83       	std	Y+2, r24	; 0x02
    20a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    20a6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	88 30       	cpi	r24, 0x08	; 8
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <GPIO_readPin+0x1c>
    20ae:	84 c0       	rjmp	.+264    	; 0x21b8 <GPIO_readPin+0x124>
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	84 30       	cpi	r24, 0x04	; 4
    20b4:	08 f0       	brcs	.+2      	; 0x20b8 <GPIO_readPin+0x24>
    20b6:	80 c0       	rjmp	.+256    	; 0x21b8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	3d 83       	std	Y+5, r19	; 0x05
    20c0:	2c 83       	std	Y+4, r18	; 0x04
    20c2:	4c 81       	ldd	r20, Y+4	; 0x04
    20c4:	5d 81       	ldd	r21, Y+5	; 0x05
    20c6:	41 30       	cpi	r20, 0x01	; 1
    20c8:	51 05       	cpc	r21, r1
    20ca:	79 f1       	breq	.+94     	; 0x212a <GPIO_readPin+0x96>
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	9d 81       	ldd	r25, Y+5	; 0x05
    20d0:	82 30       	cpi	r24, 0x02	; 2
    20d2:	91 05       	cpc	r25, r1
    20d4:	34 f4       	brge	.+12     	; 0x20e2 <GPIO_readPin+0x4e>
    20d6:	2c 81       	ldd	r18, Y+4	; 0x04
    20d8:	3d 81       	ldd	r19, Y+5	; 0x05
    20da:	21 15       	cp	r18, r1
    20dc:	31 05       	cpc	r19, r1
    20de:	69 f0       	breq	.+26     	; 0x20fa <GPIO_readPin+0x66>
    20e0:	6b c0       	rjmp	.+214    	; 0x21b8 <GPIO_readPin+0x124>
    20e2:	4c 81       	ldd	r20, Y+4	; 0x04
    20e4:	5d 81       	ldd	r21, Y+5	; 0x05
    20e6:	42 30       	cpi	r20, 0x02	; 2
    20e8:	51 05       	cpc	r21, r1
    20ea:	b9 f1       	breq	.+110    	; 0x215a <GPIO_readPin+0xc6>
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	9d 81       	ldd	r25, Y+5	; 0x05
    20f0:	83 30       	cpi	r24, 0x03	; 3
    20f2:	91 05       	cpc	r25, r1
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <GPIO_readPin+0x64>
    20f6:	49 c0       	rjmp	.+146    	; 0x218a <GPIO_readPin+0xf6>
    20f8:	5f c0       	rjmp	.+190    	; 0x21b8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    20fa:	e9 e3       	ldi	r30, 0x39	; 57
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a9 01       	movw	r20, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <GPIO_readPin+0x7e>
    210e:	55 95       	asr	r21
    2110:	47 95       	ror	r20
    2112:	8a 95       	dec	r24
    2114:	e2 f7       	brpl	.-8      	; 0x210e <GPIO_readPin+0x7a>
    2116:	ca 01       	movw	r24, r20
    2118:	81 70       	andi	r24, 0x01	; 1
    211a:	90 70       	andi	r25, 0x00	; 0
    211c:	88 23       	and	r24, r24
    211e:	19 f0       	breq	.+6      	; 0x2126 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	49 c0       	rjmp	.+146    	; 0x21b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2126:	19 82       	std	Y+1, r1	; 0x01
    2128:	47 c0       	rjmp	.+142    	; 0x21b8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    212a:	e6 e3       	ldi	r30, 0x36	; 54
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a9 01       	movw	r20, r18
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <GPIO_readPin+0xae>
    213e:	55 95       	asr	r21
    2140:	47 95       	ror	r20
    2142:	8a 95       	dec	r24
    2144:	e2 f7       	brpl	.-8      	; 0x213e <GPIO_readPin+0xaa>
    2146:	ca 01       	movw	r24, r20
    2148:	81 70       	andi	r24, 0x01	; 1
    214a:	90 70       	andi	r25, 0x00	; 0
    214c:	88 23       	and	r24, r24
    214e:	19 f0       	breq	.+6      	; 0x2156 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	89 83       	std	Y+1, r24	; 0x01
    2154:	31 c0       	rjmp	.+98     	; 0x21b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2156:	19 82       	std	Y+1, r1	; 0x01
    2158:	2f c0       	rjmp	.+94     	; 0x21b8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    215a:	e3 e3       	ldi	r30, 0x33	; 51
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a9 01       	movw	r20, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <GPIO_readPin+0xde>
    216e:	55 95       	asr	r21
    2170:	47 95       	ror	r20
    2172:	8a 95       	dec	r24
    2174:	e2 f7       	brpl	.-8      	; 0x216e <GPIO_readPin+0xda>
    2176:	ca 01       	movw	r24, r20
    2178:	81 70       	andi	r24, 0x01	; 1
    217a:	90 70       	andi	r25, 0x00	; 0
    217c:	88 23       	and	r24, r24
    217e:	19 f0       	breq	.+6      	; 0x2186 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	19 c0       	rjmp	.+50     	; 0x21b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2186:	19 82       	std	Y+1, r1	; 0x01
    2188:	17 c0       	rjmp	.+46     	; 0x21b8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    218a:	e0 e3       	ldi	r30, 0x30	; 48
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a9 01       	movw	r20, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <GPIO_readPin+0x10e>
    219e:	55 95       	asr	r21
    21a0:	47 95       	ror	r20
    21a2:	8a 95       	dec	r24
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <GPIO_readPin+0x10a>
    21a6:	ca 01       	movw	r24, r20
    21a8:	81 70       	andi	r24, 0x01	; 1
    21aa:	90 70       	andi	r25, 0x00	; 0
    21ac:	88 23       	and	r24, r24
    21ae:	19 f0       	breq	.+6      	; 0x21b6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21b6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <GPIO_setupPortDirection+0x6>
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <GPIO_setupPortDirection+0x8>
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	90 f5       	brcc	.+100    	; 0x2244 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	3c 83       	std	Y+4, r19	; 0x04
    21e8:	2b 83       	std	Y+3, r18	; 0x03
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	91 05       	cpc	r25, r1
    21f2:	d1 f0       	breq	.+52     	; 0x2228 <GPIO_setupPortDirection+0x5e>
    21f4:	2b 81       	ldd	r18, Y+3	; 0x03
    21f6:	3c 81       	ldd	r19, Y+4	; 0x04
    21f8:	22 30       	cpi	r18, 0x02	; 2
    21fa:	31 05       	cpc	r19, r1
    21fc:	2c f4       	brge	.+10     	; 0x2208 <GPIO_setupPortDirection+0x3e>
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	61 f0       	breq	.+24     	; 0x221e <GPIO_setupPortDirection+0x54>
    2206:	1e c0       	rjmp	.+60     	; 0x2244 <GPIO_setupPortDirection+0x7a>
    2208:	2b 81       	ldd	r18, Y+3	; 0x03
    220a:	3c 81       	ldd	r19, Y+4	; 0x04
    220c:	22 30       	cpi	r18, 0x02	; 2
    220e:	31 05       	cpc	r19, r1
    2210:	81 f0       	breq	.+32     	; 0x2232 <GPIO_setupPortDirection+0x68>
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	83 30       	cpi	r24, 0x03	; 3
    2218:	91 05       	cpc	r25, r1
    221a:	81 f0       	breq	.+32     	; 0x223c <GPIO_setupPortDirection+0x72>
    221c:	13 c0       	rjmp	.+38     	; 0x2244 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    221e:	ea e3       	ldi	r30, 0x3A	; 58
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	80 83       	st	Z, r24
    2226:	0e c0       	rjmp	.+28     	; 0x2244 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2228:	e7 e3       	ldi	r30, 0x37	; 55
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	80 83       	st	Z, r24
    2230:	09 c0       	rjmp	.+18     	; 0x2244 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2232:	e4 e3       	ldi	r30, 0x34	; 52
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	80 83       	st	Z, r24
    223a:	04 c0       	rjmp	.+8      	; 0x2244 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    223c:	e1 e3       	ldi	r30, 0x31	; 49
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	80 83       	st	Z, r24
			break;
		}
	}
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	00 d0       	rcall	.+0      	; 0x2258 <GPIO_writePort+0x6>
    2258:	00 d0       	rcall	.+0      	; 0x225a <GPIO_writePort+0x8>
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	84 30       	cpi	r24, 0x04	; 4
    2266:	90 f5       	brcc	.+100    	; 0x22cc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	3c 83       	std	Y+4, r19	; 0x04
    2270:	2b 83       	std	Y+3, r18	; 0x03
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	91 05       	cpc	r25, r1
    227a:	d1 f0       	breq	.+52     	; 0x22b0 <GPIO_writePort+0x5e>
    227c:	2b 81       	ldd	r18, Y+3	; 0x03
    227e:	3c 81       	ldd	r19, Y+4	; 0x04
    2280:	22 30       	cpi	r18, 0x02	; 2
    2282:	31 05       	cpc	r19, r1
    2284:	2c f4       	brge	.+10     	; 0x2290 <GPIO_writePort+0x3e>
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	9c 81       	ldd	r25, Y+4	; 0x04
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	61 f0       	breq	.+24     	; 0x22a6 <GPIO_writePort+0x54>
    228e:	1e c0       	rjmp	.+60     	; 0x22cc <GPIO_writePort+0x7a>
    2290:	2b 81       	ldd	r18, Y+3	; 0x03
    2292:	3c 81       	ldd	r19, Y+4	; 0x04
    2294:	22 30       	cpi	r18, 0x02	; 2
    2296:	31 05       	cpc	r19, r1
    2298:	81 f0       	breq	.+32     	; 0x22ba <GPIO_writePort+0x68>
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	83 30       	cpi	r24, 0x03	; 3
    22a0:	91 05       	cpc	r25, r1
    22a2:	81 f0       	breq	.+32     	; 0x22c4 <GPIO_writePort+0x72>
    22a4:	13 c0       	rjmp	.+38     	; 0x22cc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    22a6:	eb e3       	ldi	r30, 0x3B	; 59
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	80 83       	st	Z, r24
    22ae:	0e c0       	rjmp	.+28     	; 0x22cc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    22b0:	e8 e3       	ldi	r30, 0x38	; 56
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	80 83       	st	Z, r24
    22b8:	09 c0       	rjmp	.+18     	; 0x22cc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    22ba:	e5 e3       	ldi	r30, 0x35	; 53
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	80 83       	st	Z, r24
    22c2:	04 c0       	rjmp	.+8      	; 0x22cc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    22c4:	e2 e3       	ldi	r30, 0x32	; 50
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	80 83       	st	Z, r24
			break;
		}
	}
}
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <GPIO_readPort+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <GPIO_readPort+0x8>
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    22e8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	84 30       	cpi	r24, 0x04	; 4
    22ee:	90 f5       	brcc	.+100    	; 0x2354 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	3c 83       	std	Y+4, r19	; 0x04
    22f8:	2b 83       	std	Y+3, r18	; 0x03
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	91 05       	cpc	r25, r1
    2302:	d1 f0       	breq	.+52     	; 0x2338 <GPIO_readPort+0x5e>
    2304:	2b 81       	ldd	r18, Y+3	; 0x03
    2306:	3c 81       	ldd	r19, Y+4	; 0x04
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	31 05       	cpc	r19, r1
    230c:	2c f4       	brge	.+10     	; 0x2318 <GPIO_readPort+0x3e>
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	61 f0       	breq	.+24     	; 0x232e <GPIO_readPort+0x54>
    2316:	1e c0       	rjmp	.+60     	; 0x2354 <GPIO_readPort+0x7a>
    2318:	2b 81       	ldd	r18, Y+3	; 0x03
    231a:	3c 81       	ldd	r19, Y+4	; 0x04
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	81 f0       	breq	.+32     	; 0x2342 <GPIO_readPort+0x68>
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	83 30       	cpi	r24, 0x03	; 3
    2328:	91 05       	cpc	r25, r1
    232a:	81 f0       	breq	.+32     	; 0x234c <GPIO_readPort+0x72>
    232c:	13 c0       	rjmp	.+38     	; 0x2354 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    232e:	e9 e3       	ldi	r30, 0x39	; 57
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	0e c0       	rjmp	.+28     	; 0x2354 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2338:	e6 e3       	ldi	r30, 0x36	; 54
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	09 c0       	rjmp	.+18     	; 0x2354 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2342:	e3 e3       	ldi	r30, 0x33	; 51
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	04 c0       	rjmp	.+8      	; 0x2354 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    234c:	e0 e3       	ldi	r30, 0x30	; 48
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2354:	89 81       	ldd	r24, Y+1	; 0x01
}
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <KEYPAD_getPressedKey+0x6>
    236a:	0f 92       	push	r0
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2370:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2372:	1b 82       	std	Y+3, r1	; 0x03
    2374:	43 c0       	rjmp	.+134    	; 0x23fc <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	98 2f       	mov	r25, r24
    2382:	9c 5f       	subi	r25, 0xFC	; 252
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	69 2f       	mov	r22, r25
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9c 01       	movw	r18, r24
    2396:	2c 5f       	subi	r18, 0xFC	; 252
    2398:	3f 4f       	sbci	r19, 0xFF	; 255
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <KEYPAD_getPressedKey+0x40>
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	2a 95       	dec	r18
    23a6:	e2 f7       	brpl	.-8      	; 0x23a0 <KEYPAD_getPressedKey+0x3c>
    23a8:	80 95       	com	r24
    23aa:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	69 81       	ldd	r22, Y+1	; 0x01
    23b0:	0e 94 29 11 	call	0x2252	; 0x2252 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    23b4:	1a 82       	std	Y+2, r1	; 0x02
    23b6:	1c c0       	rjmp	.+56     	; 0x23f0 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	6a 81       	ldd	r22, Y+2	; 0x02
    23bc:	0e 94 4a 10 	call	0x2094	; 0x2094 <GPIO_readPin>
    23c0:	88 23       	and	r24, r24
    23c2:	99 f4       	brne	.+38     	; 0x23ea <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	88 2f       	mov	r24, r24
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	98 2f       	mov	r25, r24
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	89 0f       	add	r24, r25
    23d8:	8f 5f       	subi	r24, 0xFF	; 255
    23da:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	8f 5f       	subi	r24, 0xFF	; 255
    23ee:	8a 83       	std	Y+2, r24	; 0x02
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	84 30       	cpi	r24, 0x04	; 4
    23f4:	08 f3       	brcs	.-62     	; 0x23b8 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	8f 5f       	subi	r24, 0xFF	; 255
    23fa:	8b 83       	std	Y+3, r24	; 0x03
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	84 30       	cpi	r24, 0x04	; 4
    2400:	08 f4       	brcc	.+2      	; 0x2404 <KEYPAD_getPressedKey+0xa0>
    2402:	b9 cf       	rjmp	.-142    	; 0x2376 <KEYPAD_getPressedKey+0x12>
    2404:	b6 cf       	rjmp	.-148    	; 0x2372 <KEYPAD_getPressedKey+0xe>

00002406 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	00 d0       	rcall	.+0      	; 0x240c <KEYPAD_4x4_adjustKeyNumber+0x6>
    240c:	00 d0       	rcall	.+0      	; 0x240e <KEYPAD_4x4_adjustKeyNumber+0x8>
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2414:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	3c 83       	std	Y+4, r19	; 0x04
    241e:	2b 83       	std	Y+3, r18	; 0x03
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	88 30       	cpi	r24, 0x08	; 8
    2426:	91 05       	cpc	r25, r1
    2428:	09 f4       	brne	.+2      	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x26>
    242a:	70 c0       	rjmp	.+224    	; 0x250c <KEYPAD_4x4_adjustKeyNumber+0x106>
    242c:	2b 81       	ldd	r18, Y+3	; 0x03
    242e:	3c 81       	ldd	r19, Y+4	; 0x04
    2430:	29 30       	cpi	r18, 0x09	; 9
    2432:	31 05       	cpc	r19, r1
    2434:	5c f5       	brge	.+86     	; 0x248c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	84 30       	cpi	r24, 0x04	; 4
    243c:	91 05       	cpc	r25, r1
    243e:	09 f4       	brne	.+2      	; 0x2442 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2440:	59 c0       	rjmp	.+178    	; 0x24f4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2442:	2b 81       	ldd	r18, Y+3	; 0x03
    2444:	3c 81       	ldd	r19, Y+4	; 0x04
    2446:	25 30       	cpi	r18, 0x05	; 5
    2448:	31 05       	cpc	r19, r1
    244a:	9c f4       	brge	.+38     	; 0x2472 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	82 30       	cpi	r24, 0x02	; 2
    2452:	91 05       	cpc	r25, r1
    2454:	09 f4       	brne	.+2      	; 0x2458 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2456:	48 c0       	rjmp	.+144    	; 0x24e8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2458:	2b 81       	ldd	r18, Y+3	; 0x03
    245a:	3c 81       	ldd	r19, Y+4	; 0x04
    245c:	23 30       	cpi	r18, 0x03	; 3
    245e:	31 05       	cpc	r19, r1
    2460:	0c f0       	brlt	.+2      	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2462:	45 c0       	rjmp	.+138    	; 0x24ee <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	81 30       	cpi	r24, 0x01	; 1
    246a:	91 05       	cpc	r25, r1
    246c:	09 f4       	brne	.+2      	; 0x2470 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    246e:	39 c0       	rjmp	.+114    	; 0x24e2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2470:	67 c0       	rjmp	.+206    	; 0x2540 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2472:	2b 81       	ldd	r18, Y+3	; 0x03
    2474:	3c 81       	ldd	r19, Y+4	; 0x04
    2476:	26 30       	cpi	r18, 0x06	; 6
    2478:	31 05       	cpc	r19, r1
    247a:	09 f4       	brne	.+2      	; 0x247e <KEYPAD_4x4_adjustKeyNumber+0x78>
    247c:	41 c0       	rjmp	.+130    	; 0x2500 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	87 30       	cpi	r24, 0x07	; 7
    2484:	91 05       	cpc	r25, r1
    2486:	0c f0       	brlt	.+2      	; 0x248a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2488:	3e c0       	rjmp	.+124    	; 0x2506 <KEYPAD_4x4_adjustKeyNumber+0x100>
    248a:	37 c0       	rjmp	.+110    	; 0x24fa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    248c:	2b 81       	ldd	r18, Y+3	; 0x03
    248e:	3c 81       	ldd	r19, Y+4	; 0x04
    2490:	2c 30       	cpi	r18, 0x0C	; 12
    2492:	31 05       	cpc	r19, r1
    2494:	09 f4       	brne	.+2      	; 0x2498 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2496:	46 c0       	rjmp	.+140    	; 0x2524 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	9c 81       	ldd	r25, Y+4	; 0x04
    249c:	8d 30       	cpi	r24, 0x0D	; 13
    249e:	91 05       	cpc	r25, r1
    24a0:	5c f4       	brge	.+22     	; 0x24b8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    24a2:	2b 81       	ldd	r18, Y+3	; 0x03
    24a4:	3c 81       	ldd	r19, Y+4	; 0x04
    24a6:	2a 30       	cpi	r18, 0x0A	; 10
    24a8:	31 05       	cpc	r19, r1
    24aa:	b1 f1       	breq	.+108    	; 0x2518 <KEYPAD_4x4_adjustKeyNumber+0x112>
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	8b 30       	cpi	r24, 0x0B	; 11
    24b2:	91 05       	cpc	r25, r1
    24b4:	a4 f5       	brge	.+104    	; 0x251e <KEYPAD_4x4_adjustKeyNumber+0x118>
    24b6:	2d c0       	rjmp	.+90     	; 0x2512 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    24b8:	2b 81       	ldd	r18, Y+3	; 0x03
    24ba:	3c 81       	ldd	r19, Y+4	; 0x04
    24bc:	2e 30       	cpi	r18, 0x0E	; 14
    24be:	31 05       	cpc	r19, r1
    24c0:	b9 f1       	breq	.+110    	; 0x2530 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	8e 30       	cpi	r24, 0x0E	; 14
    24c8:	91 05       	cpc	r25, r1
    24ca:	7c f1       	brlt	.+94     	; 0x252a <KEYPAD_4x4_adjustKeyNumber+0x124>
    24cc:	2b 81       	ldd	r18, Y+3	; 0x03
    24ce:	3c 81       	ldd	r19, Y+4	; 0x04
    24d0:	2f 30       	cpi	r18, 0x0F	; 15
    24d2:	31 05       	cpc	r19, r1
    24d4:	79 f1       	breq	.+94     	; 0x2534 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	80 31       	cpi	r24, 0x10	; 16
    24dc:	91 05       	cpc	r25, r1
    24de:	69 f1       	breq	.+90     	; 0x253a <KEYPAD_4x4_adjustKeyNumber+0x134>
    24e0:	2f c0       	rjmp	.+94     	; 0x2540 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    24e2:	87 e0       	ldi	r24, 0x07	; 7
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	2e c0       	rjmp	.+92     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    24e8:	88 e0       	ldi	r24, 0x08	; 8
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	2b c0       	rjmp	.+86     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    24ee:	89 e0       	ldi	r24, 0x09	; 9
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	28 c0       	rjmp	.+80     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    24f4:	85 e2       	ldi	r24, 0x25	; 37
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	25 c0       	rjmp	.+74     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    24fa:	84 e0       	ldi	r24, 0x04	; 4
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	22 c0       	rjmp	.+68     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2500:	85 e0       	ldi	r24, 0x05	; 5
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	1f c0       	rjmp	.+62     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2506:	86 e0       	ldi	r24, 0x06	; 6
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	1c c0       	rjmp	.+56     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    250c:	8a e2       	ldi	r24, 0x2A	; 42
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	19 c0       	rjmp	.+50     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	16 c0       	rjmp	.+44     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2518:	82 e0       	ldi	r24, 0x02	; 2
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	13 c0       	rjmp	.+38     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	10 c0       	rjmp	.+32     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2524:	8d e2       	ldi	r24, 0x2D	; 45
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	0d c0       	rjmp	.+26     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    252a:	8d e0       	ldi	r24, 0x0D	; 13
    252c:	89 83       	std	Y+1, r24	; 0x01
    252e:	0a c0       	rjmp	.+20     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2530:	19 82       	std	Y+1, r1	; 0x01
    2532:	08 c0       	rjmp	.+16     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2534:	8d e3       	ldi	r24, 0x3D	; 61
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	05 c0       	rjmp	.+10     	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    253a:	8b e2       	ldi	r24, 0x2B	; 43
    253c:	89 83       	std	Y+1, r24	; 0x01
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2544:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	2e 97       	sbiw	r28, 0x0e	; 14
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2568:	83 e0       	ldi	r24, 0x03	; 3
    256a:	64 e0       	ldi	r22, 0x04	; 4
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2572:	83 e0       	ldi	r24, 0x03	; 3
    2574:	66 e0       	ldi	r22, 0x06	; 6
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <GPIO_setupPinDirection>
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	a0 ea       	ldi	r26, 0xA0	; 160
    2582:	b1 e4       	ldi	r27, 0x41	; 65
    2584:	8b 87       	std	Y+11, r24	; 0x0b
    2586:	9c 87       	std	Y+12, r25	; 0x0c
    2588:	ad 87       	std	Y+13, r26	; 0x0d
    258a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258c:	6b 85       	ldd	r22, Y+11	; 0x0b
    258e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2590:	8d 85       	ldd	r24, Y+13	; 0x0d
    2592:	9e 85       	ldd	r25, Y+14	; 0x0e
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	4a ef       	ldi	r20, 0xFA	; 250
    259a:	54 e4       	ldi	r21, 0x44	; 68
    259c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	8f 83       	std	Y+7, r24	; 0x07
    25a6:	98 87       	std	Y+8, r25	; 0x08
    25a8:	a9 87       	std	Y+9, r26	; 0x09
    25aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ac:	6f 81       	ldd	r22, Y+7	; 0x07
    25ae:	78 85       	ldd	r23, Y+8	; 0x08
    25b0:	89 85       	ldd	r24, Y+9	; 0x09
    25b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e8       	ldi	r20, 0x80	; 128
    25ba:	5f e3       	ldi	r21, 0x3F	; 63
    25bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c0:	88 23       	and	r24, r24
    25c2:	2c f4       	brge	.+10     	; 0x25ce <LCD_init+0x7a>
		__ticks = 1;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	9e 83       	std	Y+6, r25	; 0x06
    25ca:	8d 83       	std	Y+5, r24	; 0x05
    25cc:	3f c0       	rjmp	.+126    	; 0x264c <LCD_init+0xf8>
	else if (__tmp > 65535)
    25ce:	6f 81       	ldd	r22, Y+7	; 0x07
    25d0:	78 85       	ldd	r23, Y+8	; 0x08
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	3f ef       	ldi	r19, 0xFF	; 255
    25da:	4f e7       	ldi	r20, 0x7F	; 127
    25dc:	57 e4       	ldi	r21, 0x47	; 71
    25de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e2:	18 16       	cp	r1, r24
    25e4:	4c f5       	brge	.+82     	; 0x2638 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e2       	ldi	r20, 0x20	; 32
    25f4:	51 e4       	ldi	r21, 0x41	; 65
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	bc 01       	movw	r22, r24
    2600:	cd 01       	movw	r24, r26
    2602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	9e 83       	std	Y+6, r25	; 0x06
    260c:	8d 83       	std	Y+5, r24	; 0x05
    260e:	0f c0       	rjmp	.+30     	; 0x262e <LCD_init+0xda>
    2610:	88 ec       	ldi	r24, 0xC8	; 200
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9c 83       	std	Y+4, r25	; 0x04
    2616:	8b 83       	std	Y+3, r24	; 0x03
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <LCD_init+0xc8>
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2624:	8d 81       	ldd	r24, Y+5	; 0x05
    2626:	9e 81       	ldd	r25, Y+6	; 0x06
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	69 f7       	brne	.-38     	; 0x2610 <LCD_init+0xbc>
    2636:	14 c0       	rjmp	.+40     	; 0x2660 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	9e 81       	ldd	r25, Y+6	; 0x06
    2650:	9a 83       	std	Y+2, r25	; 0x02
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <LCD_init+0x104>
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	6f ef       	ldi	r22, 0xFF	; 255
    2664:	0e 94 e5 10 	call	0x21ca	; 0x21ca <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2668:	88 e3       	ldi	r24, 0x38	; 56
    266a:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    266e:	8c e0       	ldi	r24, 0x0C	; 12
    2670:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_sendCommand>
}
    267a:	2e 96       	adiw	r28, 0x0e	; 14
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	e9 97       	sbiw	r28, 0x39	; 57
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    26a2:	83 e0       	ldi	r24, 0x03	; 3
    26a4:	64 e0       	ldi	r22, 0x04	; 4
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <GPIO_writePin>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	a0 e8       	ldi	r26, 0x80	; 128
    26b2:	bf e3       	ldi	r27, 0x3F	; 63
    26b4:	8d ab       	std	Y+53, r24	; 0x35
    26b6:	9e ab       	std	Y+54, r25	; 0x36
    26b8:	af ab       	std	Y+55, r26	; 0x37
    26ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26bc:	6d a9       	ldd	r22, Y+53	; 0x35
    26be:	7e a9       	ldd	r23, Y+54	; 0x36
    26c0:	8f a9       	ldd	r24, Y+55	; 0x37
    26c2:	98 ad       	ldd	r25, Y+56	; 0x38
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	4a ef       	ldi	r20, 0xFA	; 250
    26ca:	54 e4       	ldi	r21, 0x44	; 68
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	89 ab       	std	Y+49, r24	; 0x31
    26d6:	9a ab       	std	Y+50, r25	; 0x32
    26d8:	ab ab       	std	Y+51, r26	; 0x33
    26da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26dc:	69 a9       	ldd	r22, Y+49	; 0x31
    26de:	7a a9       	ldd	r23, Y+50	; 0x32
    26e0:	8b a9       	ldd	r24, Y+51	; 0x33
    26e2:	9c a9       	ldd	r25, Y+52	; 0x34
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	2c f4       	brge	.+10     	; 0x26fe <LCD_sendCommand+0x72>
		__ticks = 1;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	98 ab       	std	Y+48, r25	; 0x30
    26fa:	8f a7       	std	Y+47, r24	; 0x2f
    26fc:	3f c0       	rjmp	.+126    	; 0x277c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    26fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2700:	7a a9       	ldd	r23, Y+50	; 0x32
    2702:	8b a9       	ldd	r24, Y+51	; 0x33
    2704:	9c a9       	ldd	r25, Y+52	; 0x34
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	3f ef       	ldi	r19, 0xFF	; 255
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	57 e4       	ldi	r21, 0x47	; 71
    270e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2712:	18 16       	cp	r1, r24
    2714:	4c f5       	brge	.+82     	; 0x2768 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2716:	6d a9       	ldd	r22, Y+53	; 0x35
    2718:	7e a9       	ldd	r23, Y+54	; 0x36
    271a:	8f a9       	ldd	r24, Y+55	; 0x37
    271c:	98 ad       	ldd	r25, Y+56	; 0x38
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e2       	ldi	r20, 0x20	; 32
    2724:	51 e4       	ldi	r21, 0x41	; 65
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	98 ab       	std	Y+48, r25	; 0x30
    273c:	8f a7       	std	Y+47, r24	; 0x2f
    273e:	0f c0       	rjmp	.+30     	; 0x275e <LCD_sendCommand+0xd2>
    2740:	88 ec       	ldi	r24, 0xC8	; 200
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9e a7       	std	Y+46, r25	; 0x2e
    2746:	8d a7       	std	Y+45, r24	; 0x2d
    2748:	8d a5       	ldd	r24, Y+45	; 0x2d
    274a:	9e a5       	ldd	r25, Y+46	; 0x2e
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <LCD_sendCommand+0xc0>
    2750:	9e a7       	std	Y+46, r25	; 0x2e
    2752:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2754:	8f a5       	ldd	r24, Y+47	; 0x2f
    2756:	98 a9       	ldd	r25, Y+48	; 0x30
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	98 ab       	std	Y+48, r25	; 0x30
    275c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2760:	98 a9       	ldd	r25, Y+48	; 0x30
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	69 f7       	brne	.-38     	; 0x2740 <LCD_sendCommand+0xb4>
    2766:	14 c0       	rjmp	.+40     	; 0x2790 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	69 a9       	ldd	r22, Y+49	; 0x31
    276a:	7a a9       	ldd	r23, Y+50	; 0x32
    276c:	8b a9       	ldd	r24, Y+51	; 0x33
    276e:	9c a9       	ldd	r25, Y+52	; 0x34
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	98 ab       	std	Y+48, r25	; 0x30
    277a:	8f a7       	std	Y+47, r24	; 0x2f
    277c:	8f a5       	ldd	r24, Y+47	; 0x2f
    277e:	98 a9       	ldd	r25, Y+48	; 0x30
    2780:	9c a7       	std	Y+44, r25	; 0x2c
    2782:	8b a7       	std	Y+43, r24	; 0x2b
    2784:	8b a5       	ldd	r24, Y+43	; 0x2b
    2786:	9c a5       	ldd	r25, Y+44	; 0x2c
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <LCD_sendCommand+0xfc>
    278c:	9c a7       	std	Y+44, r25	; 0x2c
    278e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2790:	83 e0       	ldi	r24, 0x03	; 3
    2792:	66 e0       	ldi	r22, 0x06	; 6
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <GPIO_writePin>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a0 e8       	ldi	r26, 0x80	; 128
    27a0:	bf e3       	ldi	r27, 0x3F	; 63
    27a2:	8f a3       	std	Y+39, r24	; 0x27
    27a4:	98 a7       	std	Y+40, r25	; 0x28
    27a6:	a9 a7       	std	Y+41, r26	; 0x29
    27a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27aa:	6f a1       	ldd	r22, Y+39	; 0x27
    27ac:	78 a5       	ldd	r23, Y+40	; 0x28
    27ae:	89 a5       	ldd	r24, Y+41	; 0x29
    27b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4a ef       	ldi	r20, 0xFA	; 250
    27b8:	54 e4       	ldi	r21, 0x44	; 68
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	8b a3       	std	Y+35, r24	; 0x23
    27c4:	9c a3       	std	Y+36, r25	; 0x24
    27c6:	ad a3       	std	Y+37, r26	; 0x25
    27c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27ca:	6b a1       	ldd	r22, Y+35	; 0x23
    27cc:	7c a1       	ldd	r23, Y+36	; 0x24
    27ce:	8d a1       	ldd	r24, Y+37	; 0x25
    27d0:	9e a1       	ldd	r25, Y+38	; 0x26
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	2c f4       	brge	.+10     	; 0x27ec <LCD_sendCommand+0x160>
		__ticks = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9a a3       	std	Y+34, r25	; 0x22
    27e8:	89 a3       	std	Y+33, r24	; 0x21
    27ea:	3f c0       	rjmp	.+126    	; 0x286a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    27ec:	6b a1       	ldd	r22, Y+35	; 0x23
    27ee:	7c a1       	ldd	r23, Y+36	; 0x24
    27f0:	8d a1       	ldd	r24, Y+37	; 0x25
    27f2:	9e a1       	ldd	r25, Y+38	; 0x26
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f e7       	ldi	r20, 0x7F	; 127
    27fa:	57 e4       	ldi	r21, 0x47	; 71
    27fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2800:	18 16       	cp	r1, r24
    2802:	4c f5       	brge	.+82     	; 0x2856 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	6f a1       	ldd	r22, Y+39	; 0x27
    2806:	78 a5       	ldd	r23, Y+40	; 0x28
    2808:	89 a5       	ldd	r24, Y+41	; 0x29
    280a:	9a a5       	ldd	r25, Y+42	; 0x2a
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e2       	ldi	r20, 0x20	; 32
    2812:	51 e4       	ldi	r21, 0x41	; 65
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9a a3       	std	Y+34, r25	; 0x22
    282a:	89 a3       	std	Y+33, r24	; 0x21
    282c:	0f c0       	rjmp	.+30     	; 0x284c <LCD_sendCommand+0x1c0>
    282e:	88 ec       	ldi	r24, 0xC8	; 200
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	98 a3       	std	Y+32, r25	; 0x20
    2834:	8f 8f       	std	Y+31, r24	; 0x1f
    2836:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2838:	98 a1       	ldd	r25, Y+32	; 0x20
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_sendCommand+0x1ae>
    283e:	98 a3       	std	Y+32, r25	; 0x20
    2840:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2842:	89 a1       	ldd	r24, Y+33	; 0x21
    2844:	9a a1       	ldd	r25, Y+34	; 0x22
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	9a a3       	std	Y+34, r25	; 0x22
    284a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	89 a1       	ldd	r24, Y+33	; 0x21
    284e:	9a a1       	ldd	r25, Y+34	; 0x22
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	69 f7       	brne	.-38     	; 0x282e <LCD_sendCommand+0x1a2>
    2854:	14 c0       	rjmp	.+40     	; 0x287e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2856:	6b a1       	ldd	r22, Y+35	; 0x23
    2858:	7c a1       	ldd	r23, Y+36	; 0x24
    285a:	8d a1       	ldd	r24, Y+37	; 0x25
    285c:	9e a1       	ldd	r25, Y+38	; 0x26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9a a3       	std	Y+34, r25	; 0x22
    2868:	89 a3       	std	Y+33, r24	; 0x21
    286a:	89 a1       	ldd	r24, Y+33	; 0x21
    286c:	9a a1       	ldd	r25, Y+34	; 0x22
    286e:	9e 8f       	std	Y+30, r25	; 0x1e
    2870:	8d 8f       	std	Y+29, r24	; 0x1d
    2872:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2874:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <LCD_sendCommand+0x1ea>
    287a:	9e 8f       	std	Y+30, r25	; 0x1e
    287c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	69 ad       	ldd	r22, Y+57	; 0x39
    2882:	0e 94 29 11 	call	0x2252	; 0x2252 <GPIO_writePort>
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	a0 e8       	ldi	r26, 0x80	; 128
    288c:	bf e3       	ldi	r27, 0x3F	; 63
    288e:	89 8f       	std	Y+25, r24	; 0x19
    2890:	9a 8f       	std	Y+26, r25	; 0x1a
    2892:	ab 8f       	std	Y+27, r26	; 0x1b
    2894:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2896:	69 8d       	ldd	r22, Y+25	; 0x19
    2898:	7a 8d       	ldd	r23, Y+26	; 0x1a
    289a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    289c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	4a ef       	ldi	r20, 0xFA	; 250
    28a4:	54 e4       	ldi	r21, 0x44	; 68
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	8d 8b       	std	Y+21, r24	; 0x15
    28b0:	9e 8b       	std	Y+22, r25	; 0x16
    28b2:	af 8b       	std	Y+23, r26	; 0x17
    28b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28b6:	6d 89       	ldd	r22, Y+21	; 0x15
    28b8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ba:	8f 89       	ldd	r24, Y+23	; 0x17
    28bc:	98 8d       	ldd	r25, Y+24	; 0x18
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e8       	ldi	r20, 0x80	; 128
    28c4:	5f e3       	ldi	r21, 0x3F	; 63
    28c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ca:	88 23       	and	r24, r24
    28cc:	2c f4       	brge	.+10     	; 0x28d8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9c 8b       	std	Y+20, r25	; 0x14
    28d4:	8b 8b       	std	Y+19, r24	; 0x13
    28d6:	3f c0       	rjmp	.+126    	; 0x2956 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    28d8:	6d 89       	ldd	r22, Y+21	; 0x15
    28da:	7e 89       	ldd	r23, Y+22	; 0x16
    28dc:	8f 89       	ldd	r24, Y+23	; 0x17
    28de:	98 8d       	ldd	r25, Y+24	; 0x18
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	3f ef       	ldi	r19, 0xFF	; 255
    28e4:	4f e7       	ldi	r20, 0x7F	; 127
    28e6:	57 e4       	ldi	r21, 0x47	; 71
    28e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ec:	18 16       	cp	r1, r24
    28ee:	4c f5       	brge	.+82     	; 0x2942 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f0:	69 8d       	ldd	r22, Y+25	; 0x19
    28f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e2       	ldi	r20, 0x20	; 32
    28fe:	51 e4       	ldi	r21, 0x41	; 65
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	bc 01       	movw	r22, r24
    290a:	cd 01       	movw	r24, r26
    290c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9c 8b       	std	Y+20, r25	; 0x14
    2916:	8b 8b       	std	Y+19, r24	; 0x13
    2918:	0f c0       	rjmp	.+30     	; 0x2938 <LCD_sendCommand+0x2ac>
    291a:	88 ec       	ldi	r24, 0xC8	; 200
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9a 8b       	std	Y+18, r25	; 0x12
    2920:	89 8b       	std	Y+17, r24	; 0x11
    2922:	89 89       	ldd	r24, Y+17	; 0x11
    2924:	9a 89       	ldd	r25, Y+18	; 0x12
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LCD_sendCommand+0x29a>
    292a:	9a 8b       	std	Y+18, r25	; 0x12
    292c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292e:	8b 89       	ldd	r24, Y+19	; 0x13
    2930:	9c 89       	ldd	r25, Y+20	; 0x14
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	9c 8b       	std	Y+20, r25	; 0x14
    2936:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2938:	8b 89       	ldd	r24, Y+19	; 0x13
    293a:	9c 89       	ldd	r25, Y+20	; 0x14
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	69 f7       	brne	.-38     	; 0x291a <LCD_sendCommand+0x28e>
    2940:	14 c0       	rjmp	.+40     	; 0x296a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2942:	6d 89       	ldd	r22, Y+21	; 0x15
    2944:	7e 89       	ldd	r23, Y+22	; 0x16
    2946:	8f 89       	ldd	r24, Y+23	; 0x17
    2948:	98 8d       	ldd	r25, Y+24	; 0x18
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	9c 8b       	std	Y+20, r25	; 0x14
    2954:	8b 8b       	std	Y+19, r24	; 0x13
    2956:	8b 89       	ldd	r24, Y+19	; 0x13
    2958:	9c 89       	ldd	r25, Y+20	; 0x14
    295a:	98 8b       	std	Y+16, r25	; 0x10
    295c:	8f 87       	std	Y+15, r24	; 0x0f
    295e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2960:	98 89       	ldd	r25, Y+16	; 0x10
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <LCD_sendCommand+0x2d6>
    2966:	98 8b       	std	Y+16, r25	; 0x10
    2968:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	66 e0       	ldi	r22, 0x06	; 6
    296e:	40 e0       	ldi	r20, 0x00	; 0
    2970:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <GPIO_writePin>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	a0 e8       	ldi	r26, 0x80	; 128
    297a:	bf e3       	ldi	r27, 0x3F	; 63
    297c:	8b 87       	std	Y+11, r24	; 0x0b
    297e:	9c 87       	std	Y+12, r25	; 0x0c
    2980:	ad 87       	std	Y+13, r26	; 0x0d
    2982:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2984:	6b 85       	ldd	r22, Y+11	; 0x0b
    2986:	7c 85       	ldd	r23, Y+12	; 0x0c
    2988:	8d 85       	ldd	r24, Y+13	; 0x0d
    298a:	9e 85       	ldd	r25, Y+14	; 0x0e
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a ef       	ldi	r20, 0xFA	; 250
    2992:	54 e4       	ldi	r21, 0x44	; 68
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8f 83       	std	Y+7, r24	; 0x07
    299e:	98 87       	std	Y+8, r25	; 0x08
    29a0:	a9 87       	std	Y+9, r26	; 0x09
    29a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a4:	6f 81       	ldd	r22, Y+7	; 0x07
    29a6:	78 85       	ldd	r23, Y+8	; 0x08
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e8       	ldi	r20, 0x80	; 128
    29b2:	5f e3       	ldi	r21, 0x3F	; 63
    29b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b8:	88 23       	and	r24, r24
    29ba:	2c f4       	brge	.+10     	; 0x29c6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	3f c0       	rjmp	.+126    	; 0x2a44 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	3f ef       	ldi	r19, 0xFF	; 255
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	57 e4       	ldi	r21, 0x47	; 71
    29d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	4c f5       	brge	.+82     	; 0x2a30 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29de:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e2       	ldi	r20, 0x20	; 32
    29ec:	51 e4       	ldi	r21, 0x41	; 65
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9e 83       	std	Y+6, r25	; 0x06
    2a04:	8d 83       	std	Y+5, r24	; 0x05
    2a06:	0f c0       	rjmp	.+30     	; 0x2a26 <LCD_sendCommand+0x39a>
    2a08:	88 ec       	ldi	r24, 0xC8	; 200
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9c 83       	std	Y+4, r25	; 0x04
    2a0e:	8b 83       	std	Y+3, r24	; 0x03
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <LCD_sendCommand+0x388>
    2a18:	9c 83       	std	Y+4, r25	; 0x04
    2a1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	69 f7       	brne	.-38     	; 0x2a08 <LCD_sendCommand+0x37c>
    2a2e:	14 c0       	rjmp	.+40     	; 0x2a58 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a30:	6f 81       	ldd	r22, Y+7	; 0x07
    2a32:	78 85       	ldd	r23, Y+8	; 0x08
    2a34:	89 85       	ldd	r24, Y+9	; 0x09
    2a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9e 83       	std	Y+6, r25	; 0x06
    2a42:	8d 83       	std	Y+5, r24	; 0x05
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	9e 81       	ldd	r25, Y+6	; 0x06
    2a48:	9a 83       	std	Y+2, r25	; 0x02
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <LCD_sendCommand+0x3c4>
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a58:	e9 96       	adiw	r28, 0x39	; 57
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	de bf       	out	0x3e, r29	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a6a:	df 93       	push	r29
    2a6c:	cf 93       	push	r28
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	e9 97       	sbiw	r28, 0x39	; 57
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a80:	83 e0       	ldi	r24, 0x03	; 3
    2a82:	64 e0       	ldi	r22, 0x04	; 4
    2a84:	41 e0       	ldi	r20, 0x01	; 1
    2a86:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <GPIO_writePin>
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a0 e8       	ldi	r26, 0x80	; 128
    2a90:	bf e3       	ldi	r27, 0x3F	; 63
    2a92:	8d ab       	std	Y+53, r24	; 0x35
    2a94:	9e ab       	std	Y+54, r25	; 0x36
    2a96:	af ab       	std	Y+55, r26	; 0x37
    2a98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a9c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a9e:	8f a9       	ldd	r24, Y+55	; 0x37
    2aa0:	98 ad       	ldd	r25, Y+56	; 0x38
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	4a ef       	ldi	r20, 0xFA	; 250
    2aa8:	54 e4       	ldi	r21, 0x44	; 68
    2aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	89 ab       	std	Y+49, r24	; 0x31
    2ab4:	9a ab       	std	Y+50, r25	; 0x32
    2ab6:	ab ab       	std	Y+51, r26	; 0x33
    2ab8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2aba:	69 a9       	ldd	r22, Y+49	; 0x31
    2abc:	7a a9       	ldd	r23, Y+50	; 0x32
    2abe:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e8       	ldi	r20, 0x80	; 128
    2ac8:	5f e3       	ldi	r21, 0x3F	; 63
    2aca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ace:	88 23       	and	r24, r24
    2ad0:	2c f4       	brge	.+10     	; 0x2adc <LCD_displayCharacter+0x72>
		__ticks = 1;
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	98 ab       	std	Y+48, r25	; 0x30
    2ad8:	8f a7       	std	Y+47, r24	; 0x2f
    2ada:	3f c0       	rjmp	.+126    	; 0x2b5a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2adc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ade:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	3f ef       	ldi	r19, 0xFF	; 255
    2ae8:	4f e7       	ldi	r20, 0x7F	; 127
    2aea:	57 e4       	ldi	r21, 0x47	; 71
    2aec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af0:	18 16       	cp	r1, r24
    2af2:	4c f5       	brge	.+82     	; 0x2b46 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af4:	6d a9       	ldd	r22, Y+53	; 0x35
    2af6:	7e a9       	ldd	r23, Y+54	; 0x36
    2af8:	8f a9       	ldd	r24, Y+55	; 0x37
    2afa:	98 ad       	ldd	r25, Y+56	; 0x38
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e2       	ldi	r20, 0x20	; 32
    2b02:	51 e4       	ldi	r21, 0x41	; 65
    2b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	98 ab       	std	Y+48, r25	; 0x30
    2b1a:	8f a7       	std	Y+47, r24	; 0x2f
    2b1c:	0f c0       	rjmp	.+30     	; 0x2b3c <LCD_displayCharacter+0xd2>
    2b1e:	88 ec       	ldi	r24, 0xC8	; 200
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	9e a7       	std	Y+46, r25	; 0x2e
    2b24:	8d a7       	std	Y+45, r24	; 0x2d
    2b26:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b28:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <LCD_displayCharacter+0xc0>
    2b2e:	9e a7       	std	Y+46, r25	; 0x2e
    2b30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b34:	98 a9       	ldd	r25, Y+48	; 0x30
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	98 ab       	std	Y+48, r25	; 0x30
    2b3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	69 f7       	brne	.-38     	; 0x2b1e <LCD_displayCharacter+0xb4>
    2b44:	14 c0       	rjmp	.+40     	; 0x2b6e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b46:	69 a9       	ldd	r22, Y+49	; 0x31
    2b48:	7a a9       	ldd	r23, Y+50	; 0x32
    2b4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	98 ab       	std	Y+48, r25	; 0x30
    2b58:	8f a7       	std	Y+47, r24	; 0x2f
    2b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b5e:	9c a7       	std	Y+44, r25	; 0x2c
    2b60:	8b a7       	std	Y+43, r24	; 0x2b
    2b62:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b64:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <LCD_displayCharacter+0xfc>
    2b6a:	9c a7       	std	Y+44, r25	; 0x2c
    2b6c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b6e:	83 e0       	ldi	r24, 0x03	; 3
    2b70:	66 e0       	ldi	r22, 0x06	; 6
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <GPIO_writePin>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a0 e8       	ldi	r26, 0x80	; 128
    2b7e:	bf e3       	ldi	r27, 0x3F	; 63
    2b80:	8f a3       	std	Y+39, r24	; 0x27
    2b82:	98 a7       	std	Y+40, r25	; 0x28
    2b84:	a9 a7       	std	Y+41, r26	; 0x29
    2b86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b88:	6f a1       	ldd	r22, Y+39	; 0x27
    2b8a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b8c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	4a ef       	ldi	r20, 0xFA	; 250
    2b96:	54 e4       	ldi	r21, 0x44	; 68
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	8b a3       	std	Y+35, r24	; 0x23
    2ba2:	9c a3       	std	Y+36, r25	; 0x24
    2ba4:	ad a3       	std	Y+37, r26	; 0x25
    2ba6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    2baa:	7c a1       	ldd	r23, Y+36	; 0x24
    2bac:	8d a1       	ldd	r24, Y+37	; 0x25
    2bae:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	2c f4       	brge	.+10     	; 0x2bca <LCD_displayCharacter+0x160>
		__ticks = 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	9a a3       	std	Y+34, r25	; 0x22
    2bc6:	89 a3       	std	Y+33, r24	; 0x21
    2bc8:	3f c0       	rjmp	.+126    	; 0x2c48 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2bca:	6b a1       	ldd	r22, Y+35	; 0x23
    2bcc:	7c a1       	ldd	r23, Y+36	; 0x24
    2bce:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	3f ef       	ldi	r19, 0xFF	; 255
    2bd6:	4f e7       	ldi	r20, 0x7F	; 127
    2bd8:	57 e4       	ldi	r21, 0x47	; 71
    2bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bde:	18 16       	cp	r1, r24
    2be0:	4c f5       	brge	.+82     	; 0x2c34 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be2:	6f a1       	ldd	r22, Y+39	; 0x27
    2be4:	78 a5       	ldd	r23, Y+40	; 0x28
    2be6:	89 a5       	ldd	r24, Y+41	; 0x29
    2be8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e2       	ldi	r20, 0x20	; 32
    2bf0:	51 e4       	ldi	r21, 0x41	; 65
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9a a3       	std	Y+34, r25	; 0x22
    2c08:	89 a3       	std	Y+33, r24	; 0x21
    2c0a:	0f c0       	rjmp	.+30     	; 0x2c2a <LCD_displayCharacter+0x1c0>
    2c0c:	88 ec       	ldi	r24, 0xC8	; 200
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	98 a3       	std	Y+32, r25	; 0x20
    2c12:	8f 8f       	std	Y+31, r24	; 0x1f
    2c14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c16:	98 a1       	ldd	r25, Y+32	; 0x20
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <LCD_displayCharacter+0x1ae>
    2c1c:	98 a3       	std	Y+32, r25	; 0x20
    2c1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	89 a1       	ldd	r24, Y+33	; 0x21
    2c22:	9a a1       	ldd	r25, Y+34	; 0x22
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	9a a3       	std	Y+34, r25	; 0x22
    2c28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	69 f7       	brne	.-38     	; 0x2c0c <LCD_displayCharacter+0x1a2>
    2c32:	14 c0       	rjmp	.+40     	; 0x2c5c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c34:	6b a1       	ldd	r22, Y+35	; 0x23
    2c36:	7c a1       	ldd	r23, Y+36	; 0x24
    2c38:	8d a1       	ldd	r24, Y+37	; 0x25
    2c3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9a a3       	std	Y+34, r25	; 0x22
    2c46:	89 a3       	std	Y+33, r24	; 0x21
    2c48:	89 a1       	ldd	r24, Y+33	; 0x21
    2c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c4e:	8d 8f       	std	Y+29, r24	; 0x1d
    2c50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LCD_displayCharacter+0x1ea>
    2c58:	9e 8f       	std	Y+30, r25	; 0x1e
    2c5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2c5c:	82 e0       	ldi	r24, 0x02	; 2
    2c5e:	69 ad       	ldd	r22, Y+57	; 0x39
    2c60:	0e 94 29 11 	call	0x2252	; 0x2252 <GPIO_writePort>
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	a0 e8       	ldi	r26, 0x80	; 128
    2c6a:	bf e3       	ldi	r27, 0x3F	; 63
    2c6c:	89 8f       	std	Y+25, r24	; 0x19
    2c6e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c70:	ab 8f       	std	Y+27, r26	; 0x1b
    2c72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c74:	69 8d       	ldd	r22, Y+25	; 0x19
    2c76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	4a ef       	ldi	r20, 0xFA	; 250
    2c82:	54 e4       	ldi	r21, 0x44	; 68
    2c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	8d 8b       	std	Y+21, r24	; 0x15
    2c8e:	9e 8b       	std	Y+22, r25	; 0x16
    2c90:	af 8b       	std	Y+23, r26	; 0x17
    2c92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c94:	6d 89       	ldd	r22, Y+21	; 0x15
    2c96:	7e 89       	ldd	r23, Y+22	; 0x16
    2c98:	8f 89       	ldd	r24, Y+23	; 0x17
    2c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e8       	ldi	r20, 0x80	; 128
    2ca2:	5f e3       	ldi	r21, 0x3F	; 63
    2ca4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca8:	88 23       	and	r24, r24
    2caa:	2c f4       	brge	.+10     	; 0x2cb6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9c 8b       	std	Y+20, r25	; 0x14
    2cb2:	8b 8b       	std	Y+19, r24	; 0x13
    2cb4:	3f c0       	rjmp	.+126    	; 0x2d34 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2cb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cba:	8f 89       	ldd	r24, Y+23	; 0x17
    2cbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	3f ef       	ldi	r19, 0xFF	; 255
    2cc2:	4f e7       	ldi	r20, 0x7F	; 127
    2cc4:	57 e4       	ldi	r21, 0x47	; 71
    2cc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cca:	18 16       	cp	r1, r24
    2ccc:	4c f5       	brge	.+82     	; 0x2d20 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cce:	69 8d       	ldd	r22, Y+25	; 0x19
    2cd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e2       	ldi	r20, 0x20	; 32
    2cdc:	51 e4       	ldi	r21, 0x41	; 65
    2cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9c 8b       	std	Y+20, r25	; 0x14
    2cf4:	8b 8b       	std	Y+19, r24	; 0x13
    2cf6:	0f c0       	rjmp	.+30     	; 0x2d16 <LCD_displayCharacter+0x2ac>
    2cf8:	88 ec       	ldi	r24, 0xC8	; 200
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	9a 8b       	std	Y+18, r25	; 0x12
    2cfe:	89 8b       	std	Y+17, r24	; 0x11
    2d00:	89 89       	ldd	r24, Y+17	; 0x11
    2d02:	9a 89       	ldd	r25, Y+18	; 0x12
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_displayCharacter+0x29a>
    2d08:	9a 8b       	std	Y+18, r25	; 0x12
    2d0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	9c 8b       	std	Y+20, r25	; 0x14
    2d14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d16:	8b 89       	ldd	r24, Y+19	; 0x13
    2d18:	9c 89       	ldd	r25, Y+20	; 0x14
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	69 f7       	brne	.-38     	; 0x2cf8 <LCD_displayCharacter+0x28e>
    2d1e:	14 c0       	rjmp	.+40     	; 0x2d48 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d20:	6d 89       	ldd	r22, Y+21	; 0x15
    2d22:	7e 89       	ldd	r23, Y+22	; 0x16
    2d24:	8f 89       	ldd	r24, Y+23	; 0x17
    2d26:	98 8d       	ldd	r25, Y+24	; 0x18
    2d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	9c 8b       	std	Y+20, r25	; 0x14
    2d32:	8b 8b       	std	Y+19, r24	; 0x13
    2d34:	8b 89       	ldd	r24, Y+19	; 0x13
    2d36:	9c 89       	ldd	r25, Y+20	; 0x14
    2d38:	98 8b       	std	Y+16, r25	; 0x10
    2d3a:	8f 87       	std	Y+15, r24	; 0x0f
    2d3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3e:	98 89       	ldd	r25, Y+16	; 0x10
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <LCD_displayCharacter+0x2d6>
    2d44:	98 8b       	std	Y+16, r25	; 0x10
    2d46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d48:	83 e0       	ldi	r24, 0x03	; 3
    2d4a:	66 e0       	ldi	r22, 0x06	; 6
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <GPIO_writePin>
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	a0 e8       	ldi	r26, 0x80	; 128
    2d58:	bf e3       	ldi	r27, 0x3F	; 63
    2d5a:	8b 87       	std	Y+11, r24	; 0x0b
    2d5c:	9c 87       	std	Y+12, r25	; 0x0c
    2d5e:	ad 87       	std	Y+13, r26	; 0x0d
    2d60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	4a ef       	ldi	r20, 0xFA	; 250
    2d70:	54 e4       	ldi	r21, 0x44	; 68
    2d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	8f 83       	std	Y+7, r24	; 0x07
    2d7c:	98 87       	std	Y+8, r25	; 0x08
    2d7e:	a9 87       	std	Y+9, r26	; 0x09
    2d80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d82:	6f 81       	ldd	r22, Y+7	; 0x07
    2d84:	78 85       	ldd	r23, Y+8	; 0x08
    2d86:	89 85       	ldd	r24, Y+9	; 0x09
    2d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e8       	ldi	r20, 0x80	; 128
    2d90:	5f e3       	ldi	r21, 0x3F	; 63
    2d92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d96:	88 23       	and	r24, r24
    2d98:	2c f4       	brge	.+10     	; 0x2da4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
    2da2:	3f c0       	rjmp	.+126    	; 0x2e22 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2da4:	6f 81       	ldd	r22, Y+7	; 0x07
    2da6:	78 85       	ldd	r23, Y+8	; 0x08
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	3f ef       	ldi	r19, 0xFF	; 255
    2db0:	4f e7       	ldi	r20, 0x7F	; 127
    2db2:	57 e4       	ldi	r21, 0x47	; 71
    2db4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db8:	18 16       	cp	r1, r24
    2dba:	4c f5       	brge	.+82     	; 0x2e0e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e2       	ldi	r20, 0x20	; 32
    2dca:	51 e4       	ldi	r21, 0x41	; 65
    2dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	bc 01       	movw	r22, r24
    2dd6:	cd 01       	movw	r24, r26
    2dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	9e 83       	std	Y+6, r25	; 0x06
    2de2:	8d 83       	std	Y+5, r24	; 0x05
    2de4:	0f c0       	rjmp	.+30     	; 0x2e04 <LCD_displayCharacter+0x39a>
    2de6:	88 ec       	ldi	r24, 0xC8	; 200
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	9c 83       	std	Y+4, r25	; 0x04
    2dec:	8b 83       	std	Y+3, r24	; 0x03
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	9c 81       	ldd	r25, Y+4	; 0x04
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	f1 f7       	brne	.-4      	; 0x2df2 <LCD_displayCharacter+0x388>
    2df6:	9c 83       	std	Y+4, r25	; 0x04
    2df8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
    2e00:	9e 83       	std	Y+6, r25	; 0x06
    2e02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e04:	8d 81       	ldd	r24, Y+5	; 0x05
    2e06:	9e 81       	ldd	r25, Y+6	; 0x06
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	69 f7       	brne	.-38     	; 0x2de6 <LCD_displayCharacter+0x37c>
    2e0c:	14 c0       	rjmp	.+40     	; 0x2e36 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e10:	78 85       	ldd	r23, Y+8	; 0x08
    2e12:	89 85       	ldd	r24, Y+9	; 0x09
    2e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	9e 83       	std	Y+6, r25	; 0x06
    2e20:	8d 83       	std	Y+5, r24	; 0x05
    2e22:	8d 81       	ldd	r24, Y+5	; 0x05
    2e24:	9e 81       	ldd	r25, Y+6	; 0x06
    2e26:	9a 83       	std	Y+2, r25	; 0x02
    2e28:	89 83       	std	Y+1, r24	; 0x01
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <LCD_displayCharacter+0x3c4>
    2e32:	9a 83       	std	Y+2, r25	; 0x02
    2e34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e36:	e9 96       	adiw	r28, 0x39	; 57
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <LCD_displayString+0x6>
    2e4e:	0f 92       	push	r0
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	9b 83       	std	Y+3, r25	; 0x03
    2e56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e58:	19 82       	std	Y+1, r1	; 0x01
    2e5a:	0e c0       	rjmp	.+28     	; 0x2e78 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	28 2f       	mov	r18, r24
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	9b 81       	ldd	r25, Y+3	; 0x03
    2e66:	fc 01       	movw	r30, r24
    2e68:	e2 0f       	add	r30, r18
    2e6a:	f3 1f       	adc	r31, r19
    2e6c:	80 81       	ld	r24, Z
    2e6e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_displayCharacter>
		i++;
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	8f 5f       	subi	r24, 0xFF	; 255
    2e76:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	9b 81       	ldd	r25, Y+3	; 0x03
    2e82:	fc 01       	movw	r30, r24
    2e84:	e2 0f       	add	r30, r18
    2e86:	f3 1f       	adc	r31, r19
    2e88:	80 81       	ld	r24, Z
    2e8a:	88 23       	and	r24, r24
    2e8c:	39 f7       	brne	.-50     	; 0x2e5c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	08 95       	ret

00002e9a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <LCD_moveCursor+0x6>
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <LCD_moveCursor+0x8>
    2ea2:	0f 92       	push	r0
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	8a 83       	std	Y+2, r24	; 0x02
    2eaa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2eac:	8a 81       	ldd	r24, Y+2	; 0x02
    2eae:	28 2f       	mov	r18, r24
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	3d 83       	std	Y+5, r19	; 0x05
    2eb4:	2c 83       	std	Y+4, r18	; 0x04
    2eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	c1 f0       	breq	.+48     	; 0x2ef0 <LCD_moveCursor+0x56>
    2ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec4:	22 30       	cpi	r18, 0x02	; 2
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	2c f4       	brge	.+10     	; 0x2ed4 <LCD_moveCursor+0x3a>
    2eca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	61 f0       	breq	.+24     	; 0x2eea <LCD_moveCursor+0x50>
    2ed2:	19 c0       	rjmp	.+50     	; 0x2f06 <LCD_moveCursor+0x6c>
    2ed4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ed6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ed8:	22 30       	cpi	r18, 0x02	; 2
    2eda:	31 05       	cpc	r19, r1
    2edc:	69 f0       	breq	.+26     	; 0x2ef8 <LCD_moveCursor+0x5e>
    2ede:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee2:	83 30       	cpi	r24, 0x03	; 3
    2ee4:	91 05       	cpc	r25, r1
    2ee6:	61 f0       	breq	.+24     	; 0x2f00 <LCD_moveCursor+0x66>
    2ee8:	0e c0       	rjmp	.+28     	; 0x2f06 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	89 83       	std	Y+1, r24	; 0x01
    2eee:	0b c0       	rjmp	.+22     	; 0x2f06 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	80 5c       	subi	r24, 0xC0	; 192
    2ef4:	89 83       	std	Y+1, r24	; 0x01
    2ef6:	07 c0       	rjmp	.+14     	; 0x2f06 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	80 5f       	subi	r24, 0xF0	; 240
    2efc:	89 83       	std	Y+1, r24	; 0x01
    2efe:	03 c0       	rjmp	.+6      	; 0x2f06 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2f00:	8b 81       	ldd	r24, Y+3	; 0x03
    2f02:	80 5b       	subi	r24, 0xB0	; 176
    2f04:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	80 68       	ori	r24, 0x80	; 128
    2f0a:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_sendCommand>
}
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <LCD_displayStringRowColumn+0x6>
    2f24:	00 d0       	rcall	.+0      	; 0x2f26 <LCD_displayStringRowColumn+0x8>
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    2f2c:	6a 83       	std	Y+2, r22	; 0x02
    2f2e:	5c 83       	std	Y+4, r21	; 0x04
    2f30:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	6a 81       	ldd	r22, Y+2	; 0x02
    2f36:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3e:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
}
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	62 97       	sbiw	r28, 0x12	; 18
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	9a 8b       	std	Y+18, r25	; 0x12
    2f66:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f68:	89 89       	ldd	r24, Y+17	; 0x11
    2f6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f6c:	9e 01       	movw	r18, r28
    2f6e:	2f 5f       	subi	r18, 0xFF	; 255
    2f70:	3f 4f       	sbci	r19, 0xFF	; 255
    2f72:	b9 01       	movw	r22, r18
    2f74:	4a e0       	ldi	r20, 0x0A	; 10
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <itoa>
   LCD_displayString(buff); /* Display the string */
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	01 96       	adiw	r24, 0x01	; 1
    2f80:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayString>
}
    2f84:	62 96       	adiw	r28, 0x12	; 18
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	cf 91       	pop	r28
    2f92:	df 91       	pop	r29
    2f94:	08 95       	ret

00002f96 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	0e 94 46 13 	call	0x268c	; 0x268c <LCD_sendCommand>
}
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <__vector_9>:
volatile uint32 SECONDS_T1_MC2=0;
/*******************************************************************
 *                                  ISR                            *
 *******************************************************************/
//For timer 0 -> overflow (normal) mode
ISR(TIMER0_OVF_vect){
    2faa:	1f 92       	push	r1
    2fac:	0f 92       	push	r0
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	0f 92       	push	r0
    2fb2:	11 24       	eor	r1, r1
    2fb4:	2f 93       	push	r18
    2fb6:	3f 93       	push	r19
    2fb8:	4f 93       	push	r20
    2fba:	5f 93       	push	r21
    2fbc:	6f 93       	push	r22
    2fbe:	7f 93       	push	r23
    2fc0:	8f 93       	push	r24
    2fc2:	9f 93       	push	r25
    2fc4:	af 93       	push	r26
    2fc6:	bf 93       	push	r27
    2fc8:	ef 93       	push	r30
    2fca:	ff 93       	push	r31
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    2fd4:	80 91 84 01 	lds	r24, 0x0184
    2fd8:	90 91 85 01 	lds	r25, 0x0185
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	29 f0       	breq	.+10     	; 0x2fea <__vector_9+0x40>
	{
		(*g_callBackPtr0)();  /* Call call back function */
    2fe0:	e0 91 84 01 	lds	r30, 0x0184
    2fe4:	f0 91 85 01 	lds	r31, 0x0185
    2fe8:	09 95       	icall
	}
}
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	ff 91       	pop	r31
    2ff0:	ef 91       	pop	r30
    2ff2:	bf 91       	pop	r27
    2ff4:	af 91       	pop	r26
    2ff6:	9f 91       	pop	r25
    2ff8:	8f 91       	pop	r24
    2ffa:	7f 91       	pop	r23
    2ffc:	6f 91       	pop	r22
    2ffe:	5f 91       	pop	r21
    3000:	4f 91       	pop	r20
    3002:	3f 91       	pop	r19
    3004:	2f 91       	pop	r18
    3006:	0f 90       	pop	r0
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	0f 90       	pop	r0
    300c:	1f 90       	pop	r1
    300e:	18 95       	reti

00003010 <__vector_19>:

ISR(TIMER0_COMP_vect){
    3010:	1f 92       	push	r1
    3012:	0f 92       	push	r0
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	0f 92       	push	r0
    3018:	11 24       	eor	r1, r1
    301a:	2f 93       	push	r18
    301c:	3f 93       	push	r19
    301e:	4f 93       	push	r20
    3020:	5f 93       	push	r21
    3022:	6f 93       	push	r22
    3024:	7f 93       	push	r23
    3026:	8f 93       	push	r24
    3028:	9f 93       	push	r25
    302a:	af 93       	push	r26
    302c:	bf 93       	push	r27
    302e:	ef 93       	push	r30
    3030:	ff 93       	push	r31
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    303a:	80 91 84 01 	lds	r24, 0x0184
    303e:	90 91 85 01 	lds	r25, 0x0185
    3042:	00 97       	sbiw	r24, 0x00	; 0
    3044:	29 f0       	breq	.+10     	; 0x3050 <__vector_19+0x40>
	{
		(*g_callBackPtr0)();  /* Call call back function */
    3046:	e0 91 84 01 	lds	r30, 0x0184
    304a:	f0 91 85 01 	lds	r31, 0x0185
    304e:	09 95       	icall
	}
}
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	ff 91       	pop	r31
    3056:	ef 91       	pop	r30
    3058:	bf 91       	pop	r27
    305a:	af 91       	pop	r26
    305c:	9f 91       	pop	r25
    305e:	8f 91       	pop	r24
    3060:	7f 91       	pop	r23
    3062:	6f 91       	pop	r22
    3064:	5f 91       	pop	r21
    3066:	4f 91       	pop	r20
    3068:	3f 91       	pop	r19
    306a:	2f 91       	pop	r18
    306c:	0f 90       	pop	r0
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	0f 90       	pop	r0
    3072:	1f 90       	pop	r1
    3074:	18 95       	reti

00003076 <__vector_8>:

//For timer 1 -> overflow (normal) mode
ISR(TIMER1_OVF_vect){
    3076:	1f 92       	push	r1
    3078:	0f 92       	push	r0
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	0f 92       	push	r0
    307e:	11 24       	eor	r1, r1
    3080:	2f 93       	push	r18
    3082:	3f 93       	push	r19
    3084:	4f 93       	push	r20
    3086:	5f 93       	push	r21
    3088:	6f 93       	push	r22
    308a:	7f 93       	push	r23
    308c:	8f 93       	push	r24
    308e:	9f 93       	push	r25
    3090:	af 93       	push	r26
    3092:	bf 93       	push	r27
    3094:	ef 93       	push	r30
    3096:	ff 93       	push	r31
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    30a0:	80 91 86 01 	lds	r24, 0x0186
    30a4:	90 91 87 01 	lds	r25, 0x0187
    30a8:	00 97       	sbiw	r24, 0x00	; 0
    30aa:	29 f0       	breq	.+10     	; 0x30b6 <__vector_8+0x40>
	{
		(*g_callBackPtr1)();  /* Call call back function */
    30ac:	e0 91 86 01 	lds	r30, 0x0186
    30b0:	f0 91 87 01 	lds	r31, 0x0187
    30b4:	09 95       	icall
	}
}
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	ff 91       	pop	r31
    30bc:	ef 91       	pop	r30
    30be:	bf 91       	pop	r27
    30c0:	af 91       	pop	r26
    30c2:	9f 91       	pop	r25
    30c4:	8f 91       	pop	r24
    30c6:	7f 91       	pop	r23
    30c8:	6f 91       	pop	r22
    30ca:	5f 91       	pop	r21
    30cc:	4f 91       	pop	r20
    30ce:	3f 91       	pop	r19
    30d0:	2f 91       	pop	r18
    30d2:	0f 90       	pop	r0
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	0f 90       	pop	r0
    30d8:	1f 90       	pop	r1
    30da:	18 95       	reti

000030dc <__vector_6>:

ISR(TIMER1_COMPA_vect){
    30dc:	1f 92       	push	r1
    30de:	0f 92       	push	r0
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	0f 92       	push	r0
    30e4:	11 24       	eor	r1, r1
    30e6:	2f 93       	push	r18
    30e8:	3f 93       	push	r19
    30ea:	4f 93       	push	r20
    30ec:	5f 93       	push	r21
    30ee:	6f 93       	push	r22
    30f0:	7f 93       	push	r23
    30f2:	8f 93       	push	r24
    30f4:	9f 93       	push	r25
    30f6:	af 93       	push	r26
    30f8:	bf 93       	push	r27
    30fa:	ef 93       	push	r30
    30fc:	ff 93       	push	r31
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    3106:	80 91 86 01 	lds	r24, 0x0186
    310a:	90 91 87 01 	lds	r25, 0x0187
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	29 f0       	breq	.+10     	; 0x311c <__vector_6+0x40>
	{
		(*g_callBackPtr1)();  /* Call call back function */
    3112:	e0 91 86 01 	lds	r30, 0x0186
    3116:	f0 91 87 01 	lds	r31, 0x0187
    311a:	09 95       	icall
	}
}
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	ff 91       	pop	r31
    3122:	ef 91       	pop	r30
    3124:	bf 91       	pop	r27
    3126:	af 91       	pop	r26
    3128:	9f 91       	pop	r25
    312a:	8f 91       	pop	r24
    312c:	7f 91       	pop	r23
    312e:	6f 91       	pop	r22
    3130:	5f 91       	pop	r21
    3132:	4f 91       	pop	r20
    3134:	3f 91       	pop	r19
    3136:	2f 91       	pop	r18
    3138:	0f 90       	pop	r0
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	0f 90       	pop	r0
    313e:	1f 90       	pop	r1
    3140:	18 95       	reti

00003142 <__vector_4>:

//For timer 2 -> overflow (normal) mode
ISR(TIMER2_OVF_vect){
    3142:	1f 92       	push	r1
    3144:	0f 92       	push	r0
    3146:	0f b6       	in	r0, 0x3f	; 63
    3148:	0f 92       	push	r0
    314a:	11 24       	eor	r1, r1
    314c:	2f 93       	push	r18
    314e:	3f 93       	push	r19
    3150:	4f 93       	push	r20
    3152:	5f 93       	push	r21
    3154:	6f 93       	push	r22
    3156:	7f 93       	push	r23
    3158:	8f 93       	push	r24
    315a:	9f 93       	push	r25
    315c:	af 93       	push	r26
    315e:	bf 93       	push	r27
    3160:	ef 93       	push	r30
    3162:	ff 93       	push	r31
    3164:	df 93       	push	r29
    3166:	cf 93       	push	r28
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    316c:	80 91 88 01 	lds	r24, 0x0188
    3170:	90 91 89 01 	lds	r25, 0x0189
    3174:	00 97       	sbiw	r24, 0x00	; 0
    3176:	29 f0       	breq	.+10     	; 0x3182 <__vector_4+0x40>
	{
		(*g_callBackPtr2)();  /* Call call back function */
    3178:	e0 91 88 01 	lds	r30, 0x0188
    317c:	f0 91 89 01 	lds	r31, 0x0189
    3180:	09 95       	icall
	}
}
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	ff 91       	pop	r31
    3188:	ef 91       	pop	r30
    318a:	bf 91       	pop	r27
    318c:	af 91       	pop	r26
    318e:	9f 91       	pop	r25
    3190:	8f 91       	pop	r24
    3192:	7f 91       	pop	r23
    3194:	6f 91       	pop	r22
    3196:	5f 91       	pop	r21
    3198:	4f 91       	pop	r20
    319a:	3f 91       	pop	r19
    319c:	2f 91       	pop	r18
    319e:	0f 90       	pop	r0
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	0f 90       	pop	r0
    31a4:	1f 90       	pop	r1
    31a6:	18 95       	reti

000031a8 <__vector_3>:

ISR(TIMER2_COMP_vect){
    31a8:	1f 92       	push	r1
    31aa:	0f 92       	push	r0
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	0f 92       	push	r0
    31b0:	11 24       	eor	r1, r1
    31b2:	2f 93       	push	r18
    31b4:	3f 93       	push	r19
    31b6:	4f 93       	push	r20
    31b8:	5f 93       	push	r21
    31ba:	6f 93       	push	r22
    31bc:	7f 93       	push	r23
    31be:	8f 93       	push	r24
    31c0:	9f 93       	push	r25
    31c2:	af 93       	push	r26
    31c4:	bf 93       	push	r27
    31c6:	ef 93       	push	r30
    31c8:	ff 93       	push	r31
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    31d2:	80 91 88 01 	lds	r24, 0x0188
    31d6:	90 91 89 01 	lds	r25, 0x0189
    31da:	00 97       	sbiw	r24, 0x00	; 0
    31dc:	29 f0       	breq	.+10     	; 0x31e8 <__vector_3+0x40>
	{
		(*g_callBackPtr2)();  /* Call call back function */
    31de:	e0 91 88 01 	lds	r30, 0x0188
    31e2:	f0 91 89 01 	lds	r31, 0x0189
    31e6:	09 95       	icall
	}
}
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	ff 91       	pop	r31
    31ee:	ef 91       	pop	r30
    31f0:	bf 91       	pop	r27
    31f2:	af 91       	pop	r26
    31f4:	9f 91       	pop	r25
    31f6:	8f 91       	pop	r24
    31f8:	7f 91       	pop	r23
    31fa:	6f 91       	pop	r22
    31fc:	5f 91       	pop	r21
    31fe:	4f 91       	pop	r20
    3200:	3f 91       	pop	r19
    3202:	2f 91       	pop	r18
    3204:	0f 90       	pop	r0
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	0f 90       	pop	r0
    320a:	1f 90       	pop	r1
    320c:	18 95       	reti

0000320e <Timer_init>:
/***************************************************
 * Description : Initialize the Timer
 * Argument    : pointer to struct (TIMER_congif)
 * Returns     : None
 ***************************************************/
void Timer_init(const TIMER_config * Config_Ptr){
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	00 d0       	rcall	.+0      	; 0x3214 <Timer_init+0x6>
    3214:	00 d0       	rcall	.+0      	; 0x3216 <Timer_init+0x8>
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->channel){
    321e:	e9 81       	ldd	r30, Y+1	; 0x01
    3220:	fa 81       	ldd	r31, Y+2	; 0x02
    3222:	80 81       	ld	r24, Z
    3224:	28 2f       	mov	r18, r24
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	3c 83       	std	Y+4, r19	; 0x04
    322a:	2b 83       	std	Y+3, r18	; 0x03
    322c:	8b 81       	ldd	r24, Y+3	; 0x03
    322e:	9c 81       	ldd	r25, Y+4	; 0x04
    3230:	81 30       	cpi	r24, 0x01	; 1
    3232:	91 05       	cpc	r25, r1
    3234:	09 f4       	brne	.+2      	; 0x3238 <Timer_init+0x2a>
    3236:	6d c0       	rjmp	.+218    	; 0x3312 <Timer_init+0x104>
    3238:	2b 81       	ldd	r18, Y+3	; 0x03
    323a:	3c 81       	ldd	r19, Y+4	; 0x04
    323c:	22 30       	cpi	r18, 0x02	; 2
    323e:	31 05       	cpc	r19, r1
    3240:	09 f4       	brne	.+2      	; 0x3244 <Timer_init+0x36>
    3242:	c1 c0       	rjmp	.+386    	; 0x33c6 <Timer_init+0x1b8>
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	9c 81       	ldd	r25, Y+4	; 0x04
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	09 f0       	breq	.+2      	; 0x324e <Timer_init+0x40>
    324c:	01 c1       	rjmp	.+514    	; 0x3450 <Timer_init+0x242>

	case timer0:
		SET_BIT(TCCR0,FOC0);//for non PWM mode
    324e:	a3 e5       	ldi	r26, 0x53	; 83
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e3 e5       	ldi	r30, 0x53	; 83
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	80 68       	ori	r24, 0x80	; 128
    325a:	8c 93       	st	X, r24
		if(Config_Ptr->mode==normal){
    325c:	e9 81       	ldd	r30, Y+1	; 0x01
    325e:	fa 81       	ldd	r31, Y+2	; 0x02
    3260:	82 81       	ldd	r24, Z+2	; 0x02
    3262:	88 23       	and	r24, r24
    3264:	21 f5       	brne	.+72     	; 0x32ae <Timer_init+0xa0>
			//enable interrupt for normal mode -> timer 0
			SET_BIT(TIMSK,TOIE0);
    3266:	a9 e5       	ldi	r26, 0x59	; 89
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	e9 e5       	ldi	r30, 0x59	; 89
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	81 60       	ori	r24, 0x01	; 1
    3272:	8c 93       	st	X, r24
			//Activate normal (overflow) mode
			CLEAR_BIT(TCCR0,WGM00);
    3274:	a3 e5       	ldi	r26, 0x53	; 83
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	e3 e5       	ldi	r30, 0x53	; 83
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	8f 7b       	andi	r24, 0xBF	; 191
    3280:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,WGM01);
    3282:	a3 e5       	ldi	r26, 0x53	; 83
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	e3 e5       	ldi	r30, 0x53	; 83
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	87 7f       	andi	r24, 0xF7	; 247
    328e:	8c 93       	st	X, r24
			//disconnect OC0
			CLEAR_BIT(TCCR0,COM00);
    3290:	a3 e5       	ldi	r26, 0x53	; 83
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	e3 e5       	ldi	r30, 0x53	; 83
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	8f 7e       	andi	r24, 0xEF	; 239
    329c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
    329e:	a3 e5       	ldi	r26, 0x53	; 83
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	e3 e5       	ldi	r30, 0x53	; 83
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	8f 7d       	andi	r24, 0xDF	; 223
    32aa:	8c 93       	st	X, r24
    32ac:	21 c0       	rjmp	.+66     	; 0x32f0 <Timer_init+0xe2>
		}
		else if(Config_Ptr->mode==ctc){
    32ae:	e9 81       	ldd	r30, Y+1	; 0x01
    32b0:	fa 81       	ldd	r31, Y+2	; 0x02
    32b2:	82 81       	ldd	r24, Z+2	; 0x02
    32b4:	82 30       	cpi	r24, 0x02	; 2
    32b6:	e1 f4       	brne	.+56     	; 0x32f0 <Timer_init+0xe2>
			//enable interrupt for CTC mode -> timer 0
			SET_BIT(TIMSK,OCIE0);
    32b8:	a9 e5       	ldi	r26, 0x59	; 89
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	e9 e5       	ldi	r30, 0x59	; 89
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	82 60       	ori	r24, 0x02	; 2
    32c4:	8c 93       	st	X, r24
			//Activate CTC (compare) mode
			CLEAR_BIT(TCCR0,WGM00);
    32c6:	a3 e5       	ldi	r26, 0x53	; 83
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	e3 e5       	ldi	r30, 0x53	; 83
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	8f 7b       	andi	r24, 0xBF	; 191
    32d2:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    32d4:	a3 e5       	ldi	r26, 0x53	; 83
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	e3 e5       	ldi	r30, 0x53	; 83
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	88 60       	ori	r24, 0x08	; 8
    32e0:	8c 93       	st	X, r24
			//add the compare value
			OCR0=(uint8)Config_Ptr->compare_value;
    32e2:	ac e5       	ldi	r26, 0x5C	; 92
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e9 81       	ldd	r30, Y+1	; 0x01
    32e8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ea:	83 81       	ldd	r24, Z+3	; 0x03
    32ec:	94 81       	ldd	r25, Z+4	; 0x04
    32ee:	8c 93       	st	X, r24
		}
		TCNT0 =0; /* Clear counter register */
    32f0:	e2 e5       	ldi	r30, 0x52	; 82
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	10 82       	st	Z, r1
		TCCR0 =(TCCR0 &(~0X07)) | (Config_Ptr->clock & 0x07); /* configure Pre-scaler */
    32f6:	a3 e5       	ldi	r26, 0x53	; 83
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	e3 e5       	ldi	r30, 0x53	; 83
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	80 81       	ld	r24, Z
    3300:	98 2f       	mov	r25, r24
    3302:	98 7f       	andi	r25, 0xF8	; 248
    3304:	e9 81       	ldd	r30, Y+1	; 0x01
    3306:	fa 81       	ldd	r31, Y+2	; 0x02
    3308:	81 81       	ldd	r24, Z+1	; 0x01
    330a:	87 70       	andi	r24, 0x07	; 7
    330c:	89 2b       	or	r24, r25
    330e:	8c 93       	st	X, r24
    3310:	9f c0       	rjmp	.+318    	; 0x3450 <Timer_init+0x242>
		break;

	case timer1:
		//for non PWM mode
		SET_BIT(TCCR1A,FOC1A);
    3312:	af e4       	ldi	r26, 0x4F	; 79
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	ef e4       	ldi	r30, 0x4F	; 79
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	80 81       	ld	r24, Z
    331c:	88 60       	ori	r24, 0x08	; 8
    331e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    3320:	af e4       	ldi	r26, 0x4F	; 79
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	ef e4       	ldi	r30, 0x4F	; 79
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	84 60       	ori	r24, 0x04	; 4
    332c:	8c 93       	st	X, r24
		if(Config_Ptr->mode==normal){
    332e:	e9 81       	ldd	r30, Y+1	; 0x01
    3330:	fa 81       	ldd	r31, Y+2	; 0x02
    3332:	82 81       	ldd	r24, Z+2	; 0x02
    3334:	88 23       	and	r24, r24
    3336:	91 f4       	brne	.+36     	; 0x335c <Timer_init+0x14e>
			//enable interrupt for normal mode -> timer 1
			SET_BIT(TIMSK,TOIE1);
    3338:	a9 e5       	ldi	r26, 0x59	; 89
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e9 e5       	ldi	r30, 0x59	; 89
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	84 60       	ori	r24, 0x04	; 4
    3344:	8c 93       	st	X, r24
			TCCR1B=0;
    3346:	ee e4       	ldi	r30, 0x4E	; 78
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	10 82       	st	Z, r1
			TCCR1A &= ~0XF3;
    334c:	af e4       	ldi	r26, 0x4F	; 79
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	ef e4       	ldi	r30, 0x4F	; 79
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	8c 70       	andi	r24, 0x0C	; 12
    3358:	8c 93       	st	X, r24
    335a:	23 c0       	rjmp	.+70     	; 0x33a2 <Timer_init+0x194>
		}
		else if(Config_Ptr->mode==ctc){
    335c:	e9 81       	ldd	r30, Y+1	; 0x01
    335e:	fa 81       	ldd	r31, Y+2	; 0x02
    3360:	82 81       	ldd	r24, Z+2	; 0x02
    3362:	82 30       	cpi	r24, 0x02	; 2
    3364:	f1 f4       	brne	.+60     	; 0x33a2 <Timer_init+0x194>
			//enable interrupt for CTC mode -> timer 1
			SET_BIT(TIMSK,OCIE1A);
    3366:	a9 e5       	ldi	r26, 0x59	; 89
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	e9 e5       	ldi	r30, 0x59	; 89
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	80 81       	ld	r24, Z
    3370:	80 61       	ori	r24, 0x10	; 16
    3372:	8c 93       	st	X, r24
			//activate compare mode
			TCCR1B |= 0X08; /* set bit WGM12 Bit 3*/
    3374:	ae e4       	ldi	r26, 0x4E	; 78
    3376:	b0 e0       	ldi	r27, 0x00	; 0
    3378:	ee e4       	ldi	r30, 0x4E	; 78
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	88 60       	ori	r24, 0x08	; 8
    3380:	8c 93       	st	X, r24
			TCCR1A &= ~0XF3;
    3382:	af e4       	ldi	r26, 0x4F	; 79
    3384:	b0 e0       	ldi	r27, 0x00	; 0
    3386:	ef e4       	ldi	r30, 0x4F	; 79
    3388:	f0 e0       	ldi	r31, 0x00	; 0
    338a:	80 81       	ld	r24, Z
    338c:	8c 70       	andi	r24, 0x0C	; 12
    338e:	8c 93       	st	X, r24
			OCR1A = Config_Ptr->compare_value; /* enter compare value */
    3390:	aa e4       	ldi	r26, 0x4A	; 74
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	e9 81       	ldd	r30, Y+1	; 0x01
    3396:	fa 81       	ldd	r31, Y+2	; 0x02
    3398:	83 81       	ldd	r24, Z+3	; 0x03
    339a:	94 81       	ldd	r25, Z+4	; 0x04
    339c:	11 96       	adiw	r26, 0x01	; 1
    339e:	9c 93       	st	X, r25
    33a0:	8e 93       	st	-X, r24
		}
		TCNT1=0;    /* Clear Counter 1 */
    33a2:	ec e4       	ldi	r30, 0x4C	; 76
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	11 82       	std	Z+1, r1	; 0x01
    33a8:	10 82       	st	Z, r1
		TCCR1B =(TCCR1B &(~0X07)) | (Config_Ptr->clock & 0x07); /* configure Pre-scaler */
    33aa:	ae e4       	ldi	r26, 0x4E	; 78
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	ee e4       	ldi	r30, 0x4E	; 78
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	98 2f       	mov	r25, r24
    33b6:	98 7f       	andi	r25, 0xF8	; 248
    33b8:	e9 81       	ldd	r30, Y+1	; 0x01
    33ba:	fa 81       	ldd	r31, Y+2	; 0x02
    33bc:	81 81       	ldd	r24, Z+1	; 0x01
    33be:	87 70       	andi	r24, 0x07	; 7
    33c0:	89 2b       	or	r24, r25
    33c2:	8c 93       	st	X, r24
    33c4:	45 c0       	rjmp	.+138    	; 0x3450 <Timer_init+0x242>
		break;

	case timer2:
		//for non PWM mode
		SET_BIT(TCCR2,FOC2);
    33c6:	a5 e4       	ldi	r26, 0x45	; 69
    33c8:	b0 e0       	ldi	r27, 0x00	; 0
    33ca:	e5 e4       	ldi	r30, 0x45	; 69
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	80 81       	ld	r24, Z
    33d0:	80 68       	ori	r24, 0x80	; 128
    33d2:	8c 93       	st	X, r24
		if(Config_Ptr->mode==normal){
    33d4:	e9 81       	ldd	r30, Y+1	; 0x01
    33d6:	fa 81       	ldd	r31, Y+2	; 0x02
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	88 23       	and	r24, r24
    33dc:	79 f4       	brne	.+30     	; 0x33fc <Timer_init+0x1ee>
			//enable interrupt for normal mode -> timer 2
			SET_BIT(TIMSK,OCIE2);
    33de:	a9 e5       	ldi	r26, 0x59	; 89
    33e0:	b0 e0       	ldi	r27, 0x00	; 0
    33e2:	e9 e5       	ldi	r30, 0x59	; 89
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	80 81       	ld	r24, Z
    33e8:	80 68       	ori	r24, 0x80	; 128
    33ea:	8c 93       	st	X, r24
			TCCR2 &= ~0X78;
    33ec:	a5 e4       	ldi	r26, 0x45	; 69
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	e5 e4       	ldi	r30, 0x45	; 69
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	87 78       	andi	r24, 0x87	; 135
    33f8:	8c 93       	st	X, r24
    33fa:	1a c0       	rjmp	.+52     	; 0x3430 <Timer_init+0x222>
		}
		else if(Config_Ptr->mode==ctc){
    33fc:	e9 81       	ldd	r30, Y+1	; 0x01
    33fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3400:	82 81       	ldd	r24, Z+2	; 0x02
    3402:	82 30       	cpi	r24, 0x02	; 2
    3404:	a9 f4       	brne	.+42     	; 0x3430 <Timer_init+0x222>
			//enable interrupt for CTC mode -> timer 2
			SET_BIT(TIMSK,TOIE2);
    3406:	a9 e5       	ldi	r26, 0x59	; 89
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e9 e5       	ldi	r30, 0x59	; 89
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	80 64       	ori	r24, 0x40	; 64
    3412:	8c 93       	st	X, r24
			TCCR2 |= 0X08;        /* WGM20 0 WGM21 1 Normal CTC Mode */
    3414:	a5 e4       	ldi	r26, 0x45	; 69
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	e5 e4       	ldi	r30, 0x45	; 69
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	88 60       	ori	r24, 0x08	; 8
    3420:	8c 93       	st	X, r24
			OCR2 =(uint8) Config_Ptr->compare_value; /* enter compare value*/
    3422:	a3 e4       	ldi	r26, 0x43	; 67
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	e9 81       	ldd	r30, Y+1	; 0x01
    3428:	fa 81       	ldd	r31, Y+2	; 0x02
    342a:	83 81       	ldd	r24, Z+3	; 0x03
    342c:	94 81       	ldd	r25, Z+4	; 0x04
    342e:	8c 93       	st	X, r24
		}
		TCNT2 =0; /* Clear counter register */
    3430:	e4 e4       	ldi	r30, 0x44	; 68
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	10 82       	st	Z, r1
		TCCR2 =(TCCR2 &(~0X07)) | (Config_Ptr->clock & 0x07); /* configure Pre-scaler */
    3436:	a5 e4       	ldi	r26, 0x45	; 69
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e5 e4       	ldi	r30, 0x45	; 69
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	98 2f       	mov	r25, r24
    3442:	98 7f       	andi	r25, 0xF8	; 248
    3444:	e9 81       	ldd	r30, Y+1	; 0x01
    3446:	fa 81       	ldd	r31, Y+2	; 0x02
    3448:	81 81       	ldd	r24, Z+1	; 0x01
    344a:	87 70       	andi	r24, 0x07	; 7
    344c:	89 2b       	or	r24, r25
    344e:	8c 93       	st	X, r24
		break;
	}
}
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	cf 91       	pop	r28
    345a:	df 91       	pop	r29
    345c:	08 95       	ret

0000345e <Timer_deInit>:
 * Description : deinitialize the Timer
 * Argument    : channel of the timer -> timer 0,1,2
 * Returns     : None
 ***************************************************/

void Timer_deInit(Timer_channel channel){
    345e:	df 93       	push	r29
    3460:	cf 93       	push	r28
    3462:	00 d0       	rcall	.+0      	; 0x3464 <Timer_deInit+0x6>
    3464:	0f 92       	push	r0
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	89 83       	std	Y+1, r24	; 0x01
	switch (channel)
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	3b 83       	std	Y+3, r19	; 0x03
    3474:	2a 83       	std	Y+2, r18	; 0x02
    3476:	8a 81       	ldd	r24, Y+2	; 0x02
    3478:	9b 81       	ldd	r25, Y+3	; 0x03
    347a:	81 30       	cpi	r24, 0x01	; 1
    347c:	91 05       	cpc	r25, r1
    347e:	d1 f0       	breq	.+52     	; 0x34b4 <Timer_deInit+0x56>
    3480:	2a 81       	ldd	r18, Y+2	; 0x02
    3482:	3b 81       	ldd	r19, Y+3	; 0x03
    3484:	22 30       	cpi	r18, 0x02	; 2
    3486:	31 05       	cpc	r19, r1
    3488:	59 f1       	breq	.+86     	; 0x34e0 <Timer_deInit+0x82>
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	9b 81       	ldd	r25, Y+3	; 0x03
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	b9 f5       	brne	.+110    	; 0x3500 <Timer_deInit+0xa2>
	{
	case timer0:
		TIMSK &= ~0X03; /* Disable All TIMER0 interrupt */
    3492:	a9 e5       	ldi	r26, 0x59	; 89
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	e9 e5       	ldi	r30, 0x59	; 89
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	8c 7f       	andi	r24, 0xFC	; 252
    349e:	8c 93       	st	X, r24
		TCNT0=0;        /* Disable timer0 */
    34a0:	e2 e5       	ldi	r30, 0x52	; 82
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	10 82       	st	Z, r1
		TCCR0=0;        /* Clear Counter*/
    34a6:	e3 e5       	ldi	r30, 0x53	; 83
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	10 82       	st	Z, r1
		OCR0=0;         /*Clear Compare Register*/
    34ac:	ec e5       	ldi	r30, 0x5C	; 92
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	10 82       	st	Z, r1
    34b2:	26 c0       	rjmp	.+76     	; 0x3500 <Timer_deInit+0xa2>
		break;
	case timer1:
		TIMSK &= ~0X1C; /*Disable All TIMER1 Interrupt */
    34b4:	a9 e5       	ldi	r26, 0x59	; 89
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	e9 e5       	ldi	r30, 0x59	; 89
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	83 7e       	andi	r24, 0xE3	; 227
    34c0:	8c 93       	st	X, r24
		TCCR1A=0;       /* Disable Timer1 */
    34c2:	ef e4       	ldi	r30, 0x4F	; 79
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	10 82       	st	Z, r1
		TCCR1B=0;
    34c8:	ee e4       	ldi	r30, 0x4E	; 78
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	10 82       	st	Z, r1
		TCNT1=0;        /* Clear Counter*/
    34ce:	ec e4       	ldi	r30, 0x4C	; 76
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	11 82       	std	Z+1, r1	; 0x01
    34d4:	10 82       	st	Z, r1
		OCR1A=0;        /*Clear Compare Register*/
    34d6:	ea e4       	ldi	r30, 0x4A	; 74
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	11 82       	std	Z+1, r1	; 0x01
    34dc:	10 82       	st	Z, r1
    34de:	10 c0       	rjmp	.+32     	; 0x3500 <Timer_deInit+0xa2>

		break;
	case timer2:
		TIMSK &= ~0XC0; /* Disable All TIMER2 interrupt */
    34e0:	a9 e5       	ldi	r26, 0x59	; 89
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e9 e5       	ldi	r30, 0x59	; 89
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	8f 73       	andi	r24, 0x3F	; 63
    34ec:	8c 93       	st	X, r24
		TCNT2=0;        /* Disable TIMER2 */
    34ee:	e4 e4       	ldi	r30, 0x44	; 68
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	10 82       	st	Z, r1
		TCCR2=0;        /* Clear Counter*/
    34f4:	e5 e4       	ldi	r30, 0x45	; 69
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	10 82       	st	Z, r1
		OCR0=0;         /*Clear Compare Register*/
    34fa:	ec e5       	ldi	r30, 0x5C	; 92
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	10 82       	st	Z, r1
		break;
	}
}
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <Timer_setCallBack>:
 * Argument    : channel of the timer -> timer 0,1,2
 * 				 pointer to Call Back function
 * Returns     : None
 ***************************************************/

void Timer_setCallBack(Timer_channel channel,void(*a_ptr)(void)){
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	00 d0       	rcall	.+0      	; 0x3512 <Timer_setCallBack+0x6>
    3512:	00 d0       	rcall	.+0      	; 0x3514 <Timer_setCallBack+0x8>
    3514:	0f 92       	push	r0
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	89 83       	std	Y+1, r24	; 0x01
    351c:	7b 83       	std	Y+3, r23	; 0x03
    351e:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel){
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	28 2f       	mov	r18, r24
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	3d 83       	std	Y+5, r19	; 0x05
    3528:	2c 83       	std	Y+4, r18	; 0x04
    352a:	8c 81       	ldd	r24, Y+4	; 0x04
    352c:	9d 81       	ldd	r25, Y+5	; 0x05
    352e:	81 30       	cpi	r24, 0x01	; 1
    3530:	91 05       	cpc	r25, r1
    3532:	81 f0       	breq	.+32     	; 0x3554 <Timer_setCallBack+0x48>
    3534:	2c 81       	ldd	r18, Y+4	; 0x04
    3536:	3d 81       	ldd	r19, Y+5	; 0x05
    3538:	22 30       	cpi	r18, 0x02	; 2
    353a:	31 05       	cpc	r19, r1
    353c:	91 f0       	breq	.+36     	; 0x3562 <Timer_setCallBack+0x56>
    353e:	8c 81       	ldd	r24, Y+4	; 0x04
    3540:	9d 81       	ldd	r25, Y+5	; 0x05
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	a1 f4       	brne	.+40     	; 0x356e <Timer_setCallBack+0x62>
	case timer0:
		g_callBackPtr0=a_ptr;
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	9b 81       	ldd	r25, Y+3	; 0x03
    354a:	90 93 85 01 	sts	0x0185, r25
    354e:	80 93 84 01 	sts	0x0184, r24
    3552:	0d c0       	rjmp	.+26     	; 0x356e <Timer_setCallBack+0x62>
		break;
	case timer1:
		g_callBackPtr1=a_ptr;
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	9b 81       	ldd	r25, Y+3	; 0x03
    3558:	90 93 87 01 	sts	0x0187, r25
    355c:	80 93 86 01 	sts	0x0186, r24
    3560:	06 c0       	rjmp	.+12     	; 0x356e <Timer_setCallBack+0x62>
		break;
	case timer2:
		g_callBackPtr2=a_ptr;
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	9b 81       	ldd	r25, Y+3	; 0x03
    3566:	90 93 89 01 	sts	0x0189, r25
    356a:	80 93 88 01 	sts	0x0188, r24
		break;

	}
}
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	0f 90       	pop	r0
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_config *configuration)
{
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	00 d0       	rcall	.+0      	; 0x3584 <UART_init+0x6>
    3584:	00 d0       	rcall	.+0      	; 0x3586 <UART_init+0x8>
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	9a 83       	std	Y+2, r25	; 0x02
    358c:	89 83       	std	Y+1, r24	; 0x01
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    358e:	ea e2       	ldi	r30, 0x2A	; 42
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	88 e1       	ldi	r24, 0x18	; 24
    3594:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3596:	e0 e4       	ldi	r30, 0x40	; 64
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	86 e8       	ldi	r24, 0x86	; 134
    359c:	80 83       	st	Z, r24
	UCSRC|=((configuration->polarity_mode) <<4);
    359e:	a0 e4       	ldi	r26, 0x40	; 64
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	e0 e4       	ldi	r30, 0x40	; 64
    35a4:	f0 e0       	ldi	r31, 0x00	; 0
    35a6:	80 81       	ld	r24, Z
    35a8:	28 2f       	mov	r18, r24
    35aa:	e9 81       	ldd	r30, Y+1	; 0x01
    35ac:	fa 81       	ldd	r31, Y+2	; 0x02
    35ae:	81 81       	ldd	r24, Z+1	; 0x01
    35b0:	88 2f       	mov	r24, r24
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	82 95       	swap	r24
    35b6:	92 95       	swap	r25
    35b8:	90 7f       	andi	r25, 0xF0	; 240
    35ba:	98 27       	eor	r25, r24
    35bc:	80 7f       	andi	r24, 0xF0	; 240
    35be:	98 27       	eor	r25, r24
    35c0:	82 2b       	or	r24, r18
    35c2:	8c 93       	st	X, r24
	
	switch(configuration->mode){
    35c4:	e9 81       	ldd	r30, Y+1	; 0x01
    35c6:	fa 81       	ldd	r31, Y+2	; 0x02
    35c8:	80 81       	ld	r24, Z
    35ca:	28 2f       	mov	r18, r24
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	3c 83       	std	Y+4, r19	; 0x04
    35d0:	2b 83       	std	Y+3, r18	; 0x03
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	31 f0       	breq	.+12     	; 0x35e6 <UART_init+0x68>
    35da:	2b 81       	ldd	r18, Y+3	; 0x03
    35dc:	3c 81       	ldd	r19, Y+4	; 0x04
    35de:	21 30       	cpi	r18, 0x01	; 1
    35e0:	31 05       	cpc	r19, r1
    35e2:	81 f0       	breq	.+32     	; 0x3604 <UART_init+0x86>
    35e4:	24 c0       	rjmp	.+72     	; 0x362e <UART_init+0xb0>
	case Async:
		CLEAR_BIT(UCSRC,UMSEL);
    35e6:	a0 e4       	ldi	r26, 0x40	; 64
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	e0 e4       	ldi	r30, 0x40	; 64
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	8f 7b       	andi	r24, 0xBF	; 191
    35f2:	8c 93       	st	X, r24
		UBRRH = (BAUD_PRESCALE_SYNCH>>8);
    35f4:	e0 e4       	ldi	r30, 0x40	; 64
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	10 82       	st	Z, r1
		UBRRL =  BAUD_PRESCALE_SYNCH;
    35fa:	e9 e2       	ldi	r30, 0x29	; 41
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	83 e3       	ldi	r24, 0x33	; 51
    3600:	80 83       	st	Z, r24
    3602:	15 c0       	rjmp	.+42     	; 0x362e <UART_init+0xb0>
		break;
	case sync:
		SET_BIT(UCSRC,UMSEL);
    3604:	a0 e4       	ldi	r26, 0x40	; 64
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	e0 e4       	ldi	r30, 0x40	; 64
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	80 81       	ld	r24, Z
    360e:	80 64       	ori	r24, 0x40	; 64
    3610:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCPOL);
    3612:	a0 e4       	ldi	r26, 0x40	; 64
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e0 e4       	ldi	r30, 0x40	; 64
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	81 60       	ori	r24, 0x01	; 1
    361e:	8c 93       	st	X, r24
		UBRRH = (BAUD_PRESCALE_SYNCH>>8);
    3620:	e0 e4       	ldi	r30, 0x40	; 64
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	10 82       	st	Z, r1
		UBRRL =  BAUD_PRESCALE_SYNCH;
    3626:	e9 e2       	ldi	r30, 0x29	; 41
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	83 e3       	ldi	r24, 0x33	; 51
    362c:	80 83       	st	Z, r24
		break;
	}

}
    362e:	0f 90       	pop	r0
    3630:	0f 90       	pop	r0
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	08 95       	ret

0000363c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	0f 92       	push	r0
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3648:	eb e2       	ldi	r30, 0x2B	; 43
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	80 81       	ld	r24, Z
    364e:	88 2f       	mov	r24, r24
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	80 72       	andi	r24, 0x20	; 32
    3654:	90 70       	andi	r25, 0x00	; 0
    3656:	00 97       	sbiw	r24, 0x00	; 0
    3658:	b9 f3       	breq	.-18     	; 0x3648 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    365a:	ec e2       	ldi	r30, 0x2C	; 44
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3662:	0f 90       	pop	r0
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3672:	eb e2       	ldi	r30, 0x2B	; 43
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	88 23       	and	r24, r24
    367a:	dc f7       	brge	.-10     	; 0x3672 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    367c:	ec e2       	ldi	r30, 0x2C	; 44
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
}
    3682:	cf 91       	pop	r28
    3684:	df 91       	pop	r29
    3686:	08 95       	ret

00003688 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	00 d0       	rcall	.+0      	; 0x368e <UART_sendString+0x6>
    368e:	0f 92       	push	r0
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	9b 83       	std	Y+3, r25	; 0x03
    3696:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3698:	19 82       	std	Y+1, r1	; 0x01
    369a:	0e c0       	rjmp	.+28     	; 0x36b8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	28 2f       	mov	r18, r24
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	9b 81       	ldd	r25, Y+3	; 0x03
    36a6:	fc 01       	movw	r30, r24
    36a8:	e2 0f       	add	r30, r18
    36aa:	f3 1f       	adc	r31, r19
    36ac:	80 81       	ld	r24, Z
    36ae:	0e 94 1e 1b 	call	0x363c	; 0x363c <UART_sendByte>
		i++;
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	8f 5f       	subi	r24, 0xFF	; 255
    36b6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	9b 81       	ldd	r25, Y+3	; 0x03
    36c2:	fc 01       	movw	r30, r24
    36c4:	e2 0f       	add	r30, r18
    36c6:	f3 1f       	adc	r31, r19
    36c8:	80 81       	ld	r24, Z
    36ca:	88 23       	and	r24, r24
    36cc:	39 f7       	brne	.-50     	; 0x369c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    36da:	0f 93       	push	r16
    36dc:	1f 93       	push	r17
    36de:	df 93       	push	r29
    36e0:	cf 93       	push	r28
    36e2:	00 d0       	rcall	.+0      	; 0x36e4 <UART_receiveString+0xa>
    36e4:	0f 92       	push	r0
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
    36ea:	9b 83       	std	Y+3, r25	; 0x03
    36ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    36ee:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	28 2f       	mov	r18, r24
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	8a 81       	ldd	r24, Y+2	; 0x02
    36f8:	9b 81       	ldd	r25, Y+3	; 0x03
    36fa:	8c 01       	movw	r16, r24
    36fc:	02 0f       	add	r16, r18
    36fe:	13 1f       	adc	r17, r19
    3700:	0e 94 35 1b 	call	0x366a	; 0x366a <UART_recieveByte>
    3704:	f8 01       	movw	r30, r16
    3706:	80 83       	st	Z, r24
    3708:	0f c0       	rjmp	.+30     	; 0x3728 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    370a:	89 81       	ldd	r24, Y+1	; 0x01
    370c:	8f 5f       	subi	r24, 0xFF	; 255
    370e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	28 2f       	mov	r18, r24
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	8a 81       	ldd	r24, Y+2	; 0x02
    3718:	9b 81       	ldd	r25, Y+3	; 0x03
    371a:	8c 01       	movw	r16, r24
    371c:	02 0f       	add	r16, r18
    371e:	13 1f       	adc	r17, r19
    3720:	0e 94 35 1b 	call	0x366a	; 0x366a <UART_recieveByte>
    3724:	f8 01       	movw	r30, r16
    3726:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	28 2f       	mov	r18, r24
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	9b 81       	ldd	r25, Y+3	; 0x03
    3732:	fc 01       	movw	r30, r24
    3734:	e2 0f       	add	r30, r18
    3736:	f3 1f       	adc	r31, r19
    3738:	80 81       	ld	r24, Z
    373a:	83 32       	cpi	r24, 0x23	; 35
    373c:	31 f7       	brne	.-52     	; 0x370a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	28 2f       	mov	r18, r24
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	8a 81       	ldd	r24, Y+2	; 0x02
    3746:	9b 81       	ldd	r25, Y+3	; 0x03
    3748:	fc 01       	movw	r30, r24
    374a:	e2 0f       	add	r30, r18
    374c:	f3 1f       	adc	r31, r19
    374e:	10 82       	st	Z, r1
}
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	cf 91       	pop	r28
    3758:	df 91       	pop	r29
    375a:	1f 91       	pop	r17
    375c:	0f 91       	pop	r16
    375e:	08 95       	ret

00003760 <__prologue_saves__>:
    3760:	2f 92       	push	r2
    3762:	3f 92       	push	r3
    3764:	4f 92       	push	r4
    3766:	5f 92       	push	r5
    3768:	6f 92       	push	r6
    376a:	7f 92       	push	r7
    376c:	8f 92       	push	r8
    376e:	9f 92       	push	r9
    3770:	af 92       	push	r10
    3772:	bf 92       	push	r11
    3774:	cf 92       	push	r12
    3776:	df 92       	push	r13
    3778:	ef 92       	push	r14
    377a:	ff 92       	push	r15
    377c:	0f 93       	push	r16
    377e:	1f 93       	push	r17
    3780:	cf 93       	push	r28
    3782:	df 93       	push	r29
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62
    3788:	ca 1b       	sub	r28, r26
    378a:	db 0b       	sbc	r29, r27
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
    3796:	09 94       	ijmp

00003798 <__epilogue_restores__>:
    3798:	2a 88       	ldd	r2, Y+18	; 0x12
    379a:	39 88       	ldd	r3, Y+17	; 0x11
    379c:	48 88       	ldd	r4, Y+16	; 0x10
    379e:	5f 84       	ldd	r5, Y+15	; 0x0f
    37a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    37a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    37a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    37a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    37a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    37aa:	b9 84       	ldd	r11, Y+9	; 0x09
    37ac:	c8 84       	ldd	r12, Y+8	; 0x08
    37ae:	df 80       	ldd	r13, Y+7	; 0x07
    37b0:	ee 80       	ldd	r14, Y+6	; 0x06
    37b2:	fd 80       	ldd	r15, Y+5	; 0x05
    37b4:	0c 81       	ldd	r16, Y+4	; 0x04
    37b6:	1b 81       	ldd	r17, Y+3	; 0x03
    37b8:	aa 81       	ldd	r26, Y+2	; 0x02
    37ba:	b9 81       	ldd	r27, Y+1	; 0x01
    37bc:	ce 0f       	add	r28, r30
    37be:	d1 1d       	adc	r29, r1
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	f8 94       	cli
    37c4:	de bf       	out	0x3e, r29	; 62
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	cd bf       	out	0x3d, r28	; 61
    37ca:	ed 01       	movw	r28, r26
    37cc:	08 95       	ret

000037ce <itoa>:
    37ce:	fb 01       	movw	r30, r22
    37d0:	9f 01       	movw	r18, r30
    37d2:	e8 94       	clt
    37d4:	42 30       	cpi	r20, 0x02	; 2
    37d6:	c4 f0       	brlt	.+48     	; 0x3808 <itoa+0x3a>
    37d8:	45 32       	cpi	r20, 0x25	; 37
    37da:	b4 f4       	brge	.+44     	; 0x3808 <itoa+0x3a>
    37dc:	4a 30       	cpi	r20, 0x0A	; 10
    37de:	29 f4       	brne	.+10     	; 0x37ea <itoa+0x1c>
    37e0:	97 fb       	bst	r25, 7
    37e2:	1e f4       	brtc	.+6      	; 0x37ea <itoa+0x1c>
    37e4:	90 95       	com	r25
    37e6:	81 95       	neg	r24
    37e8:	9f 4f       	sbci	r25, 0xFF	; 255
    37ea:	64 2f       	mov	r22, r20
    37ec:	77 27       	eor	r23, r23
    37ee:	0e 94 18 1c 	call	0x3830	; 0x3830 <__udivmodhi4>
    37f2:	80 5d       	subi	r24, 0xD0	; 208
    37f4:	8a 33       	cpi	r24, 0x3A	; 58
    37f6:	0c f0       	brlt	.+2      	; 0x37fa <itoa+0x2c>
    37f8:	89 5d       	subi	r24, 0xD9	; 217
    37fa:	81 93       	st	Z+, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	a1 f7       	brne	.-24     	; 0x37ea <itoa+0x1c>
    3802:	16 f4       	brtc	.+4      	; 0x3808 <itoa+0x3a>
    3804:	5d e2       	ldi	r21, 0x2D	; 45
    3806:	51 93       	st	Z+, r21
    3808:	10 82       	st	Z, r1
    380a:	c9 01       	movw	r24, r18
    380c:	0c 94 08 1c 	jmp	0x3810	; 0x3810 <strrev>

00003810 <strrev>:
    3810:	dc 01       	movw	r26, r24
    3812:	fc 01       	movw	r30, r24
    3814:	67 2f       	mov	r22, r23
    3816:	71 91       	ld	r23, Z+
    3818:	77 23       	and	r23, r23
    381a:	e1 f7       	brne	.-8      	; 0x3814 <strrev+0x4>
    381c:	32 97       	sbiw	r30, 0x02	; 2
    381e:	04 c0       	rjmp	.+8      	; 0x3828 <strrev+0x18>
    3820:	7c 91       	ld	r23, X
    3822:	6d 93       	st	X+, r22
    3824:	70 83       	st	Z, r23
    3826:	62 91       	ld	r22, -Z
    3828:	ae 17       	cp	r26, r30
    382a:	bf 07       	cpc	r27, r31
    382c:	c8 f3       	brcs	.-14     	; 0x3820 <strrev+0x10>
    382e:	08 95       	ret

00003830 <__udivmodhi4>:
    3830:	aa 1b       	sub	r26, r26
    3832:	bb 1b       	sub	r27, r27
    3834:	51 e1       	ldi	r21, 0x11	; 17
    3836:	07 c0       	rjmp	.+14     	; 0x3846 <__udivmodhi4_ep>

00003838 <__udivmodhi4_loop>:
    3838:	aa 1f       	adc	r26, r26
    383a:	bb 1f       	adc	r27, r27
    383c:	a6 17       	cp	r26, r22
    383e:	b7 07       	cpc	r27, r23
    3840:	10 f0       	brcs	.+4      	; 0x3846 <__udivmodhi4_ep>
    3842:	a6 1b       	sub	r26, r22
    3844:	b7 0b       	sbc	r27, r23

00003846 <__udivmodhi4_ep>:
    3846:	88 1f       	adc	r24, r24
    3848:	99 1f       	adc	r25, r25
    384a:	5a 95       	dec	r21
    384c:	a9 f7       	brne	.-22     	; 0x3838 <__udivmodhi4_loop>
    384e:	80 95       	com	r24
    3850:	90 95       	com	r25
    3852:	bc 01       	movw	r22, r24
    3854:	cd 01       	movw	r24, r26
    3856:	08 95       	ret

00003858 <_exit>:
    3858:	f8 94       	cli

0000385a <__stop_program>:
    385a:	ff cf       	rjmp	.-2      	; 0x385a <__stop_program>
